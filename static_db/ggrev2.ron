(
    jump_table_ids: [
        0,
    ],
    literal_tag: 0,
    variable_tag: 2,
    named_variables: {
        // You can only write to variables that are marked as "writable". Writing to non-writable variables will have no effect.
        // Variables marked as "per player" allow access from effect scripts, but they access that value through their corresponding player.
        // Variables marked as "global" are stored in the game engine as a single variable, and both players and their effect scripts access the same variable.
        0:  "ACCUMULATOR",  // writable. Is used to obtain values from 'calcDistance', some if functions, checks, and other common functions
        1:  "ROTATION",  // writable. In 1/1000'th of degree. 1000 means 1 degree. Positive value rotates counter-clockwise when facing right, and clockwise when facing left. Same as PITCH. Pitch is the angle of rotation around the axis perpendicular to the screen
        2: "IS_CMN_ACT",  // returns 1 if the current action is a CmnAct..., otherwise returns 0
        3:  "PLAYERVAL_0",  // writable, per player. Gets reset to 0 on stage reset or new round. Survives state (animation) change
        4:  "PLAYERVAL_1",  // writable, per player. Gets reset to 0 on stage reset or new round. Survives state (animation) change
        5:  "PLAYERVAL_2",  // writable, per player. Gets reset to 0 on stage reset or new round. Survives state (animation) change
        6:  "PLAYERVAL_3",  // writable, per player. Gets reset to 0 on stage reset or new round. Survives state (animation) change
        7:  "PHYSICS_X_IMPULSE",  // writable. Your current X speed. If you set this, this sets your speed towards your current facing, so, providing a positive value while facing to the left would assign you negative speed. If you get this value, it gets multiplied by your facing before you see the result, so, if your speed is negative while facing to the left you get read a positive speed.
        8:  "PHYSICS_Y_IMPULSE",  // writable. Your current Y speed. Positive speed Y means going up, negative going down
        // 9, 10, 11, 12
        13: "FRAMES_PLAYED_IN_STATE",  // restarts from 1 on each state. Only advances forward when a sprite frame advances
        14: "OPPONENT_X_DISTANCE",  // the absolute value of opponent x - your x
        15: "OPPONENT_Y_DISTANCE",  // the absolute value of opponent y - your y
        16: "MATCH_RUNNING",  // global
        17: "POS_X",  // writable. Your current origin point's X coordinate, sometimes (read on) multiplied by your facing. Origin point is the point between your feet. When you try to set this value, what you set first gets multiplied by your facing, so if you set a negative X while facing left, you would set a positive value due to this. However, the same does not apply when reading this value: you read a negative position if it's negative, and a positive if positive, regardless of which direction you're facing.
        18: "POS_Y",  // writable. Your current origin point's Y coordinate. Origin point is the point between your feet
        19: "THIS_IS_ALWAYS_ZERO",  // always returns 0, no matter what
        20: "DISTANCE_TO_WALL_IN_FRONT",  // means the wall, not screen edge. Equal to abs( X of wall - your X )
        21: "DISTANCE_TO_WALL_IN_FRONT_AGAIN",  // same as DISTANCE_TO_WALL_IN_FRONT
        22: "PRIVATE_0_HITBOXES_COUNT",  // per player. Returns the number of PRIVATE_0 hitboxes of your corresponding player
        23: "DISTANCE_FROM_THIS_CENTER_TO_ENEMY_CENTER",  // center means center of body, it's lifted off the ground a bit. Is equal to sqrt((enemy center X - your center X)^2 + (enemy center Y - your center Y)^2)
        24: "PLAYER_IN_HITSTUN",  // per player. Does not include the frame when your player enter hitstun, unless they were already in hitstun on that frame
        25: "RESOURCE_AMOUNT",  // writable, per player. This is RESOURCE_AMOUNT_0. You have 5 slots to store different amounts of resources in. Resources get reset to 0 each round and stage reset
        26: "RESOURCE_AMOUNT_1",  // writable, per player. Resources get reset to 0 each round and stage reset
        27: "RESOURCE_AMOUNT_2",  // writable, per player. Resources get reset to 0 each round and stage reset
        28: "RESOURCE_AMOUNT_3",  // writable, per player. Resources get reset to 0 each round and stage reset
        29: "RESOURCE_AMOUNT_4",  // writable, per player. Resources get reset to 0 each round and stage reset
        30: "AIRBORNE",  // this check if based on your Y coordinate being > 0 and a flag which is not fully understood
        31: "NOT_IN_AIR",  // the opposite of AIRBORNE
        32: "FACING_LEFT",  // writable. This is the facing used to draw your sprite. This value is 0 if the graphical sprite is facing right and 1 if left
        33: "PLAYER_INPUTS_FACING_LEFT",  // writable, per player. This is the facing that is used when parsing inputs. It's 0 if right, 1 if left
        34: "OPPONENT_X_OFFSET",  // = opponent x - your x. Can be negative
        35: "OPPONENT_Y_OFFSET",  // = opponent y - your y. Can be negative
        36: "PLAYER_IN_HITSTUN_OR_BLOCKSTUN",  // per player. Does not include the frame when you enter hitstun or blockstun, unless you were already in hitstun or blockstun on that frame
        37: "VOICE_ID_IS_0",  // per player. At the start of a match each character gets assigned a random VoiceID from 0 to 2, maybe except I-No in some situations, where she gets 0 or 1
        38: "VOICE_ID_IS_1",  // per player
        39: "VOICE_ID_IS_2",  // per player
        40: "VOICE_ID_IS_3",  // per player. Voice ID can never be 3
        42: "SEND_SIGNAL_EX_PARAM2",  // writable, global. This allows you to write the second parameter of the next sendSignalEx call or read the second parameter of the last sendSignalEx call. Careful: this variable is global, meaning you must use it immediately after setting
        43: "SEND_SIGNAL_EX_PARAM3",  // writable, global. This allows you to write the third parameter of the next sendSignalEx call or read the third parameter of the last sendSignalEx call. Careful: this variable is global, meaning you must use it immediately after setting
        44: "DISTANCE_FROM_THIS_CENTER_TO_PLAYER_CENTER",  // center means center of body, it's lifted off the ground a bit. Is equal to sqrt((this center X - your player center X)^2 + (this center Y - your player Y)^2)
        // 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60: writable
        61: "GTMP_X",  // writable, per player. Gets reset to 0 on stage reset. This value participates in forming the POS_TYPE(GTMP). You can use this as just a variable
        62: "GTMP_Y",  // writable, per player. Gets reset to 0 on stage reset. This value participates in forming the POS_TYPE(GTMP). You can use this as just a variable
        // 63, 64, 65, 66, 67, 68: writable, per player
        // The following values survive state (animation) switch
        69: "STORAGE1",  // writable. Reset on stage reset or new round
        70: "STORAGE2",  // writable. Reset on stage reset or new round
        71: "STORAGE3",  // writable. Reset on stage reset or new round
        72: "STORAGE4",  // writable. Reset on stage reset or new round
        73: "STORAGE5",  // writable. Does not get reset on stage reset
        74: "STORAGE6",  // writable. Does not get reset on stage reset
        75: "STORAGE7",  // writable. Does not get reset on stage reset
        76: "STORAGE8",  // writable. Does not get reset on stage reset
        77: "HEALTH",  // writable
        78: "MAX_HEALTH",  // writable. Standard value is 420 for all characters. They do differ in effective HP though due to guts, but that is not reflected here
        79: "DAMAGE_SCALE",  // writable, per player. Percentage that alters all dealt damage by you or your projectiles
        80: "EXTRA_PRORATION",  // writable, per player. All incoming damage gets divided by this percentage. Gets reset to 100 on stage reset
        81: "ANIMATION_DIDNT_ADVANCE",  // is true during hitstop, superfreeze and on every second frame of an RC slowdown period. Actually, this returns an enum: 0 for when time flow is normal, 1 for when in hitstop, 2 for when skipping the frame due to RC slowdown, 3 for when in superfreeze
        // 82: writable, per player
        83: "POS_X_RAW",  // writable. Your current origin point's X coordinate. Origin point is the point between your feet. This position is never multiplied by your facing, neither when reading, nor when setting
        84: "IS_BOSS",  // per player. You're the boss if you're the last opponent in the Story/Arcade mode
        85: "IS_LOCATION_TEST",  // per player. This probably refers to the location test of Xrd Rev 2.1
        86: "STANDING_COUNTER_IS_ZERO",  // per player. Reports if STANDING_COUNTER is 0. Always returns false in combo trials mode, mission mode and tutorial mode
        87: "STANDING_COUNTER",  // writable, per player. Decremenets by 1 each frame, including during hitstop and superfreeze. It is called this way because it is used primarily by standing animations
        88: "PROJECTILE_DAMAGE_SCALE",  // writable. Percentage that affects damage of incoming attacks that have > 0 projectile durability/level. Projectiles that attack you set their level using setProjectileDurability beforehand
        89: "TRAINING_MODE_AND_NO_ONE_IN_XSTUN_OR_THROW_INVUL_FROM_XSTUN_OR_AIRBORNE_OR_ATTACKING",  // per player. By X-Stun I mean hitstun or blockstun
        90: "IS_TRAINING_MODE",  // global
        91: "ALWAYS_ZERO",  // this always returns 0, no matter what
        92: "IS_PERFORMED_RAW",  // this means that the move was not cancelled into from another move
        93: "PLAYER_SIDE",  // 0 for P1 effects and player, 1 for P2 effects and player
        // 95: per player
        96: "DISTANCE_FROM_THIS_CENTER_TO_ENEMY_CENTER_DUPLICATE",  // same as DISTANCE_FROM_THIS_CENTER_TO_ENEMY_CENTER
        97: "PITCH",  // writable. In 1/1000'th of a degree. So 1000 means 1 degree. Means same thing as ROTATION. 0 is unrotated and positive angle rotates you counter-clockwise when facing right, or clockwise when facing left. Pitch is the angle of rotation around the axis perpendicular to the screen
        // 98
        99: "SCALE_X",  // writable. 1000 means unscaled. Scales horizontally
        100: "SCALE_X_GROWTH",  // writable. SCALE_X will increase by this amount each frame until you reset it to 0
        101: "EX_KIZETSU",  // writable, per player. Setting this to true will make it so that the next time you recover from a move you will enter "ExKizetsu" state. This value does not automatically get cleared to 0
        102: "EXPOINT_X",  // writable. These two variables are set by exPointFReset, exPointFResetObject, and can also be written to directly. They get reset to 0 on stage reset. When Venom hits a ball, for the ball this is set to the middle point between Venom and ball. POS_TYPE EX_POINT_F refers to these variables
        103: "EXPOINT_Y",  // writable. See EXPOINT_X
        104: "OPPONENT_X_OFFSET_TOWARDS_FACING",  // this is X distance to the opponent except if you're facing away from them, then it is negative
        105: "FRAMES_SINCE_REGISTERING_FOR_THE_ANIMATION_FRAME_ADVANCED_SIGNAL",  // upon0_21 has an ANIMATION_FRAME_ADVANCED event. When first registering for that event, this value gets reset to 0. It advances each frame by 1 after ANIMATION_FRAME_ADVANCED event is fired and onIdling procedure is called. It is only incremented when not in hitstop, not in superfreeze, and increments at half the rate during RC slowdown.
        106: "MIN_HORIZ_DIST_BETWEEN_PUSHBOXES",  // gets distance from your pushbox to enemy player's pushbox. If you're a projectile, it takes the projectile's pushbox
        107: "PLAYER_TENSION_MODE",  // writable, per player. Value 0 means IK_NOT_ACTIVE, 1: RED_IK_ACTIVE, 2: GOLD_IK_ACTIVE, 3: TENSION_DISABLED_UNTIL_END_OF_ROUND
        // 108: writable, per player
        109: "PLAYER_TENSION",  // writable, per player. 0 to 10000. When IK is active or tension is disabled until end of round, returns 0
        111: "MATCH_FINISHED",  // global. Is not the same as negated MATCH_RUNNING
        112: "HIGHER_PITCH_VOICE_TIMER",  // writable, per player. If you're a projectile, returns your player's timer. Decreases by 1 each frame, including frozen frames
        113: "CANT_BACKDASH_TIMER", // writable, per player. While this timer is not 0, you can't backdash. Decrements each frame
        114: "IS_TOUCHING_WALL_OR_SCREEN_EDGE",
        115: "CREATE_ARG_HIKITSUKI_VAL_1",  // writable. This can be used to read the first argument of the createArgHikitsukiVal call that was used before creating this projectile. Setting this variable is not the same as calling createArgHikitsukiVal with the same argument. The argument that you receive from createArgHikitsukiVal when you're created and the argument that you send via createArgHikitsukiVal are two separate variables. This is the argument you receive
        116: "CREATE_ARG_HIKITSUKI_VAL_2",  // writable. This can be used to read the second argument of the createArgHikitsukiVal call that was used before creating this projectile. Setting this variable is not the same as calling createArgHikitsukiVal with the same argument. The argument that you receive from createArgHikitsukiVal when you're created and the argument that you send via createArgHikitsukiVal are two separate variables. This is the argument you receive
        117: "LANDING_STIFF_FIELD_2",  // writable, per player. If the second argument of landingStiffTime had 0x2 flag, then this is equal to the first argument of landingStiffTime - the landing recovery, otherwise this is 0. This seems to be written only, but never read by the game engine
        // 119: writable, per player
        120: "BURST_METER",  // writable, per player. Capped at 15000
        // 121: only returns non-0 in MOM mode
        // 122
        123: "INTERROUND_VALUE_STORAGE1",  // writable, per player. Allows to store values between rounds
        124: "INTERROUND_VALUE_STORAGE2",  // writable, per player. Allows to store values between rounds
        126: "SUPERS_ARE_UNBLOCKABLE",  // per player. This flag changes the behavior of one super for each Sign character
        // 127
        128: "LAST_DEALT_COLLISION_ID", // this is a unique ID assigned to the last attack you connected on anything. When this ID is generated, the victim is given the same ID in their LAST_RECEIVED_COLLISION_ID
        129: "LAST_RECEIVED_COLLISION_ID", // this is a unique ID assigned to the last attack that connected on you. When this ID is generated, the attacker is given the same ID in their LAST_DEALT_COLLISION_ID
        130: "IS_PLAYER",  // false (0) for projectiles, true (1) for players
        131: "IS_PLAYING_CUTSCENE_ANIME",  // does not go to your corresponding player if accessed from effect. So effects will always read 0 here
        // 132: global
        // 133: global, per player
        134: "ALWAYS_ZERO3",  // this variable always returns 0, no matter what
        // 135: writable, per player
        // 136: global
        137: "INSTANT_KILLED",  // per player. The type of the received attack is Instant Kill
        // 138: writable, global
        139: "PLAYER_OR_ENEMY_ACTOR_PLAYING_CUTSCENE_ANIME",  // per player
        140: "PLAYER_ACTOR_PLAYS_CUTSCENE_ANIME",  // per player
        141: "ENEMY_ACTOR_PLAYS_CUTSCENE_ANIME",  // per player
        // 142: related to playing cutscene anime
        143: "IS_PLAYING_SOUND",
        // 144: global
        // 145, 146, 148, 149, 150, 151: per player
        152: "HELLFIRE",  // per player. Hellfire is a state when you have < 10% health while being combo'd or you returned to neutral with < 20% health and then you stay in hellfire state until you either regain health or die
        153: "LOWEST_HELD_BUTTON",  // per player. Possible values: 0: none, 1: PUNCH, 2: KICK, 3: SLASH, 4: HEAVY SLASH, 5: DUST, 6: TAUNT
        154: "IS_CPU",  // per player
        155: "IS_A_CPU_WHO_IS_NOT_PERFORMING_AN_EMOVE",  // per player
        156: "NORMALS_ENABLED",  // per player. Ability to perform normals is commonly regarded as the state of being "idle" or not performing any move
        // 157: writable, per player
        158: "HIT_BY_DUST",  // is hit by a dust (5D) attack
        159: "STYLISH",  // per player. Is the player using Stylish mode
        // 160
        161: "WAS_INPUT_USING_STYLISH",  // the move was performed using the Special button
        162: "NUMBER_OF_HITS_MAX",  // writable. Does not decrease with each hit taken. Specifies the maximum number of hits the projectile can take before getting destroyed (see requestDestroy). Is set using numberOfHits function or directly. When setting a value < 0, 0 is set instead.
        163: "NUMBER_OF_HITS_TAKEN",  // increments each hit taken. If destroyAssariEx is set to 1 (default is 0) or if destroyAiuchi is not set to TRUE (default is FALSE), you get destroyed when you reach NUMBER_OF_HITS_MAX 
        164: "IS_BURST_SUPER",  // per player
        165: "DUST_GATLING_TIMER", // writable, per player. During this timer, any non-follow-up, non-super, non-IK move can be cancelled into from any normal. Decrements by 1 each frame
        166: "HITSTUN",  // writable, per player. Returns the current remaining number of frames of hitstun of your player
        167: "TUMBLE_DURATION", // writable, per player. The duration of the received tumble. Does not decrement over time. Instead, CmnActKorogari (tumble animation) has an internal counter that counts up to this value.
        168: "STYLISH_DAMAGE_DIVISOR",  // writable, global. All incoming damage is divided by this percentage for players who are using the Stylish mode
        169: "STYLISH_TENSION_MODIFIER",  // writable, global. A percentage. All incoming tension is multiplied by it for players who are using the Stylish mode
        170: "STYLISH_BURST_GAIN_MODIFIER",  // writable, global. A percentage. All incoming burst gauge values are multiplied by it for players who are using the Stylish mode
        172: "DOKI_DOKI_STOP_HASSEI_ENABLED",  // writable, global. Specify 0 or 1. If 1, Dramatic Finale is allowed to happen. If 0, it can never happen. This variable is global. The default value is 1.
        173: "DOKI_DOKI_STOP_HASSEI_PRE_TIME",  // writable, global. Specify the amount of time, in frames, that Dramatic Finale happens before the killing blow attacks become active. This variable is global. The default value is 6.
        174: "DOKI_DOKI_X_DIST_MIN",  // writable, global. The minimum distance between players' X position to trigger Dramatic Finale. This is just one of the checks that must be satisfied to trigger Dramatic Finale. This variable is global. Default value is 100000, which is the distance at which players' pushboxes are touching
        175: "DOKI_DOKI_X_DIST_MAX",  // writable, global. The maximum distance between players' X position to trigger Dramatic Finale. This is just one of the checks that must be satisfied to trigger Dramatic Finale. This variable is global. Default value is 500000
        176: "DOKI_DOKI_MAX_DIST_Y",  // writable, global. The maximum distance between players' Y position to trigger Dramatic Finale. This is just one of the checks that must be satisfied to trigger Dramatic Finale. This variable is global. Default value is 360000
        177: "STANDARD_DOKI_DOKI_STOP_HASSEI",  // writable, global. Default value is 7. This provides the standard value for moves that have not set a timing using the dokiDokiStopHassei function. This variable is global.
        // 178: writable, global
        197: "ALWAYS_MINUS_ONE",  // this always returns -1, no matter what
        // 198: writable, global
        199: "DOKI_DOKI_COOLDOWN_TIMER",  // writable, global. A timer that is stored in the game engine, which decrements by 1 each frame, including superfreeze. While it is above 0, Dramatic Finale cannot happen
        200: "TIME_SINCE_CREATION",  // starts from 0 and counts time, including frozen frames, since creation, and never gets reset until the object is destroyed
        // 201, 202, 203, 204: writable, per player. These variables can be used in move conditions
        205: "ALWAYS_ZERO_205",  // this always returns 0, no matter what
        206: "ALWAYS_ZERO_206",  // this always returns 0, no matter what
        207: "ALWAYS_ZERO_207",  // this always returns 0, no matter what
        208: "ALWAYS_ZERO_208",  // this always returns 0, no matter what
        209: "OPPONENT_ALREADY_HIT_BY_NEOBLITZ",  // per player. Neo blitz means blitz shield attack
        210: "DUST_PRORATION1",  // writable, per player. This proration percentage is unconditionally applied to all incoming damage. Set this on the one who is going to take the damage
        211: "DUST_PRORATION2",  // writable, per player. This proration percentage is unconditionally applied to all incoming damage. Set this on the one who is going to take the damage
        212: "IS_STYLISH_OR_CPU",  // per player
        213: "ENABLE_NORMALS",  // per player. Same as NORMALS_ENABLED
        214: "OPPONENT_IN_HITSTUN",  // per player. Includes the frame when hitstun is entered into. Returns 0 or 1
        215: "IS_DARK_COLOR",  // per player. This is something that can be set in Arcade (Story) mode per opponent, but no one has dark color set to true. When this is true, if your (assuming you're the AI opponent) color is the same as that of the human player, and both use the same character, the you (the AI) don't change your color to mirror color. When this is false, if both players use the same character and color, the AI (you) are changed to the mirror (dark) color. This value does not by itself reflect whether you (the AI) currently have the dark color. It merely means whether the check for resolving a color collision with dark color was enabled for the AI opponent. When this value is accessed by human player or their effects, it should always return 0, because there is no way to set IS_DARK_COLOR to true for the human player in arcade mode. This should be always false even for the AI opponent, because there are no arcade missions that have set this value to true.
        216: "HIT_BY_NORMAL_THROW", // checks whether you were hit by an attack that has either kuuchuutuujounageTsukami (normal airthrow) or chijoutuujounageTsukami (normal ground throw) flags. These flags are only ever set on normal ground and air throws and disappear as soon as the non-throw portion of the H/OS move starts in case the throw whiffed. Meaning that if you got hit by an attack that was 4H/6H or a throw OS, but the attack itself was not a throw, then HIT_BY_NORMAL_THROW would be false on this hit. But if you get hit by the throw portion of that attack, then HIT_BY_NORMAL_THROW would return true.
        217: "HIT_BY_OVERDRIVE",
        // 218: global
        // 219, 220, 221, 222, 223, 224, 225: writable, global
        226: "ALPHA",  // writable. This is the alpha (transparency) of the color. From 0 to 255. Setting this to 0 makes you fully transparent
        // 227: global
        // 228: writable, per player
        229: "SLOW_SPEED_PERCENTAGE",  // writable, per player. Percentage that multiplies your movement speed, making it slower if < 100 or faster if > 100
        // 230: global
        231: "IS_TRIAL_COMPLETED",  // global, per trial
        232: "TRIAL_BEST_TIME",  // writable, global, per trial
        233: "TRIAL_TIME",  // writable, global
        234: "MOM_INFINITE_DRAGON_INSTALL",  // apparently, some item in MOM causes Sol to enter DI indefinitely
        235: "COSTUME",  // used by Elphelt to determine selected outfit
        236: "ARMORED_HITS_ON_THIS_FRAME",  // per player
    },
    named_value_maps: {
        "Entity": {
            // all entity slots that can be used to store entities are stored directly inside of the projectile or player that is accessing the entity
            1: "PREVIOUS",  // the last created entity using createObject, createObjectWithArg
            2: "PARENT",  // the entity that created this object
            3: "PLAYER",  // the corresponding player of this projectile, or the player themselves
            4: "STACK_0",  // you can store entities in these slots
            5: "STACK_1",  // you can store entities in these slots
            6: "STACK_2",  // you can store entities in these slots
            7: "STACK_3",  // you can store entities in these slots
            8: "STACK_4",  // you can store entities in these slots
            9: "STACK_5",  // you can store entities in these slots
            10: "STACK_6",  // you can store entities in these slots
            11: "STACK_7",  // you can store entities in these slots
            12: "STACK_FOR_CMN_ACT",  // you can store entities in this slot. This slot is used by some MOM item scripts, but other than that, it should be free to use
            13: "WINNER",
            14: "LOSER",
            21: "LOCKED", // when performing a grab, this is the opponent you're grabbing
            22: "ENEMY",  // the opponent player
            23: "SELF",
            24: "LAST_ATTACKER",  // the player or effect that hit you last
            25: "LAST_DEFENDER",  // the player or effect that you hit last
            26: "STACK_9",  // you can store entities in this slot
            27: "PLAYER_0",  // this means Player 1
            28: "PLAYER_1",  // this means Player 2
        },
        "counterHitType0_1037": {
            0: "DEFAULT",
            1: "NO_COUNTER",
            2: "FORCE_COUNTER",
        },
        "MoveCondition": {
            0: "NONE",  // this move condition is always fulfilled
            1: "LAND",
            2: "AIR",
            3: "REQUIRES_50_TENSION",
            4: "REQUIRES_100_TENSION",
            5: "REQUIRES_25_TENSION",
            6: "JUMP_COUNT_OK",
            7: "AIRDASH_COUNT_OK",
            11: "ENEMY_IN_OTG_STATE",
            12: "PLAYERVAL_0_TRUE",  // is true if contains any value other than 0
            13: "PLAYERVAL_1_TRUE",  // is true if contains any value other than 0
            14: "PLAYERVAL_2_TRUE",  // is true if contains any value other than 0
            15: "PLAYERVAL_3_TRUE",  // is true if contains any value other than 0
            16: "PLAYERVAL_0_FALSE",  // is false if contains 0
            17: "PLAYERVAL_1_FALSE",  // is false if contains 0
            18: "PLAYERVAL_2_FALSE",  // is false if contains 0
            19: "PLAYERVAL_3_FALSE",  // is false if contains 0
            40: "REQUIRES_50_TENSION_DEADANGLE",  // made for Dead Angle. Is separate from REQUIRES_50_TENSION, because it includes some MOM checks
            50: "EX_GAUGE_0_FULL",  // EX_GAUGE is same as RESOURCE
            51: "EX_GAUGE_1_FULL",
            52: "EX_GAUGE_2_FULL",
            53: "EX_GAUGE_3_FULL",
            54: "EX_GAUGE_4_FULL",
            56: "Y_BELOW_50000",
            57: "Y_BELOW_100000",
            58: "Y_BELOW_150000",
            59: "Y_BELOW_200000",
            60: "IS_TOUCHING_WALL",
            61: "IS_TOUCHING_SCREEN_EDGE",
            62: "EX_GAUGE_0_EMPTY",  // EX_GAUGE is same as RESOURCE
            63: "EX_GAUGE_1_EMPTY",
            64: "EX_GAUGE_2_EMPTY",
            65: "EX_GAUGE_3_EMPTY",
            66: "EX_GAUGE_4_EMPTY",
            68: "IS_TOUCHING_LEFT_SCREEN_EDGE",
            69: "IS_TOUCHING_RIGHT_SCREEN_EDGE",
            70: "ALWAYS_FALSE",  // this move condition is never fulfilled
            71: "NOT_DASHING",  // you're considered not dashing as soon as CmnActFDashStop animation starts, which is as soon as you release 6/3 if you were running for more than 9 frames or after frame 9 of CmnActFDash if you held 6/3 for 9 frames or less. Or as soon as you press a button or do any other action than running
            72: "EX_GAUGE_0_NOT_EMPTY",
            73: "EX_GAUGE_1_NOT_EMPTY",
            74: "EX_GAUGE_2_NOT_EMPTY",
            75: "EX_GAUGE_3_NOT_EMPTY",
            76: "EX_GAUGE_4_NOT_EMPTY",
            77: "HEIGHT_OK_FOR_AIRDASH",
            78: "MOVE_CHECK_BIT_0",  // these conditions can be used to check for move bits, which get reset to 0 before every skill check. You can set bits using setMoveCheckBit function inside an OnPreSkillCheck handler and use these conditions to check for them
            79: "MOVE_CHECK_BIT_1",
            80: "MOVE_CHECK_BIT_2",
            81: "MOVE_CHECK_BIT_3",
            82: "MOVE_CHECK_BIT_4",
            83: "MOVE_CHECK_BIT_5",
            84: "MOVE_CHECK_BIT_6",
            85: "MOVE_CHECK_BIT_7",
            86: "MOVE_CHECK_BIT_8",
            87: "MOVE_CHECK_BIT_9",
            88: "MOVE_CHECK_BIT_10",
            89: "MOVE_CHECK_BIT_11",
            90: "MOVE_CHECK_BIT_12",
            91: "MOVE_CHECK_BIT_13",
            92: "MOVE_CHECK_BIT_14",
            93: "MOVE_CHECK_BIT_15",
            94: "IS_BOSS",  // you're the boss if you're the last opponent in the Story/Arcade mode
            95: "IS_NOT_BOSS",
            96: "MATCH_RUNNING",
            97: "NOT_HOLDING_FD",
            98: "IS_CPU",
            99: "OPPONENT_IN_AIR_HITSTUN",  // this returns 1 if opponent is in animations CmnActBDownUpper, CmnActBDownUpperEnd, CmnActBDownDown, CmnActBDownBound, CmnActFDownUpper, CmnActFDownUpperEnd, CmnActFDownDown, CmnActFDownBound, CmnActVDownUpper, CmnActVDownUpperEnd, CmnActVDownDown, CmnActVDownBound, CmnActBlowoff, CmnActKirimomiUpper, CmnActWallBound, CmnActWallBoundDown, CmnActZSpin, CmnActExDamage, CmnActKorogari, CmnActWallHaritsuki. Does not include animation of being grabbed in the air. Does not include the first frame - the one when the hit connects
            100: "ALWAYS_FALSE_TOO",  // this move condition is never fulfilled
            101: "ALWAYS_TRUE",  // this move condition is always fulfilled
            102: "CLOSE_SLASH",  // the distance is appropriate for close slash. The range for the close slash is set by the closeSlashRange function
            103: "FAR_SLASH",  // the opposite of CLOSE_SLASH, except this is additionally limited by the enableFarSlash flag
            104: "CAN_BURST",  // you can burst if your burst gauge is full and your burst is not currently disabled, like from a throw or super
            105: "HAS_TENSION",  // returns 1 if you have more than zero tension, otherwise returns 0
            106: "CAN_ACTIVATE_OR_DEACTIVATE_IK",  // returns 1 if you have not sent an IK attack yet (so your tension bar is not completely disabled)
            107: "CAN_SEND_IK",  // returns 1 if you have activated red or gold IK and are ready to send it
            108: "GAME_MODE_IS_NOT_SPARRING",  // I'm not sure what sparring mode is
            109: "GAME_MODE_IS_NOT_SPARRING_ALSO",  // same as GAME_MODE_IS_NOT_SPARRING
            110: "HEIGHT_OK_FOR_DOUBLE_JUMP",
            111: "ALWAYS_FALSE_2",  // this move condition is never fulfilled
            114: "OPPONENT_IN_BLOCKSTUN",
            115: "OPPONENT_CROUCHING",
            116: "FULL_BURST_GAUGE",
            117: "OPPONENT_IN_HITSTUN",  // includes the frame the first hit connected. However, the skill check takes place before hits connect, so does it?
            118: "OPPONENT_IN_COUNTERHIT_HITSTUN",  // includes the frame the first hit connected. However, the skill check takes place before hits connect, so does it?
            119: "OPPONENT_NOT_CROUCHING",
            120: "MEM201",  // checks if Mem(201) is not 0
            121: "MEM202",  // checks if Mem(202) is not 0
            122: "MEM203",  // checks if Mem(203) is not 0
            123: "MEM204",  // checks if Mem(204) is not 0
            124: "NOT_MEM201",  // checks if Mem(201) is 0
            125: "NOT_MEM202",  // checks if Mem(202) is 0
            126: "NOT_MEM203",  // checks if Mem(203) is 0
            127: "NOT_MEM204",  // checks if Mem(204) is 0
            128: "IS_CPU_AGAIN",
            129: "CAN_GATLING",  // you can gatling if enableGatlings is 1 and [your attack hit something and it is hitstop] or until you call recoveryState or attackOff does not terminate the gatling window
        },
        "allowHitting0_2279": {
            0: "ENEMY",
            1: "SELF",
            2: "ALL",
        },
        "characterState0_1379": {
            0: "NONE",
            1: "STANDING",
            2: "CROUCHING",
            3: "JUMPING",
        },
        "checkInput0_48": {
            0: "INPUT_ALWAYS_TRUE",  // this input is always successfully "parsed" and found to be present no matter what the actual inputs are
            1: "INPUT_HOLD_P",  // hold has no buffer window and simply checkes if a button is being held on the current frame
            2: "INPUT_P_STRICT_PRESS",  // strict presses have no buffer window and simply check if a button was pressed on the current frame, meaning it was not being held on the previous frame and is being held now
            3: "INPUT_P_STRICT_RELEASE",  // strict releases are like strict presses, but for releases
            4: "INPUT_PRESS_P",  // a press has a 3f buffer window, including current frame (so this frame, previous frame and the frame before that)
            5: "INPUT_NOT_HOLD_P",  // the negated check for INPUT_HOLD_P
            6: "INPUT_RELEASE_P",  // a release has a 3f buffer window, just like a press
            10: "INPUT_HOLD_K",
            11: "INPUT_K_STRICT_PRESS",
            12: "INPUT_K_STRICT_RELEASE",
            13: "INPUT_PRESS_K",
            14: "INPUT_NOT_HOLD_K",
            15: "INPUT_RELEASE_K",
            19: "INPUT_HOLD_S",
            20: "INPUT_S_STRICT_PRESS",
            21: "INPUT_S_STRICT_RELEASE",
            22: "INPUT_PRESS_S",
            23: "INPUT_NOT_HOLD_S",
            24: "INPUT_RELEASE_S",
            28: "INPUT_HOLD_H",
            29: "INPUT_H_STRICT_PRESS",
            30: "INPUT_H_STRICT_RELEASE",
            31: "INPUT_PRESS_H",
            32: "INPUT_NOT_HOLD_H",
            33: "INPUT_RELEASE_H",
            37: "INPUT_HOLD_D",
            38: "INPUT_D_STRICT_PRESS",
            39: "INPUT_D_STRICT_RELEASE",
            40: "INPUT_PRESS_D",
            41: "INPUT_NOT_HOLD_D",
            42: "INPUT_RELEASE_D",
            46: "INPUT_HOLD_TAUNT",
            47: "INPUT_TAUNT_STRICT_PRESS",
            48: "INPUT_TAUNT_STRICT_RELEASE",
            49: "INPUT_PRESS_TAUNT",
            50: "INPUT_NOT_HOLD_TAUNT",
            51: "INPUT_RELEASE_TAUNT",
            55: "INPUT_1",  // directions, or single-direction motions, do not have a buffer window. They simply check the direction on the current frame. We're using the numpad notation where 1 is downleft, 2 is down, 3 is downright, 4 is left, 5 is neutral, 6 is right, 7 is upleft, 8 is up, 9 is upright. The directions get mirrored left/right if you're facing left
            56: "INPUT_4_OR_1_OR_2",
            63: "INPUT_NOT_1",  // direction must be any but 1
            64: "INPUT_NOT_4_OR_1_OR_2",  // so not (4 or 1 or 2)
            68: "INPUT_2",
            69: "INPUT_ANYDOWN",  // anydown means 1, 2 or 3
            71: "INPUT_ANYDOWN_STRICT_PRESS",  // the direction must have been pressed on this frame exactly. This has no buffer window
            76: "INPUT_NOT_2",
            77: "INPUT_NOTANYDOWN",
            81: "INPUT_3",
            82: "INPUT_6_OR_3_OR_2",
            89: "INPUT_NOT_3",
            90: "INPUT_NOT_6_OR_3_OR_2",  // so not (6 or 3 or 2)
            94: "INPUT_4",
            95: "INPUT_ANYBACK",
            97: "INPUT_ANYBACK_STRICT_PRESS",
            102: "INPUT_NOT_4",
            103: "INPUT_NOTANYBACK",
            107: "INPUT_5",
            108: "INPUT_ALWAYS_TRUE_DUPLICATE",  // this input is always successfully "parsed" and found to be present no matter what the actual inputs are
            115: "INPUT_NOT_5",
            120: "INPUT_6",
            121: "INPUT_ANYFORWARD",
            123: "INPUT_ANYFORWARD_STRICT_PRESS",
            128: "INPUT_NOT_6",
            129: "INPUT_NOTANYFORWARD",
            133: "INPUT_7",
            134: "INPUT_4_OR_7_OR_8",
            141: "INPUT_NOT_7",
            142: "INPUT_NOT_4_OR_7_OR_8",  // so not (4 or 7 or 8)
            146: "INPUT_8",
            147: "INPUT_ANYUP",
            149: "INPUT_ANYUP_STRICT_PRESS",
            154: "INPUT_NOT_8",
            155: "INPUT_NOTANYUP",
            159: "INPUT_9",
            160: "INPUT_6_OR_9_OR_8",
            167: "INPUT_NOT_9",
            168: "INPUT_NOT_6_OR_9_OR_8",  // so not (6 or 9 or 8)
            172: "INPUT_236",  // 2(5)3(10)6(10). Explanation: motions don't have buffer windows for the motion itself in general. Instead, they have a buffer window for each input in the sequence, and the buffer window of the motion in general is actually the buffer window of its last input. Motions are being scanned in the input buffer input-by-input from the last input towards the first, looking for each direction in sequence. We will print the buffer windows for each direction of a motion in parentheses, and on every input, except the first and the last, the window includes the frame of that input and all frames up to and not including the next input (ex. 236, the 3 has 10f window, so starting from the 6, you must find the last frame where 6 was being held, then go one frame deeper into the past, 6 won't be held there anymore, and that frame is part of the window, so you count 1, and you count back into the past until you count 10 frames and on one of those frames 3 must have been held). On the last input the window includes the frame of the last input and all frames between that and the current frame inclusively. For the first (oldest) direction of a motion, it is looking not for the start of the direction input, but for any frame on which that direction had been "held" (it's not looking for a "press" of that direction, i.e. the start of its "held" interval). For any direction but the first, it is looking for the start of that input, i.e. the frame when it starts being held or when it got "pressed". In the 2(5)3(10)6(10) motion, holding 2, then releasing it for 4 frames and doing 36 will produce the motion, while holding 2, then releasing it for 5 frames and doing 36 will not produce the motion.
            173: "INPUT_623",  // 6(8)2(12)3(7)
            174: "INPUT_214",  // 2(5)1(10)4(10)
            175: "INPUT_41236",  // 4(5)1(12)2(12)3(12)6(12) or 4(5)2(12)3(12)6(12) or 4(5)1(12)2(12)6(12) or 4(5)1(12)3(12)6(12)
            176: "INPUT_421",  // 4(8)2(12)1(7)
            177: "INPUT_63214",  // 6(5)3(12)2(12)1(12)4(12) or 6(5)2(12)1(12)4(12) or 6(5)3(12)2(12)4(12) or 6(5)3(12)1(12)4(12)
            178: "INPUT_236236",  // 2(5)6(15)2(15)6(12) or 2(5)6(17)ANYDOWN(17)6(12) or 2(5)6(17)2(17)ANYFORWARD(12)
            179: "INPUT_214214",  // 2(5)4(15)2(15)4(12) or 2(5)4(17)ANYDOWN(17)4(12) or 2(5)4(17)2(17)ANYBACK(12)
            180: "INPUT_4123641236",  // 4(5)2(16)6(16)4(16)2(16)6(10)
            181: "INPUT_6321463214",  // 6(5)2(16)4(16)6(16)2(16)4(10)
            182: "INPUT_632146",  // 6(6)3(12)2(12)1(12)4(12)6(12) or 6(4)2(8)1(8)4(8)6(8) or 6(4)3(8)2(8)4(8)6(8) or 6(6)2(12)4(12)6(12) or 6(4)3(12)1(8)4(8)6(8)
            183: "INPUT_641236",  // 6(6)4(14)1(14)2(14)3(14)6(14)
            184: "INPUT_2141236",  // 2(6)1(12)4(12)ANYDOWN(24)6(10) or 2(6)4(12)2(12)6(10) or 2(6)4(12)2(12)3(12)6(10)
            185: "INPUT_2363214",  // 2(6)3(12)6(12)ANYDOWN(24)4(10) or 2(6)6(12)2(12)4(10) or 2(6)6(12)2(12)1(12)4(10)
            186: "INPUT_22",  // ANYDOWN(10)NOT_ANYDOWN(10)2(10)
            187: "INPUT_46",  // 4(5)6(10)
            188: "INPUT_CHARGE_BACK_FORWARD_30F",  // (ANYBACK must be charged (held) for at least 30f) ANYBACK(10)ANYFORWARD(10); ANYBACK(10) means that after releasing the charge, you must press ANYFORWARD within 10 frames, including the frame when you press ANYFORWARD and not including the frame when you last held the charge. ANYFORWARD(10) means same thing as in all other input buffer windows, that ANYFORWARD stays "active" for 10 frames, including the frame on which you pressed ANYFORWARD and including the current frame. So pressing ANYFORWARD for 9 frames and on frame 10 pressing the special move's button will still produce the special move while ANYFORWARD held for 10, followed by button will not
            189: "INPUT_CHARGE_DOWN_UP_30F",  // (ANYDOWN must be charged for at least 30f) ANYDOWN(10)ANYUP(10)
            190: "INPUT_6428",  // 6(6)4(14)2(14)8(10)
            191: "INPUT_CHARGE_BACK_UP_30F", // (ANYBACK must be charged for at least 30f) ANYBACK(10)2(10)ANYUP(10)
            192: "INPUT_64641236",  // 6(12)4(12)6(12)4(16)2(16)6(10)
            193: "INPUT_342646",  // 3(10)4(16)2(16)6(10)4(10)6(10)
            194: "INPUT_28",  // ANYDOWN(12)ANYUP(10)
            195: "INPUT_646",  // 6(5)4(9)6(7)
            196: "INPUT_P_MASH",  // mash inputs work by counting whether the number of times a button is pressed during a mash is >= 5. A button press is considered to be a part of a mash if it is pressed within 11 frames of the last press. A mash stays "valid" or "buffered" for 12 frames after the last press, including the frame of the last press
            197: "INPUT_K_MASH",
            198: "INPUT_S_MASH",
            199: "INPUT_H_MASH",
            200: "INPUT_D_MASH",
            201: "INPUT_CIRCLE",  // uses own poorly understood input parsing with buffer windows that are hard to describe that parses an input that seems to resemble a circle
            204: "INPUT_222",  // ANYDOWN(8)NOT_ANYDOWN(8)ANYDOWN(8)NOT_ANYDOWN(8)2(8)
            205: "INPUT_2222",  // ANYDOWN(10)NOT_ANYDOWN(10)ANYDOWN(10)NOT_ANYDOWN(10)ANYDOWN(10)NOT_ANYDOWN(10)2(10)
            206: "INPUT_236236_STRICTER",  // 2(5)6(10)2(10)6(10)
            212: "INPUT_PRESS_D_DUPLICATE",  // same as INPUT_PRESS_D
            213: "INPUT_HOLD_6_OR_3_AND_PRESS_TWO_OF_PKSH",
            214: "INPUT_ROMAN_CANCEL",  // any 3 or more of PKSH
            215: "INPUT_SUPERJUMP",  // the buffer window for the down press is 12f, including current frame. Down must not be pressed for longer than 13 frames. The up press must be on the current frame and cannot be buffered, however the superjump move itself (distinguished by moveType: (*_SUPER_JUMP)) can be buffered and its buffer window is 3f including current frame
            216: "INPUT_ANYUP_STRICT_PRESS_DUPLICATE",  // same as INPUT_ANYUP_STRICT_PRESS
            217: "INPUT_FORWARD_DASH",  // the first input of a dash is 6 or 9. This activates the 12f buffer window that includes the current frame. Within this window, you must press 6 again, however you can't slide into 6 from a 3 or a 9. Successfully completing a dash makes it buffered for 3 frames, including current frame, and terminates the 12f buffer window. This means that a third 6 press would start over the dash parsing from the beginning. This also means that dash cannot be mashed, since its 66 inputs come in pairs. Releasing 9/6/3 while the dash has already been successfully parsed and buffered will terminate its buffer window immediately on that frame. Meaning that if you want to dash after recovering from a move, you must keep holding 6 on the frame after the move ends. This is unlike the 3f button press buffer, in which the button need not be held continuously in order for the button buffer to keep being active. Additionally, changing the direction in any way (including from 5 to 2, from 2 to 3, etc) 4 times (not including the initial 6/9 input) terminates the 12f buffer window and the 3f dash buffer. However, if you complete the dash input on the very frame where you do the 4'th direction change, the dash is still successful, but will only have a 1f buffer, including current frame.
            218: "INPUT_BACKDASH",  // is buffered same way as INPUT_FORWARD_DASH, except in the opposite direction. This backdash version has a 3f buffer for the completed successful backdash
            219: "INPUT_BLOCK_WITH_CROSSUP_PROTECTION",  // you're considered holding block if you're holding 7/4/1, however, if you got crossed up, a 3f crossup protection starts. The cross up is determined at the start of a logic tick, before players have moved by their respective speeds on that frame. If you're not holding block, you're still considered holding block during crossup protection if you have held block in the past 6f. If you're airborne, things are different: if the opponent's player is behind your back, you're considered holding block if you're holding any forward or any back direction.
            220: "INPUT_BLOCK",  // this is the same as INPUT_BLOCK_WITH_CROSSUP_PROTECTION but without crossup protection
            221: "INPUT_151",  // 1(8)5(8)1(6)
            222: "INPUT_252",  // 2(8)5(8)2(6)
            223: "INPUT_353",  // 3(8)5(8)3(6)
            224: "INPUT_454",  // 4(8)5(8)4(6)
            225: "INPUT_66_QUICK",  // 6(8)5(8)6(6)
            226: "INPUT_757",  // 7(8)5(8)7(6)
            227: "INPUT_858",  // 8(8)5(8)8(6)
            228: "INPUT_959",  // 9(8)5(8)9(6)
            233: "INPUT_ALWAYS_TRUE_DUPLICATE2",  // this input is always successfully "parsed" and found to be present no matter what the actual inputs are
            234: "INPUT_ALWAYS_FALSE_DUPLICATE",  // this input is never found to be present no matter what the actual inputs are
            235: "INPUT_623_LENIENT",  // 6(8)2(12)3(14)
            238: "INPUT_22_LENIENT",  // ANYDOWN(10)NOT_ANYDOWN(10)2(14)
            239: "INPUT_5_OR_4_OR_ANY_UP",
            240: "INPUT_5_OR_ANY_UP",
            241: "INPUT_5_OR_6_OR_ANY_UP",
            242: "INPUT_5_OR_4_OR_7_OR_8",
            243: "INPUT_421_LENIENT",  // 4(8)2(12)1(14)
            246: "INPUT_16243",  // 1(16)6(16)2(16)4(16)3(16)
            247: "INPUT_546",  // 5(6)4(11)6(3)
            249: "INPUT_5_ANYBACK_ANYFORWARD_STRICTER",  // 5(20)ANYBACK(10)ANYFORWARD(6)
            250: "INPUT_5_ANYFORWARD_ANYBACK",  // 5(20)ANYFORWARD(10)ANYBACK(6)
            251: "INPUT_CHARGE_BACK_FORWARD_40F",  // (ANYBACK must be charged (held) for at least 40f) ANYBACK(10)ANYFORWARD(10)
            252: "INPUT_CHARGE_DOWN_UP_40F",  // (ANYDOWN must be charged (held) for at least 40f) ANYDOWN(10)ANYUP(10)
            253: "INPUT_CHARGE_BACK_FORWARD_45F",  // (ANYBACK must be charged (held) for at least 45f) ANYBACK(10)ANYFORWARD(10)
            254: "INPUT_CHARGE_DOWN_UP_45F",  // (ANYDOWN must be charged (held) for at least 45f) ANYDOWN(10)ANYUP(10)
            255: "INPUT_236236236",  // 2(5)6(15)2(15)6(15)2(15)6(12)
            256: "INPUT_623_WITHIN_LAST_3F",  // 6(8)2(12)3(3)
            257: "INPUT_5_ANYBACK_ANYFORWARD_WITHIN_LAST_2F",  // 5(20)ANYBACK(10)ANYFORWARD(2)
            258: "INPUT_NOTANYDOWN_2",  // NOT_ANYDOWN(10)2(5)
            259: "INPUT_46_WITHIN_LAST_1F",  // 4(8)6(1)
            260: "INPUT_CHARGE_DOWN_10F",  // hold ANYDOWN for between 10 to 20 frames. Any less or more, as well as releasing ANYDOWN, makes it invalid.
            261: "INPUT_546_BUTNOT_54_ANYDOWN_6",  // 5(6)4(11)6(3) but not 5(6)4(11)ANYDOWN(11)6(3)
            262: "INPUT_5_ANYBACK_ANYFORWARD_LENIENT",  // 5(20)ANYBACK(14)ANYFORWARD(8)
            268: "INPUT_BURST",  // D + (one of PKSH)
            269: "INPUT_HOLD_TWO_OR_MORE_OF_PKSH",
            270: "INPUT_PRESS_TWO_OR_MORE_OF_PKSH_GLITCHED",  // the glitch is that when you press two buttons simultaneously, on that frame you get this input, but on the next frame you don't get this input and on the frame after that you get this input again without you having to do anything extra. If you plink two buttons (one frame apart from each other), unless you pressed more buttons after this, the second activation of the input does not happen though. If you continuously mash buttons to activate this input, it will "blink" each frame, switching between on and off.
            271: "INPUT_PRESS_ANYBACK_WITHIN_LAST_8F_NO_MASH_ALLOWED",  // does not benefit from crossup protection or being able to block both ways when airborne and the opponent is behind your back. This checks specifically for ANYBACK. So, pressing ANYBACK triggers an 8f window, including current frame, where this input becomes active. However, pressing ANYBACK again within a 20f window, including the frame of the first ANYBACK press, will make it ignore the new ANYBACK press and forget the last ANYBACK press, and restart counting the 20f window. A successfully performed Instant Block removes the 20f window, making you immediately able to produce this input again
            272: "INPUT_P_OR_K_OR_S_OR_H",
            273: "INPUT_BOOLEAN_OR",
            274: "INPUT_HAS_PRECEDING_5",  // this has no buffer and merely checks if the last frame's direction input was 5
            275: "INPUT_ITEM",  // same as INPUT_PRESS_SPECIAL
            276: "INPUT_HOLD_SPECIAL",  // the "Special" button is used for the Stylish mode controls
            277: "INPUT_SPECIAL_STRICT_PRESS",
            278: "INPUT_SPECIAL_STRICT_RELEASE",
            279: "INPUT_PRESS_SPECIAL",
            280: "INPUT_NOT_HOLD_SPECIAL",
            281: "INPUT_RELEASE_SPECIAL",
            285: "INPUT_ANY_TWO_OF_PKSH",
            286: "INPUT_ROMAN_CANCEL_DUPLICATE",  // same as INPUT_ROMAN_CANCEL
            287: "INPUT_MOM_TAUNT",  // don't know what this means
            288: "INPUT_FORWARD_DASH_WITHIN_LAST_2F",  // is buffered same way as INPUT_FORWARD_DASH, except the completed dash's buffer is 2f instead of 3f
            289: "INPUT_BACKDASH_WITHIN_LAST_2F",  // is buffered same way as INPUT_BACKDASH, except the completed backdash's buffer is 2f instead of 3f
            290: "INPUT_P_OR_K_OR_S_OR_H_OR_D_STRICT_PRESS",
            291: "INPUT_ALWAYS_FALSE",  // this input is never found to be present no matter what the actual inputs are
            292: "INPUT_PRESS_TAUNT_DUPLICATE",  // same as INPUT_PRESS_TAUNT
            293: "INPUT_HOLD_ONE_OR_MORE_OF_PKSH",
            294: "INPUT_HOLD_ONE_OR_MORE_OF_PKSH_OR_D",
        },
        "groundHitEffect0_882": {
            0: "GROUND_NORMAL",  // does either crouching hitstun, high standing or low standing hitstun, depending on whether the opponent is crouching and how high the attack hit them
            1: "AIR_NORMAL",  // exact same as AIR_FACE_UP
            2: "CRUMPLE",  // causes Hizakuzure animation. This later leads to face down wakeup
            3: "FORCE_CROUCH",  // crouching hitstun
            4: "FORCE_STAND_HIGH",  // high standing hitstun
            5: "FORCE_STAND_LOW",  // low standing hitstun
            6: "BLITZ_REJECT_STAND",  // causes standing Hajikare animation
            7: "BLITZ_REJECT_CROUCH",  // causes crouching Hajikare animation
            8: "AIR_FACE_UP",  // if the speed applied to the opponent is directed downward and they're grounded, they immediately get knocked down onto their back. Otherwise launches into air such that you land face up
            9: "AIR_LAUNCH",  // if the speed applied to the opponent is directed downward and they're grounded, they immediately get knocked down onto their face. Launches into air vertically (it's a different animation). You will end up face down
            10: "AIR_FACE_DOWN",  // launches into air such that you land face down
            11: "AIR_STRONG", // causes Blowoff animation. Leads to face up knockdown
            12: "KIRIMOMI",  // the animation you see when you get hit by 5D. Leads to vertical fall which leads to face down knockdown
            13: "KIRIMOMI_B",  // same as KIRIMOMI
            14: "BLITZ_REJECT_AIR",  // causes air Hajikare animation
            15: "STAGGER",  // causes Jitabata animation during which you must mash to get out and a light blue bar with a button graphic is shown on top of you
            16: "EX_DAMAGE_BALL_MOF",  // same as EX_DAMAGE
            17: "EX_DAMAGE",  // EX_DAMAGE is getting hit by Elphelt 236236K or Venom throw. I think it just launches you relatively high and transitions to CmnActB/VDownUpper
            18: "EX_DAMAGE_LAND",
            19: "BLITZ_REJECT_AUTODECIDE_STANDCROUCHAIR",
            20: "BLITZ_REJECT_AUTODECIDE_STANDCROUCHAIR2",  // same as BLITZ_REJECT_AUTODECIDE_STANDCROUCHAIR
            21: "NORMAL_AUTODECIDE_HIGHERLOWER",  // standing hitstun, high/low version depends on how high the attack connected
            22: "THROW_CLASH_AUTODECIDE_CROUCHSTAND",  // same as BLITZ_REJECT_AUTODECIDE_STANDCROUCHAIR but shorter (30f) rejection period instead of 60f
            23: "THROW_CLASH_STAND",  // same as BLITZ_REJECT_STAND, but shorter (30f) rejection period instead of 60f
            24: "THROW_CLASH_CROUCH",  // same as BLITZ_REJECT_CROUCH, but shorter (30f) rejection period instead of 60f
            25: "THROW_CLASH_AIR",  // same as BLITZ_REJECT_AIR, but shorter (30f) rejection period instead of 60f
            26: "AIR_SOMERSAULT",  // causes ZSpin animation, which leads to face down knockdown
            2147483647: "UNSPECIFIED",  // default value. Translates to GROUND_NORMAL for groundHitEffect and AIR_NORMAL for airHitEffect
        },
        "guardType0_1098": {
            0: "ANY",
            1: "HIGH",
            2: "LOW",
            3: "NONE",  // attacks with this property are called "true unblockables". The only super armor that counters them is superArmorGuardImpossible
        },
        "modifyAccumulator0_45": {
            0: "ADD",  // result = x + y
            1: "SUB",  // result = x - y
            2: "MUL",  // result = x * y
            3: "DIV",  // result = x / y (round down)
            4: "MOD",  // result = x % y (remainder of division)
            5: "AND",  // result = x && y (only returns 1 if x != 0 and y != 0, otherwise returns 0)
            6: "OR",  // result = x || y (returns 1 if x != 0 or y != 0, otherwise returns 0)
            7: "BIT_AND",  // result = x & y (bitwise AND)
            8: "BIT_OR",  // result = x | y (bitwise OR)
            9: "IS_EQUAL",  // result = (x == y) (returns 1 if x == y, otherwise 0)
            10: "IS_GREATER",  // result = (x > y)
            11: "IS_LESSER",  // result = (x < y)
            12: "IS_GREATER_OR_EQUAL",  // result = (x >= y)
            13: "IS_LESSER_OR_EQUAL",  // result = (x <= y)
            14: "BIT_NOT",  // result = (x & (~y)) (this bitwise inverts the right argument and then performs a BIT_AND)
            15: "IS_NOT_EQUAL",  // result = (x != y) (returns 1 if x != y, otherwise 0)
            16: "MOD_EQUALS_0",  // result = ((x % y) == 0)
            17: "MOD_EQUALS_1",  // result = ((x % y) == 1)
            18: "MOD_EQUALS_2",  // result = ((x % y) == 2)
            19: "ADD_DIR",  // result = x + y * facing (facing is 1 if your graphical sprite is facing right, -1 otherwise)
            20: "TAKE_RIGHT_VALUE_UNCHANGED",  // result = y
            21: "SET_DIR",  // result = y * facing (facing is 1 if your graphical sprite is facing right, -1 otherwise)
            22: "GREATER_THAN_RANDOM",  // result = (x > (rand() % y)) (returns 1 if x > than that, otherwise returns 0. Their rand() function produces numbers from 0 to 4294967295)
        },
        "KILL_TYPE": {
            0: "NORMAL",
            1: "NOT_KILL",
            2: "NOT_KILL_IN_COMBO",
            3: "KILL",
        },
        "HIT_BLOCK_CONDITION": {
            0: "NOT_HIT_OR_BLOCKSTUN",
            1: "HIT_OR_BLOCKSTUN_OK",
            2: "HIT_OR_BLOCKSTUN_ONLY",
            3: "HITSTUN_ONLY",
            4: "BLOCKSTUN_ONLY",
            5: "NOT_APPLICABLE",
        },
        "moveSubCategory0_1387": {
            0: "DEFAULT",
            1: "TAUNT",
            2: "RESPECT",
            3: "ITEM_USE",
            4: "BURST_OVERDRIVE",
        },
        "moveType0_1378": {
            0: "NEUTRAL",
            1: "FORWARD_WALK",
            2: "BACKWARD_WALK",
            3: "FORWARD_DASH",
            4: "BACKWARD_DASH",
            5: "FORWARD_JUMP",
            6: "BACKWARD_JUMP",
            7: "NEUTRAL_JUMP",
            8: "FORWARD_SUPER_JUMP",
            9: "BACKWARD_SUPER_JUMP",
            10: "NEUTRAL_SUPER_JUMP",
            11: "FORWARD_AIR_JUMP",
            12: "BACKWARD_AIR_JUMP",
            13: "NEUTRAL_AIR_JUMP",
            14: "FORWARD_AIR_DASH",
            15: "BACKWARD_AIR_DASH",
            16: "DUST_FOLLOWUP",
            17: "NORMAL",
            18: "SPECIAL",
            19: "MIST_CANCEL",
            20: "OVERDRIVE",
            21: "INSTANT_KILL",
            22: "DEAD_ANGLE_ATTACK",
            23: "BLUE_BURST",
            24: "GOLD_BURST",
            26: "FAULTLESS_DEFENCE",
            27: "ROMAN_CANCEL_YELLOW",
            28: "ROMAN_CANCEL_REDPURPLE",
            32: "INSTANT_KILL_PREPARATION",
            33: "BLITZ_SHIELD",
        },
        "romanCancelAvailability0_2202": {
            0: "DISALLOWED",
            1: "ALLOWED",
            2: "DISALLOWED_WITH_X_MARK",
            3: "DISALLOWED_ON_WHIFF_WITH_X_MARK",
        },
        "upon0_21": {
            0: "IMMEDIATE",  // runs after a state is entered and most settings have been prepared for your move. Like, for example, enableNormals: 0 has already been called for you. This event happens after the OnFinalize call and some more initialization during state transition. The state name (checkCurrentStateName) is already initialized to the new, current move at this point (after OnFinalize and before IMMEDIATE). The upon: (IMMEDIATE) handler registration for this event does not have to be the first instruction in a move subroutine, but having it at the top speeds up it being found by the game. Not having this at all would force the game to scan through the entire subroutine each time upon entry, until the endState instruction, wasting time, so, if you don't need it, you should just have an empty upon: (IMMEDIATE) handler at the top. A few initialization things still happen after this event, like resetting air options.
            1: "BEFORE_EXIT",  // called when switching state after some fields already got reset, like those that get reset prior to OnActionBeginPre, but also, in addition to that, fields like setLinkObjectDestroyOnStateChange and all other linked entities. However, the current state name (checkCurrentStateName) is not changed yet. Immediately after this event, OnFinalize subroutine is called, if one is present. BEFORE_EXIT and OnFinalize and FINALIZE are also called, in this order, when the object is finalized (see deactivateObj). This event gets cleared (unregistered) after it is called.
            2: "LANDING",  // called after touching the ground. Afer this event is called, it is automatically unregistered.
            3: "ANIMATION_FRAME_ADVANCED",  // called only when not in hitstop, superfreeze or losing a frame due to RC slowdown, after a new sprite frame has been reached. New sprite frame being reached is what I call regular script execution. Each frame when you're not in hitstop, not skipping a frame due to RC slowdown and not in slowdown, the sprite frame advances. When the sprite frame counter reaches its maximum value, maximum value - that you can set using sprite and overrideSpriteLengthIf functions - all bbscript instructions that are after that sprite instruction (the sprite instruction that you have been stalled on up until this point) get executed, until the next sprite instruction or spriteEnd is reached. You then get stalled on that sprite or spriteEnd instruction. Then this event fires. This event is also called 'idling', because OnIdling subroutine is fired immediately after this event. By the way, when entering a new state, all its instructions get executed, until a sprite instruction, and then the execution continues until a second sprite instruction or spriteEnd. When projectiles are present on the arena, players advance their frames first, then projectiles.
            4: "SPEED_Y_DECREASED_BELOW_TARGET",  // use setEventTrigger to specify desired speedY
            5: "LANDING_REPEATUSE",  // gets called right before the LANDING event. Unlike the LANDING event, this event does not get automatically unregistered every time it is fired
            6: "TOUCH_WALL_OR_SCREEN_EDGE",
            7: "STATE_REACHED_END",  // called when reaching the end of the state normally, uninterrupted, via exitState or endState instruction
            8: "YOUR_ATTACK_COLLISION",  // called when landing an attack either on a projectile or a player, be it hit or block or other. OnAttackCollision gets called immediately after this event on clash
            9: "YOUR_ATTACK_COLLISION_WITH_A_PLAYER",  // called when landing an attack on a player, be it hit or block or other
            10: "HIT_A_PLAYER",  // called when landing a non-blocked, non-armored hit on a player. Landing hits on projectiles or summons does not count
            11: "GOT_HIT",  // called when getting hit by a projectile or player. Whenever I say 'hit' I mean not blocking or armoring that. The game refers to this event as "DAMAGE", so whenever you see events with DAMAGE in their name, they mean non-blocked, non-armored hits from attack collisions. This excludes poison damage or chip damage or damage taken from armoring hits. This event is called at an early stage after the hit is registered, before taking damage or copying attack properties to the defender. Immediately after this, OnDamage subroutine is called, if one is present
            12: "FRAMESTEP_1",  // the first frame step event that happens after the idling event. Frame step events happen even during hitstop, superfreeze and RC slowdown frames. After this event, OnNoStopIdling gets called.
            13: "REACHED_TARGET_ANIM_DURATION",  // use setEventTrigger to specify the number of frames you want passed before getting this event. The frames being checked against that value are FRAMES_PLAYED_IN_STATE
            14: "DIE",
            15: "NOT_HOLD_P",  // every frame that you (the projectile or the player) are not in hitstop, if your player is not holding P, this event is fired
            16: "NOT_HOLD_K",  // similar to NOT_HOLD_P
            17: "NOT_HOLD_S",  // similar to NOT_HOLD_P
            18: "NOT_HOLD_H",  // similar to NOT_HOLD_P
            19: "NOT_HOLD_D",  // similar to NOT_HOLD_P
            20: "DISTANCE_TO_PLAYER_LESS_THAN_TARGET",  // if you're a projectile, this would fire when the distance to your own player is less than the value you provided in setEventTrigger. It does not measure distance to the opponent
            21: "FINALIZE",  // gets called before removing an entity from the entity list. Things like deactivateObj cause that. The full sequence of calls is BEFORE_EXIT, OnFinalize, FINALIZE (this event) when removing an entity from the list. When transitioning to a new state, the sequence of calls is BEFORE_EXIT, OnFinalize (without this event).
            23: "CUSTOM_SIGNAL_0",  // these events are not reserved by the engine and may be used freely in scripts
            24: "CUSTOM_SIGNAL_1",
            25: "CUSTOM_SIGNAL_2",
            26: "CUSTOM_SIGNAL_3",
            27: "CUSTOM_SIGNAL_4",
            28: "CUSTOM_SIGNAL_5",
            29: "CUSTOM_SIGNAL_6",
            30: "CUSTOM_SIGNAL_7",
            31: "CUSTOM_SIGNAL_8",
            32: "CUSTOM_SIGNAL_9",
            33: "MUTEKI",  // signalled when armoring a hit. Gets called at a later stage than ARMOR and ARMOR2 events, after you've already taken damage
            35: "PLAYER_GOT_HIT",  // when a player entity gets hit, all projectiles that belong to them and the player himself are notified of that through this event. This is called at an early stage of a hit, before damage is taken or attack properties are copied to the defender
            36: "FRAME_STEP",  // called after FRAMESTEP_1 every frame, including during hitstop, superfreeze and slowdown
            37: "CLASH",  // works for both players and projectiles. Projectiles may only clash if neither has setProjectileDurability: 0 and not both are setProjectileDurability: 2 or greater at the same time. If projectiles have different setProjectileDurability, only the weaker projectile gets the CLASH event and its NUMBER_OF_HITS_TAKEN incremented by its destroyOnClash amount. Players may not clash with projectiles.
            38: "PLAYER_BLOCKED",  // when a player entity blocks a hit, the player and all projectiles that belong to them are notified of this through this event
            39: "PRE_DRAW",  // this is the last event sent to each entity in the game during an game engine tick
            40: "GUARD",  // when you block a hit. Called at an early stage after the hit is registered, before taking damage or copying attack properties to the defender. Immediately after this, OnGuard subroutine is called, if one is present
            41: "ARMOR",  // when you armor a hit. Called at an early stage after the hit is registered, before taking damage or copying attack properties to the defender. OnArmor subroutine is called immediately afterwards, if one is present
            42: "PRE_FRAME_STEP",  // called at the end of pre-frame initialization. Is called even during hitstop, superfreeze, slowdown. Is called at a stage that happens before a new sprite frame is reached, so before ANIMATION_FRAME_ADVANCED signal
            43: "ARMOR2",  // when armoring a hit from either a player or a projectile, this is called after you've already taken damage. If the attacker is a projectile, ARMOR2_PROJECTILE is called immediately before this
            44: "HIT_OWN_PROJECTILE_DEFAULT",  // this signal is the default that is set for the situation when a player's hitboxes hit their own projectiles' hurtboxes. If this is the current value of the signal, then no signal is sent to projectiles that were hit at all, which means that in order to use this mechanism, you must specify a different signal. You can specify a different signal using naguriNaguru
            45: "DESTROY",  // called when calling requestDestroy, if player is in hitstun or blockstun and destroyOnPlayerHitstun or destroyOnPlayerGuard are used, when maximum number of hits specified in numberOfHits is reached, if player state changed and something like destroyOnPlayerStateChange is used, when destroyTenmetsuTimer has expired, when destroyAssari or destroyAssariEx are used and object is destroyed by hitbox interactions, when destroyOnInstantKill is used and either your or opponent's players have been instant killed, 
            46: "TOUCH_WALL",
            47: "PLAYER_CHANGED_STATE",  // when a player begins a new action, all of their projectiles are notified of this through this event
            49: "SEND_SIGNAL_NAME",  // sent event gets fired on the target entity of sendSignalName calls
            50: "SUPERFREEZE",  // sent to the entity that initiated a superfreeze when the superfreeze starts, which is before the animation frame advanced
            51: "LANDED",  // this event is sent after you land, and is similar to LANDING event, except it happens very close to the end of the logic tick. It is automatically cleared each time it is sent
            53: "START",  // this event was observed to be sent every frame, except during hitstop. I think it's not sent during hitstun either, but I'm not sure
            54: "BEFORE_ATTACK_PROPERTIES_COPY",  // sent to the attacker upon every attack collision, before determining the attack values and parameters that were received by the defender
            55: "BEFORE_ATTACK_PROPERTIES_COPY_HIT_BY_TEAMMEMBER",  // same as BEFORE_ATTACK_PROPERTIES_COPY, except this event is only fired if you hit your own team. And this ignores the fact that a projectile could've been reflected - the teams remain how they were
            56: "FRAME_STEP_AFTER",  // this event is called twice per frame, and both of these times are before the hit detection is performed and after the animation frame has advanced. Immediately after the first event, FRAME_STEP_AFTER_EXTRA is also sent
            57: "PLAYER_GOT_INSTANT_KILLED",  // when a player gets IK'd, all of their projectiles are notified with this event
            58: "OPPONENT_GOT_INSTANT_KILLED",  // when a player lands an IK, all of the attacker player's projectiles are notified of this event
            59: "INSTANT_KILL",  // all entities in the game are notified by this event whenever any IK is landed on anyone
            60: "NO_GUARD_EFFECT",  // when a player got hit or armored a hit while having a non-0 superArmorDamagePercent, this event is sent to the attacker entity, be it a player or a projectile, at the very start of the function that processes hits
            61: "YOUR_ATK_GOT_FD_BLOCKED",
            63: "ENTRY_WAIT",  // sent to the entity when they enter the CmnActEntryWait state after finishing playing their intro cutscene. While Player 1 plays their intro, Player 2 initially starts out in CmnActEntryWait, but does not get this signal
            64: "ARMOR2_PROJECTILE",  // when armoring a hit from a projectile, this is called after you've already taken damage. Called before ARMOR2
            65: "REFLECT_ENEMY_PROJECTILE",  // sent after successfully reflecting an opponent's projectile
            66: "GOT_REFLECTED",  // sent to the projectile when it gets reflected
            67: "PRE_COLLISION_CHECK",  // sent once every frame, including hitstop and superfreeze and slowed down frames, even if no hit is going to happen, before hit detection. This is the perfect place to put code which changes attack properties based on opponent's Y or other value that changes every frame, in order to remove dependency on the order of P1-P2 execution
            68: "ASSARI_GOT_HIT",  // if the projectile has destroyAssariEx set to 1, it receives this event when taking a hit, after the NUMBER_OF_HITS_TAKEN is incremented. If the projectile ran out of hits and will be destroyed, this is called before it is destroyed.
            69: "GOT_HIT2",  // this event is only sent to players and only when they get hit, meaning they have not blocked or armored the attack. It is called right before the OnDamage2 subroutine, be it present or not, after attack data got copied, tension increased, dash cancelled, landing recovery cleared, but before the damage is dealt
            71: "PLAYER_GETTING_HIT",  // when a player gets hit, all projectiles belonging to the player who got hit, and the player themselves, receive this event, after attack data got copied, but before tension got increased or damage got dealt. This event does not include damage taken from armoring hits, poison damage or any damage other than from non-blocked, non-armored hits
            72: "PLAYER_BLOCKED_ATTACK",  // when a player blocks an attack, all projectiles belonging to the player who blocked, and the player themselves, receive this event, after attack data got copied, but before tension got increased or damage got dealt
            73: "ENEMY_GETTING_HIT",  // when a player gets hit, all projectiles belonging to the player who dealt the hit, and the attacker player themselves, receive this event, after attack data got copied, but before tension got increased or damage got dealt
            74: "ENEMY_BLOCKED_ATTACK",  // when a player blocks an attack, all projectiles belonging to the player who dealt the attack, and the attacker player themselves, receive this event, after attack data got copied, but before tension got increased or damage got dealt
            76: "DECIDE_GUARD_EFFECT",  // called on the player or projectile that got hit or blocked or armored an attack right after attack data got copied and the guardEffectObject function got automatically called with 0, whatever that does.
            77: "FRAME_STEP_AFTER_EXTRA",  // runs immediately after the first of the two FRAME_STEP_AFTER events
            78: "HIT_THE_OPPONENT_PRE_ATK_VALUES_COPY",  // same as BEFORE_ATTACK_PROPERTIES_COPY, except this event is only fired if you hit an opponent player or projectile and they did not block or armor the hit. This is called way before the actual damage is dealt
            
            // While there are events that can be handled with the upon instruction and the like,
            //  it is also worth noting that the game engine calls predefined bbscript subroutines in player or effect scripts
            //  at certain points in the game engine:
            // PreInit: charaName gets reset to empty prior to this call. This gets called on stage or round reset for both players
            // PreInit2nd: gets called for both players right after PreInit has been called for both players. You can use this to run initialization scripts that depend on the other player's PreInit.
            // cmn_SkillInit: gets called in the cmn_ef script for the player right after the container for all player's moves has been constructed and right before calling RoundInit
            // RoundInit: gets called right after cmn_SkillInit after PreInit2nd has been called for both players and some more round initialization has happened. This is called before even the starting X has been set and before animation has been set to CmnActStand
            // OnActionBeginPre: gets called after the state was partially changed to a new one and many fields, like color, have been reset, before firing BEFORE_EXIT event
            // OnFinalize: gets called immediately after a BEFORE_EXIT event, which can happen both on state transition and when the entity is being deleted from the game
            // OnActionBegin: gets called after the IMMEDIATE event and some more initialization happened during state transition
            // OnIdling: gets called immediately after ANIMATION_FRAME_ADVANCED event
            // OnNoStopIdling: gets called immediately after FRAMESTEP_1 event
            // OnAttackCollision: gets called immediately after YOUR_ATTACK_COLLISION on clash
        },
        "POS_TYPE": {
            100: "ORIGIN",  // the origin point that is between your legs
            101: "ATTACK",
            102: "DAMAGE",  // this is last point of the hit which is at the center of the intersection between an attacker's hitboxes and a defender's hurtboxes
            103: "CENTER",  // center of your body depends on your stance: crouching and lying poses body centers are lower than standing
            104: "FLOOR_CENTER",  // same as LAND
            105: "BODY_RANDOM",
            106: "EX_RECT_RANDOM",
            107: "AURA",
            108: "PRIVATE_0",
            109: "PRIVATE_1",
            110: "PRIVATE_2",
            111: "PRIVATE_3",
            112: "PAST_HALF",  // the middle position of the origin point between past frame's X;Y and this frame's X;Y
            113: "GTMP",  // returns a point made up of GTMP_X and GTMP_Y
            114: "HEAD",
            115: "NECK",
            116: "ABDOMINAL",
            117: "R_LEG",
            118: "L_LEG",
            119: "HEART",
            120: "ENEMY_LAND",
            121: "FLOOR_ALIAS",
            122: "ASHIMOTO_RANDOM",
            123: "LAND",  // land is your current X position with the Y position of floor
            124: "FRONT_05_BODY",
            125: "FRONT_1_BODY",
            126: "FRONT_2_BODY",
            127: "BACK_05_BODY",
            128: "BACK_1_BODY",
            129: "BACK_2_BODY",
            130: "EX_POINT_F",  // refers to EXPOINT_X, EXPOINT_Y variables
            131: "WORLD_ZERO",  // the 0;0 point of the arena, which is its middle on the floor level
            132: "ENEMY_CENTER",
            133: "ENEMY_BODY_RANDOM",
            134: "ENEMY_EX_RECT_RANDOM",
            135: "ENEMY_AURA",
            136: "ENEMY_HEAD",
            137: "ENEMY_NECK",
            138: "ENEMY_ABDOMINAL",
            139: "ENEMY_R_LEG",
            140: "ENEMY_L_LEG",
            141: "ENEMY_HEART",
            142: "ENEMY_EX_POINT_F",
            143: "EX_POINT_PG",
            144: "BODY_RANDOM_3D",
            145: "EX_POINT_RANDOM",
            146: "BIKKURI",
            147: "CHEST_3D",
            148: "LEG_CENTER",
            149: "HEAD_3D",
            150: "PELVIS_3D",
            151: "BODY_RANDOM_3D_NO_HEAD",
            152: "SHOULDER_L_3D",
            153: "SHOULDER_R_3D",
            154: "ELBOW_L_3D",
            155: "ELBOW_R_3D",
            156: "HAND_L_3D",
            157: "HAND_R_3D",
            158: "CALF_L_3D",
            159: "CALF_R_3D",
            160: "FOOT_L_3D",
            161: "FOOT_R_3D",
            162: "AFRO_3D",
            163: "FRONT_3_BODY",
            164: "BACK_3_BODY",
            165: "SCREEN_CENTER",
        },
        "SUPER_ARMOR_TYPE": {
            0: "DODGE",  // dodge just makes you ignore hits
            1: "ARMOR",
        },
        "STRIKE_OR_THROW": {
            0: "STRIKE",
            1: "THROW",
        },
        "op1": {
            0: "IS_TRUE",  // result = (value != 0)
            1: "IS_FALSE",  // result = (value == 0)
            2: "RANDOM_PERCENTAGE_IS_LESS",  // result = (value > (rand() % 100))
            3: "ABSOLUTE_VALUE",  // result = (value < 0 ? -value : value)
        },
        "CalcDistanceExMode": {
            0: "X_AND_Y",  // result = sqrt(dx^2 + dy^2)
            1: "X_ONLY",  // result = abs(dx)
            2: "Y_ONLY",  // result = abs(dy)
            3: "X_TOWARDS_FACING",  // result = (entity 2 x - entity 1 x) * sprite facing of entity 1
        },
        // the various values of this enum affect what arguments of the homing instruction mean what. Refer to the comments inside of the homing instruction for details
        "HomingType": {
            0: "PERCENTAGE_FROM_DISTANCE_AND_DRAG",  // penultimate argument is percentage from distance to use as acceleration, last argument is drag percentage
            1: "ACCELERATION_AND_DRAG",  // penultimate argument is absolute value of acceleration, last argument is drag percentage
            2: "MAXIMUM_SPEED_AND_ACCELERATION",  // penultimate argument is maximum absolute speed, last argument is absolute acceleration
        },
        "Boolean": {
            0: "FALSE",
            1: "TRUE",
        },
        "HitboxType": {
            // hitbox data is stored by type, each type has a number of boxes, identified by index
            0: "HURTBOX",
            1: "HITBOX",
            2: "EX_POINT",  // this hitbox is used to obtain position of type EX_POINT_RANDOM
            3: "EX_POINT_EXTENDED",  // this hitbox is used to obtain position of type EX_RECT_RANDOM
            5: "PUSHBOX",  // only affects horizontal extents
            7: "NECK",
            8: "ABDOMEN",
            10: "SUPER_ARMOR_BY_SG_COLLISION",  // if you enabled this via superArmorBySGCollision, if an attacker's hitbox missed your hurtbox, it is additionally checked against this type of hurtbox. If the collision is detected, there is a hit
            11: "R_LEG",
            12: "L_LEG",
            13: "PRIVATE_0",  // this hitbox is used to obtain position of type PRIVATE_0
            14: "PRIVATE_1",  // this hitbox is used to obtain position of type PRIVATE_1
            15: "PRIVATE_2",  // this hitbox is used to obtain position of type PRIVATE_2
            16: "PRIVATE_3",  // this hitbox is used to obtain position of type PRIVATE_3
        },
        "AttackFrontDirection": {
            0: "ATTACKER_FACING_OPPOSITE",  // set facing to the opposite of the attacker's facing
            1: "ATTACKER_PLAYER_FACING_OPPOSITE",  // set facing to the opposite of the attacker's player's facing
            2: "CALCULATE_FROM_ATTACKER_X",  // set facing based on the difference of X coordinates between you and the attacker
            3: "CALCULATE_FROM_ATTACKER_PLAYER_X",  // set facing based on the difference of X coordinates between you and the attacker's player
        },
        "CreationFacing": {
            0: "NORMAL",  // face the same direction as the parent
            1: "OPPOSITE",  // face opposite direction of the parent
            2: "LEFT",  // face absolute left
            3: "RIGHT",  // face absolute right
        },
        "AttackType": {
            0: "NONE",
            1: "NORMAL",
            2: "EX",
            3: "OVERDRIVE",
            4: "IK",
        },
        "ExDamageType": {
            0: "NONE",
            1: "VDOWN_UPPER",
            2: "BDOWN_UPPER",
        },
    },
    instructions: Sized({
        0: (
            size: 36,
            name: "beginState",
            codeBlock: Begin,
            args: [
                String32,
            ],
        ),
        1: (
            size: 4,
            // this instruction does wait for the current sprite to finish playing, just like exitState does
            name: "endState",
            codeBlock: EndState,
            args: [],
        ),
        2: (
            size: 40,
            // when a sprite instruction is executed, execution continues until a spriteEnd or another sprite instruction, and then the script waits for the sprite to finish playing its frames, before proceeding next. I call this "regular script execution" and describe it in ANIMATION_FRAME_ADVANCED event.
            name: "sprite",
            args: [
                String32,
                // specifies the duration in frames of this sprite
                Number,
            ],
        ),
        3: (
            size: 4,
            // this will stall code execution until the current sprite finishes playing
            name: "spriteEnd",
            args: [],
        ),
        4: (
            size: 12,
            name: "if",
            codeBlock: Begin,
            args: [
                AccessedValue,
            ],
        ),
        5: (
            size: 4,
            name: "endIf",
            codeBlock: End,
            args: [],
        ),
        6: (
            size: 24,
            // modifies ACCUMULATOR
            name: "ifOperation",
            codeBlock: Begin,
            args: [
                Enum("modifyAccumulator0_45"),
                AccessedValue,
                AccessedValue,
            ],
        ),
        7: (
            size: 12,
            name: "ifNot",
            codeBlock: Begin,
            args: [
                AccessedValue,
            ],
        ),
        8: (
            size: 20,
            // checks the charaName of the opponent character (see charaName)
            name: "ifOpponentCharacter",
            codeBlock: Begin,
            args: [
                String16,
            ],
        ),
        9: (
            size: 4,
            name: "else",
            codeBlock: Begin,
            args: [],
        ),
        10: (
            size: 4,
            name: "endElse",
            codeBlock: End,
            args: [],
        ),
        11: (
            size: 36,
            // markers are also called "labels". You can set markers outside of any kind of 'if' and 'upon' and other blocks, in the main body of the state. You can then go to such markers using goToMarker, gotoIfOperation, gotoLabelIf, gotoLabelIfNot. If you set a marker inside a block (like an if), you should only go to it using goToSameBlockMarkerIf, and you must not jump between or out of blocks to avoid freezing the game. You need not execute the setMarker instruction in order to actually set the marker, because, when jumping to a marker, the game engine scans the whole, entire subroutine, looking for the corresponding setMarker instruction, and jumps there. If multiple markers are present with the same name, the game will only ever use the first one. In different states, you can use markers with same names, and they won't conflict, as the game looks for a marker only within the current state.
            name: "setMarker",
            args: [
                String32,
            ],
        ),
        12: (
            size: 36,
            // going to a marker is always instant, including in other marker-going functions, unless stated otherwise
            name: "goToMarker",
            args: [
                String32,
            ],
        ),
        13: (
            size: 56,
            // modifies ACCUMULATOR. Goes to marker if condition is satisfied
            name: "gotoIfOperation",
            args: [
                String32,
                Enum("modifyAccumulator0_45"),
                AccessedValue,
                AccessedValue,
            ],
        ),
        14: (
            size: 36,
            // will only go to the specified marker on the next frame after this instruction is executed, if this instruction is executed during regular script execution or in an event handler for an event that fires after the regular script execution. Will go to the specified marker instantly, on this frame, if this instruction is executed during regular script execution or in an event handler before regular script execution. "Regular script execution" is defined in the comments for ANIMATION_FRAME_ADVANCED event.
            name: "gotoLabelRequests",
            args: [
                String32,
            ],
        ),
        15: (
            size: 36,
            name: "beginSubroutine",
            codeBlock: Begin,
            args: [
                String32,
            ],
        ),
        16: (
            size: 4,
            name: "endSubroutine",
            codeBlock: EndState,
            args: [],
        ),
        17: (
            size: 36,
            name: "callSubroutine",
            args: [
                String32,
            ],
        ),
        18: (
            size: 4,
            // this instruction waits for the current sprite to finish playing and then for one more frame to advance forward, before exiting state. So, for example, if you end with sprite: s32'name', 3, it would play 3 frames of that sprite (sprite frame counter 0/3, 1/3, 2/3), and then wait for 3/3 so to speak to exit
            name: "exitState",
            args: [],
        ),
        19: (
            size: 8,
            // calling this function with an argument of 0 doesn't do anything. Deactivation is basically like deletion of an object, which causes a BEFORE_EXIT event, and an OnFinalize call, and a FINALIZE event, in this order, right before it's deleted for good. Deactivation puts the entity in a deactivated state, and it gets permanently removed from the entity list later. Deactivation is different from requestDestroy and destruction of an object in that deactivation deletes an object, while destruction does not. Destruction can only happen once in the lifetime of an object and causes it to turn off its attack, clear its LANDING and LANDING_REPEATUSE event handlers and fire its DESTROY event.
            name: "deactivateObj",
            args: [
                Enum("Entity"),
            ],
        ),
        20: (
            size: 4,
            // deactivate self
            name: "deactivateCurrentObject",
            args: [],
        ),
        21: (
            size: 8,
            // registers an event handler for the specified event that gets executed when that event fires
            name: "upon",
            codeBlock: Begin,
            args: [
                Enum("upon0_21"),
            ],
        ),
        22: (
            size: 4,
            name: "endUpon",
            codeBlock: End,
            args: [],
        ),
        23: (
            size: 8,
            name: "clearUpon",
            args: [
                Enum("upon0_21"),
            ],
        ),
        24: (
            size: 44,
            // this takes you to a marker instantly. Going to a label exits you out of an 'if' block, unlike goToSameBlockMarkerIf, which doesn't. This means that executing instructions after the marker jump done using this instruction will continue execution until the whole state exits or sprite stalling happens, whereas execution that happens after a goToSameBlockMarkerIf continues until the end of the 'if' block from which that go-to was done, and then proceeds as normal after the 'if' block ends
            name: "gotoLabelIf",
            args: [
                String32,
                AccessedValue,
            ],
        ),
        25: (
            size: 44,
            name: "gotoLabelIfNot",
            args: [
                String32,
                AccessedValue,
            ],
        ),
        26: (
            size: 16,
            // changes the last sprite's duration based on the condition (which checks that argument 2 != 0)
            name: "overrideSpriteLengthIf",
            args: [
                Number,
                AccessedValue,
            ],
        ),
        27: (
            size: 36,
            // jumping to a state is instant if performed in superfreeze event handler, PRE_FRAME_STEP or at or before a new sprite frame is reached. And happens on the next frame if performed later, This applies to all state jumping, unless stated otherwise
            name: "jumpToState",
            args: [
                String32,
            ],
        ),
        28: (
            size: 36,
            // jumps to state only if not already in that state
            name: "jumpToStateIfNotSame",
            args: [
                String16,
            ],
        ),
        29: (
            size: 68,
            name: "jumpToStateIfNot",
            args: [
                // state name to check. If in this state, then don't jump
                String32,
                // state name to jump to
                String32,
            ],
        ),
        31: (
            size: 56,
            // modifies ACCUMULATOR and instantly goes to marker if condition is satisfied. Does not exit you out of an 'if' block. This means that any further instruction you execute will be executed until the end of the 'if' block is encountered, and then will proceed as normal after the 'if' block ends
            name: "goToSameBlockMarkerIf",
            args: [
                String32,
                Enum("modifyAccumulator0_45"),
                AccessedValue,
                AccessedValue,
            ],
        ),
        32: (
            size: 36,
            // finds an object that is on your team and in the state named <argument 1> and deactivates it
            name: "deactivateObjectByName",
            args: [
                String32,
            ],
        ),
        33: (
            size: 48,
            // sets ACCUMULATOR to 1 if non-destroyed entity on your team in specified state of specified index is found, sets ACCUMULATOR to 0 otherwise
            name: "findState",
            args: [
                // the state to find. The entity must also be on your team and not destroyed
                String32,
                // here you may only specify slots into which you can store, see named_value_maps: Entities. The found entity will be stored here
                Enum("Entity"),
                // the index of the entity to find. You start the search with index 0, and after you've found the first entity, you repeat findState with index 1 and so on. This variable gets incremented by 1 automatically no matter what, whether the entity is found or not
                AccessedValue,
            ],
        ),
        34: (
            size: 40,
            // goes to specified state when the specified event happens, instantly if the event happens before sprites reach the next frame, and on the next frame if after
            name: "interruptAction",
            args: [
                Enum("upon0_21"),
                String32,
            ],
        ),
        35: (
            size: 40,
            // goes to the label on this frame, if the event happened before sprites advance by one frame, and on the next frame, if after
            name: "gotoLabelUpon",
            args: [
                Enum("upon0_21"),
                String32,
            ],
        ),
        36: (
            size: 12,
            // some events accept extra values to be used in condition checks that check whether the event should be fired. This sets the first of the two values
            name: "setEventTrigger",
            args: [
                Enum("upon0_21"),
                Number,
            ],
        ),
        37: (
            size: 12,
            // some events accept extra values to be used in condition checks that check whether the event should be fired. This sets the second of the two values
            name: "setEventTrigger2",
            args: [
                Enum("upon0_21"),
                Number,
            ],
        ),
        38: (
            size: 36,
            // deactivates all objects that are in the specified state and on your team, except self
            name: "deactivateObjectByNameExceptSelf",
            args: [
                String32,
            ],
        ),
        40: (
            size: 4,
            // finishes runOnObject
            name: "endRunOnObject",
            args: [],
        ),
        41: (
            size: 8,
            // runOnObject switches the context entity on which you're running the script, making all actions apply to them instead
            name: "runOnObject",
            args: [
                Enum("Entity"),
            ],
        ),
        42: (
            size: 20,
            // gets the value from entity <argument 1>'s slot <argument 2> and sets it to entity <argument 3>'s slot <argument 4>
            name: "stackObjectEx",
            args: [
                // host entity to set the slot for, slot specified in argument 2
                Enum("Entity"),
                // the slot on the entity, specified in argument 1, to set into. You can only provide stack slots here into which you can store, see named_value_maps: Entities
                Enum("Entity"),
                // host entity to get the value from
                Enum("Entity"),
                // the slot on the host entity, specified in argument 3, from which to get the value
                Enum("Entity"),
            ],
        ),
        43: (
            size: 12,
            // copies a reference to an entity from slot <argument 2> to slot <argument 1>
            name: "setObjectToStackSlot",
            args: [
                // entity to set. You can only provide stack slots here into which you can store, see named_value_maps: Entities
                Enum("Entity"),
                // entity to get
                Enum("Entity"),
            ],
        ),
        44: (
            size: 16,
            // computes operation and stores the result in ACCUMULATOR
            name: "op1",
            args: [
                Enum("op1"),
                AccessedValue,
            ],
        ),
        45: (
            size: 24,
            // computes operation and saves the result in ACCUMULATOR
            name: "modifyAccumulator",
            args: [
                Enum("modifyAccumulator0_45"),
                AccessedValue,
                AccessedValue,
            ],
        ),
        46: (
            size: 20,
            name: "storeValue",
            args: [
                // destination value
                AccessedValue,
                // source value
                AccessedValue,
            ],
        ),
        47: (
            size: 20,
            // this is not an 'if' block opener. Modifies ACCUMULATOR if the opponent's character matches the one specified
            name: "ifOpponentCharacterMain",
            args: [
                String16,
            ],
        ),
        48: (
            size: 8,
            // checks if the input is currently buffered. Sets ACCUMULATOR to 0 or 1
            name: "checkInput",
            args: [
                Enum("checkInput0_48"),
            ],
        ),
        49: (
            size: 8,
            // checks the specified condition and sets ACCUMULATOR to 0 or 1
            name: "checkMoveCondition",
            args: [
                Enum("MoveCondition"),
            ],
        ),
        50: (
            size: 20,
            // returns min(max(source value, min value), max value) into the ACCUMULATOR. Same as C# Math.Clamp(source value, min value, max value). The source value remains unchanged. The comparison is signed
            name: "clamp",
            args: [
                // source value
                AccessedValue,
                // min value
                Number,
                // max value
                Number,
            ],
        ),
        51: (
            size: 8,
            // active here means the entity exists and has not been deactivated. An object that is destroyed may still be considered active
            name: "isObjectActive",
            args: [
                Enum("Entity"),
            ],
        ),
        52: (
            size: 32,
            // this operation does not modify ACCUMULATOR. Instead it stores the result of the operation into the variable specified by the last argument
            name: "modifyVarAfterOperation",
            args: [
                Enum("modifyAccumulator0_45"),
                // the left (x) argument of the operation
                AccessedValue,
                // the right (y) argument of the operation
                AccessedValue,
                // the variable to store the result into
                AccessedValue,
            ],
        ),
        53: (
            size: 28,
            // reads value from entity <argument 3>'s variable <argument 4> and writes it into entity <argument 1>'s variable <argument 2>
            name: "storeFromObjToObj",
            args: [
                // destination entity
                Enum("Entity"),
                // destination variable of the entity
                AccessedValue,
                // source entity
                Enum("Entity"),
                // source variable of the entity
                AccessedValue,
            ],
        ),
        54: (
            size: 24,
            // does not modify ACCUMULATOR. Stores the result of the operation into the first argument
            name: "modifyVar",
            args: [
                Enum("modifyAccumulator0_45"),
                // destination variable, and also left (x) argument of operation
                AccessedValue,
                // second (right, y) argument of the operation
                AccessedValue,
            ],
        ),
        56: (
            size: 8,
            name: "pauseSprite",
            args: [
                Enum("Boolean"),
            ],
        ),
        57: (
            size: 8,
            // priority is used to decide which projectiles to throw out when there are too many projectiles on the arena and yet more projectiles must still be created
            name: "setObjectPriority",
            args: [
                Number,
            ],
        ),
        58: (
            size: 8,
            name: "deactivateWhenOutsideArena",
            args: [
                Enum("Boolean"),
            ],
        ),
        59: (
            size: 44,
            // gets the specified setting by name and stores into the specified destination variable
            name: "getTrainingItemVal",
            args: [
                // the setting to get
                String32,
                // the destination variable to store the setting's value into
                AccessedValue,
            ],
        ),
        60: (
            size: 20,
            // calculates sqrt((pos1.x - pos2.x)^2 + (pos1.y - pos2.y)^2) and stores it into ACCUMULATOR
            name: "calcDistance",
            args: [
                // the entity from which to get position specified in argument 2
                Enum("Entity"),
                Enum("POS_TYPE"),
                // the entity from which to get position specified in argument 4
                Enum("Entity"),
                Enum("POS_TYPE"),
            ],
        ),
        61: (
            size: 20,
            // if the opponent is not a boss (see IS_BOSS' description), returns 0 into ACCUMULATOR. Otherwise, checks if the opponent character's name matches the one specified and returns 1 if yes, 0 if no
            name: "checkEnemyNameNotBoss",
            args: [
                String16,
            ],
        ),
        62: (
            size: 28,
            // reads the position's coordinates X and Y separately into two specified variables
            name: "posTypeToVar",
            args: [
                // the entity from which to obtain the position
                Enum("Entity"),
                // the position to obtain
                Enum("POS_TYPE"),
                // receives the X coordinate of the position
                AccessedValue,
                // receives the Y coordinate of the position
                AccessedValue,
            ],
        ),
        92: (
            size: 8,
            // sets X position relative to the center of the stage. If the graphical sprite is facing left then negates the position
            name: "setPositionX",
            args: [
                Number,
            ],
        ),
        93: (
            size: 8,
            // directly sets position X
            name: "setRawPositionX",
            args: [
                Number,
            ],
        ),
        94: (
            size: 8,
            // offsets the current position X towards current facing by the specified amount. Specifying a negative amount offsets you in a direction opposite from the facing
            name: "addPositionX",
            args: [
                Number,
            ],
        ),
        95: (
            size: 8,
            // offsets the current position X by the specified amount directly, regardless of facing
            name: "addPositionXRaw",
            args: [
                Number,
            ],
        ),
        96: (
            size: 4,
            // saves position X into a secure place from which you can later restore it using popPositionX. You can only store one position X at a time, there's no stack
            name: "pushPositionX",
            args: [],
        ),
        97: (
            size: 4,
            // restores position X to the value last saved using pushPositionX. Calling this twice or more times has the same effect as calling it once
            name: "popPositionX",
            args: [],
        ),
        98: (
            size: 8,
            // directly sets position Y to the value
            name: "setPositionY",
            args: [
                Number,
            ],
        ),
        99: (
            size: 8,
            // offsets position Y by the specified amount
            name: "addPositionY",
            args: [
                Number,
            ],
        ),
        100: (
            size: 4,
            // saves position Y into a secure place from which you can later restore it using popPositionY. You can only store one position Y at a time, there's no stack
            name: "pushPositionY",
            args: [],
        ),
        101: (
            size: 4,
            // restores position Y to the value last saved using pushPositionY. Calling this twice or more times has the same effect as calling it once
            name: "popPositionY",
            args: [],
        ),
        102: (
            size: 12,
            // generates a random number from min to max (exclusive) and offsets position X by that amount, towards the facing direction
            name: "randomAddPositionX",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        103: (
            size: 12,
            // generates a random number from min to max (exclusive) and offsets position Y by that amount
            name: "randomAddPositionY",
            args: [
                Number,
                Number,
            ],
        ),
        104: (
            size: 12,
            // generates a random number from min to max (exclusive) and offsets position X by that amount, regardless of facing
            name: "randomAddRawPositionX",
            args: [
                Number,
                Number,
            ],
        ),
        105: (
            size: 8,
            // sets speed X to exactly the amount provided, towards facing
            name: "physicsXImpulse",
            args: [
                Number,
            ],
        ),
        106: (
            size: 8,
            // sets speed X to exactly the amount provided, regardless of facing
            name: "physicsXImpulseAbsolute",
            args: [
                Number,
            ],
        ),
        107: (
            size: 8,
            // adds the specified amount to speed X, towards facing
            name: "addVelocityX",
            args: [
                Number,
            ],
        ),
        108: (
            size: 8,
            // adds the specified amount to speed X, regardless facing
            name: "addVelocityXAbsolute",
            args: [
                Number,
            ],
        ),
        109: (
            size: 4,
            // saves speed X into a secure place from which you can later restore it using popVelocityX. You can only store one speed X at a time, there's no stack
            name: "pushVelocityX",
            args: [],
        ),
        110: (
            size: 4,
            // restores speed X to the value last saved using pushVelocityX. Calling this twice or more times has the same effect as calling it once
            name: "popVelocityX",
            args: [],
        ),
        111: (
            size: 8,
            // changes speed X by multiplying it the specified percentage
            name: "velocityXPercent",
            args: [
                // the percentage by which to multiply
                Number,
            ],
        ),
        112: (
            size: 8,
            // sets speed Y to the specified value
            name: "physicsYImpulse",
            args: [
                Number,
            ],
        ),
        113: (
            size: 8,
            // adds the specified amount to speed Y
            name: "addVelocityY",
            args: [
                Number,
            ],
        ),
        114: (
            size: 4,
            // saves speed Y into a secure place from which you can later restore it using popVelocityY. You can only store one speed y at a time, there's no stack
            name: "pushVelocityY",
            args: [],
        ),
        115: (
            size: 4,
            // restores speed Y to the value last saved using pushVelocityY. Calling this twice or more times has the same effect as calling it once
            name: "popVelocityY",
            args: [],
        ),
        116: (
            size: 8,
            // changes speed Y by multiplying it by the specified percentage
            name: "velocityYPercent",
            args: [
                Number,
            ],
        ),
        117: (
            size: 12,
            // adds a random amount from min to max (exclusive) to speed X, towards facing
            name: "randomAddVelocityX",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        118: (
            size: 12,
            // adds a random amount from min to max (exclusive) to speed Y
            name: "randomAddVelocityY",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        119: (
            size: 12,
            // adds a random amount from min to max (exclusive) to speed X, regardless facing
            name: "randomAddRawVelocityX",
            args: [
                Number,
                Number,
            ],
        ),
        120: (
            size: 8,
            // sets acceleration X to the specified value, towards facing
            name: "setAcceleration",
            args: [
                Number,
            ],
        ),
        121: (
            size: 8,
            // sets acceleration X directly
            name: "setRawAcceleration",
            args: [
                Number,
            ],
        ),
        122: (
            size: 8,
            // adds specified amount to acceleration X, towards facing
            name: "addAcceleration",
            args: [
                Number,
            ],
        ),
        123: (
            size: 8,
            // adds specified amount to acceleration X, regardless facing
            name: "addRawAcceleration",
            args: [
                Number,
            ],
        ),
        124: (
            size: 4,
            // saves acceleration X into a secure place from which you can later restore it using popAcceleration. You can only store one acceleration X at a time, there's no stack
            name: "pushAcceleration",
            args: [],
        ),
        125: (
            size: 4,
            // restores acceleration X to the value last saved using pushAcceleration. Calling this twice or more times has the same effect as calling it once
            name: "popAcceleration",
            args: [],
        ),
        126: (
            size: 8,
            // changes acceleration X by multiplying it by specified percentage
            name: "accelerationPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        127: (
            size: 8,
            // sets gravity to the specified amount. Gravity here means acceleration Y, directed downwards. Y axis is pointing up, but positive gravity is pointed down
            name: "setGravity",
            args: [
                Number,
            ],
        ),
        128: (
            size: 8,
            // increases gravity by the specified amount
            name: "addGravity",
            args: [
                Number,
            ],
        ),
        129: (
            size: 4,
            // saves gravity into a secure place from which you can later restore it using popGravity. You can only store one gravity at a time, there's no stack
            name: "pushGravity",
            args: [],
        ),
        130: (
            size: 4,
            // restores gravity to the value last saved using pushGravity. Calling this twice or more times has the same effect as calling it once
            name: "popGravity",
            args: [],
        ),
        131: (
            size: 8,
            // changes gravity by multiplying it by specified percentage
            name: "gravityPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        132: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to acceleration X, towards facing
            name: "randomAddAcceleration",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        133: (
            size: 12,
            // generates a random number from min to max (exclusive) and modifies gravity by adding it to it
            name: "randomAddGravity",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        134: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to acceleration X, regardless facing
            name: "randomAddAccelerationRaw",
            args: [
                Number,
                Number,
            ],
        ),
        135: (
            size: 4,
            // sets gravity back to the default value. You can change the default value for player entities by calling 'gravity' function. For projectile entities the default value is always 1925
            name: "resetGravity",
            args: [],
        ),
        136: (
            size: 4,
            // sets gravity to 1925
            name: "defaultGravity",
            args: [],
        ),
        137: (
            size: 8,
            // sets dash momentum (inertia) to the specified value, towards facing. Inertia is just an extra speed X
            name: "setInertia",
            args: [
                Number,
            ],
        ),
        138: (
            size: 8,
            // sets dash momentum (inertia) to the specified value, regardless facing. Inertia is just an extra speed X
            name: "setInertiaRaw",
            args: [
                Number,
            ],
        ),
        139: (
            size: 8,
            // adds the specified amount to dash momentum (inertia), towards facing. Inertia is just an extra speed X
            name: "addInertia",
            args: [
                Number,
            ],
        ),
        140: (
            size: 8,
            // adds the specified amount to dash momentum (inertia), regardless facing. Inertia is just an extra speed X
            name: "addInertiaRaw",
            args: [
                Number,
            ],
        ),
        141: (
            size: 4,
            // saves inertia into a secure place from which you can later restore it using popInertia. You can only store one inertia at a time, there's no stack
            name: "pushInertia",
            args: [],
        ),
        142: (
            size: 4,
            // restores inertia to the value last saved using pushInertia. Calling this twice or more times has the same effect as calling it once
            name: "popInertia",
            args: [],
        ),
        143: (
            size: 8,
            // modifies inertia by multiplying it by the specified percentage
            name: "inertiaPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        144: (
            size: 8,
            name: "ignoreInertia",
            args: [
                Enum("Boolean"),
            ],
        ),
        145: (
            size: 12,
            // generates a random number from min to max (exclusive) and modifies inertia by adding it to it, towards facing
            name: "randomAddInertia",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        146: (
            size: 12,
            // generates a random number from min to max (exclusive) and modifies inertia by adding it to it, regardless facing
            name: "randomAddRawInertia",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        147: (
            size: 4,
            // sets gravity to 1925
            name: "defaultGravity2",
            args: [],
        ),
        148: (
            size: 8,
            // sets scale X to the specified value. 1000 is 100% scale
            name: "setObjectWidth",
            args: [
                Number,
            ],
        ),
        149: (
            size: 8,
            // adds specified amount to scale X. When scale X is equal to 1000 that means 100% scale
            name: "addObjectWidth",
            args: [
                Number,
            ],
        ),
        150: (
            size: 8,
            // multiplies current scale X by the specified percentage
            name: "objectWidthPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        151: (
            size: 8,
            // sets the speed at which scale X grows per frame. Note that 1000 scale means 100%
            name: "setObjectWidthScaleSpeed",
            args: [
                Number,
            ],
        ),
        152: (
            size: 8,
            // increases the speed at which scale X grows per frame by the specified amount. Note that 1000 scale means 100%
            name: "addObjectWidthScaleSpeed",
            args: [
                Number,
            ],
        ),
        153: (
            size: 8,
            // changes the speed by which scale X grows per frame by multiplying it by the specified percentage
            name: "objectWidthScaleSpeedPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        154: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to scale X. When scale X is equal to 1000 that means 100%
            name: "randomAddObjectWidth",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        155: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to the speed by which scale X grows per frame. When scale X is equal to 1000 that means 100%
            name: "randomAddObjectWidthScaleSpeed",
            args: [
                Number,
                Number,
            ],
        ),
        156: (
            size: 8,
            // sets scale Y to the specified amount. When scale Y is 1000 that means 100%
            name: "setObjectHeight",
            args: [
                Number,
            ],
        ),
        157: (
            size: 8,
            // adds the specified amount to scale Y. When scale Y is 1000 that means 100%
            name: "addObjectHeight",
            args: [
                Number,
            ],
        ),
        158: (
            size: 8,
            // changes current scale Y by multiplying by the specified amount
            name: "objectHeightPercent",
            args: [
                Number,
            ],
        ),
        159: (
            size: 8,
            // sets the speed at which scale Y grows per frame. Note that 1000 scale means 100%
            name: "setObjectHeightScaleSpeed",
            args: [
                Number,
            ],
        ),
        160: (
            size: 8,
            // increases the speed at which scale Y grows per frame by the specified amount. Note that 1000 scale means 100%
            name: "addObjectHeightScaleSpeed",
            args: [
                Number,
            ],
        ),
        161: (
            size: 8,
            // changes the speed by which scale Y grows per frame by multiplying it by the specified percentage
            name: "objectHeightScaleSpeedPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        162: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to scale Y. When scale Y is equal to 1000 that means 100%
            name: "randomAddObjectHeight",
            args: [
                Number,
                Number,
            ],
        ),
        163: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to the speed by which scale Y grows per frame. When scale Y is equal to 1000 that means 100%
            name: "randomAddObjectHeightScaleSpeed",
            args: [
                Number,
                Number,
            ],
        ),
        164: (
            size: 8,
            // sets the pitch, or rotation. Pitch must be specified in 1/1000'th of degree. 1000 means 1 degree. Positive value rotates counter-clockwise when facing right, and clockwise when facing left. Pitch is the angle of rotation around the axis perpendicular to the screen
            name: "setAngle",
            args: [
                Number,
            ],
        ),
        165: (
            size: 8,
            // adds to the pitch, or rotation. Pitch must be specified in 1/1000'th of degree. 1000 means 1 degree. Positive value rotates counter-clockwise when facing right, and clockwise when facing left. Pitch is the angle of rotation around the axis perpendicular to the screen
            name: "addAngle",
            args: [
                Number,
            ],
        ),
        166: (
            size: 8,
            // sets the speed with which pitch changes every frame. Pitch must be specified in 1/1000'th of degree. 1000 means 1 degree. Positive value rotates counter-clockwise when facing right, and clockwise when facing lef5. Pitch is the angle of rotation around the axis perpendicular to the screen
            name: "setAngleSpeed",
            args: [
                Number,
            ],
        ),
        167: (
            size: 8,
            // increases the speed with which pitch changes every frame, by the specified amount. Pitch must be specified in 1/1000'th of degree. 1000 means 1 degree. Positive value rotates counter-clockwise when facing right, and clockwise when facing left. Pitch is the angle of rotation around the axis perpendicular to the screen
            name: "addAngleSpeed",
            args: [
                Number,
            ],
        ),
        168: (
            size: 8,
            // changes the speed with which pitch changes every frame, by multiplying it by the specified percentage. Pitch is the angle of rotation around the axis perpendicular to the screen
            name: "angleSpeedPercent",
            args: [
                // the percentage
                Number,
            ],
        ),
        169: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to the pitch. 1000 pitch means 1 degree of rotation around the axis perpendicular to the screen counter-clockwise when facing right, and clockwise when facing left.
            name: "randomAddAngle",
            args: [
                // min
                Number,
                // max
                Number,
            ],
        ),
        170: (
            size: 12,
            // generates a random number from min to max (exclusive) and adds it to the speed with which pitch changes every frame. 1000 pitch means 1 degree of rotation around the axis perpendicular to the screen counter-clockwise when facing right, and clockwise when facing left.
            name: "randomAddAngleSpeed",
            args: [
                Number,
                Number,
            ],
        ),
        171: (
            size: 4,
            // sets the pitch to a random value
            name: "randomAngle",
            args: [],
        ),
        172: (
            size: 8,
            // hitboxes rotate and resize around this point, specified relative to the origin point of the dummy. This point does not mirror left/right along with the character's facing
            name: "setTransformCenterX",
            args: [
                Number,
            ],
        ),
        173: (
            size: 8,
            // hitboxes rotate and resize around this point, specified relative to the origin point of the dummy. This point does not mirror left/right along with the character's facing
            name: "setTransformCenterY",
            args: [
                Number,
            ],
        ),
        174: (
            size: 8,
            // this timer decrements every frame. Once it reaches 0, speed, acceleration, gravity and dash/airdash momentums are reset to 0 (haltMomentum gets called with TRUE)
            name: "setSpeedTimeLimit",
            args: [
                Number,
            ],
        ),
        175: (
            size: 8,
            // percentage of speed Y that you retain when bouncing off the ground, redirected upwards. Must be positive. Set to -1 or lower to disable
            name: "setBoundRate",
            args: [
                // percentage. Specify < 0 to disable
                Number,
            ],
        ),
        176: (
            size: 8,
            // reset speed, acceleration, gravity to 0. An extra boolean argument is provided, where if you specify TRUE, dash momentum and airdash no-FD timer and airdash vertical trajectory straightening timer also get reset
            name: "haltMomentum",
            args: [
                Enum("Boolean"),
            ],
        ),
        177: (
            size: 16,
            // moves you to the top-left corner of the hitbox of the desired type and index, obtained from the desired entity
            name: "moveObjectToHitboxPoint",
            args: [
                // the entity from which to read the position of the top-left of the hitbox
                Enum("Entity"),
                // the hitbox type to read
                Enum("HitboxType"),
                // the index of the hitbox to read. If the index is out of bounds, the entity's origin point is used instead
                Number,
            ],
        ),
        178: (
            size: 8,
            // moves you to the origin point of the specified entity
            name: "moveToObject",
            args: [
                Enum("Entity"),
            ],
        ),
        179: (
            size: 12,
            name: "moveObjectToOtherObject",
            args: [
                Enum("Entity"),
                Number,
                Enum("Entity"),
            ],
        ),
        180: (
            size: 8,
            name: "setObjectDepth",
            args: [
                Number,
            ],
        ),
        181: (
            size: 8,
            name: "addObjectDepth",
            args: [
                Number,
            ],
        ),
        182: (
            size: 8,
            name: "objectDepthPercent",
            args: [
                Number,
            ],
        ),
        183: (
            size: 8,
            name: "setObjectDepthScaleSpeed",
            args: [
                Number,
            ],
        ),
        184: (
            size: 8,
            name: "addObjectDepthScaleSpeed",
            args: [
                Number,
            ],
        ),
        185: (
            size: 8,
            name: "objectDepthScaleSpeedPercent",
            args: [
                Number,
            ],
        ),
        186: (
            size: 12,
            name: "randomAddObjectDepth",
            args: [
                Number,
                Number,
            ],
        ),
        187: (
            size: 12,
            name: "randomAddObjectDepthScaleSpeed",
            args: [
                Number,
                Number,
            ],
        ),
        188: (
            size: 8,
            name: "setObjectSize",
            args: [
                Number,
            ],
        ),
        189: (
            size: 8,
            name: "addObjectSize",
            args: [
                Number,
            ],
        ),
        190: (
            size: 8,
            name: "objectSizePercent",
            args: [
                Number,
            ],
        ),
        191: (
            size: 8,
            name: "setObjectSizeScaleSpeed",
            args: [
                Number,
            ],
        ),
        192: (
            size: 8,
            name: "addObjectSizeScaleSpeed",
            args: [
                Number,
            ],
        ),
        193: (
            size: 8,
            name: "objectSizeScaleSpeedPercent",
            args: [
                Number,
            ],
        ),
        194: (
            size: 12,
            name: "randomAddObjectSize",
            args: [
                Number,
                Number,
            ],
        ),
        195: (
            size: 12,
            name: "randomAddObjectSizeScaleSpeed",
            args: [
                Number,
                Number,
            ],
        ),
        200: (
            size: 8,
            name: "setAngleBySpeed",
            args: [
                Number,
            ],
        ),
        201: (
            size: 12,
            name: "setSpeedByCPC",
            args: [
                Number,
                Number,
            ],
        ),
        202: (
            size: 12,
            name: "setSpeedByAngle",
            args: [
                Number,
                Number,
            ],
        ),
        232: (
            size: 8,
            name: "setAngleY",
            args: [
                Number,
            ],
        ),
        233: (
            size: 4,
            name: "hitUnchecked",
            args: [],
        ),
        234: (
            size: 4,
            name: "hit",
            args: [],
        ),
        235: (
            size: 4,
            name: "recoveryState",
            args: [],
        ),
        236: (
            size: 4,
            name: "disableHitForSprite",
            args: [],
        ),
        237: (
            size: 8,
            name: "disableHitForState",
            args: [
                Number,
            ],
        ),
        238: (
            size: 12,
            name: "useCenterOffset",
            args: [
                Number,
                Number,
            ],
        ),
        239: (
            size: 4,
            name: "flipDirection",
            args: [],
        ),
        240: (
            size: 4,
            name: "faceOpponent",
            args: [],
        ),
        241: (
            size: 4,
            name: "faceLeft",
            args: [],
        ),
        242: (
            size: 4,
            name: "faceRight",
            args: [],
        ),
        243: (
            size: 4,
            name: "normalAttack",
            args: [],
        ),
        244: (
            size: 4,
            // calls instantInitializeForProjectile: (SPECIAL), (FALSE)
            name: "specialAttack",
            args: [],
        ),
        245: (
            size: 4,
            name: "overdriveAttack",
            args: [],
        ),
        246: (
            size: 4,
            name: "instantKillAttack",
            args: [],
        ),
        249: (
            size: 8,
            name: "setPushboxWidth",
            args: [
                Number,
            ],
        ),
        250: (
            size: 8,
            name: "setPushboxHeight",
            args: [
                Number,
            ],
        ),
        251: (
            size: 8,
            name: "setNoCollision",
            args: [
                Enum("Boolean"),
            ],
        ),
        253: (
            size: 8,
            name: "setZVal",
            args: [
                Number,
            ],
        ),
        254: (
            size: 8,
            name: "addZVal",
            args: [
                Number,
            ],
        ),
        255: (
            size: 8,
            name: "pushboxFix",
            args: [
                Number,
            ],
        ),
        256: (
            size: 8,
            name: "ignorePushboxPlayer",
            args: [
                Number,
            ],
        ),
        257: (
            size: 8,
            name: "ignorePushboxEnemy",
            args: [
                Number,
            ],
        ),
        258: (
            size: 8,
            name: "ignorePushboxGhost",
            args: [
                Number,
            ],
        ),
        259: (
            size: 8,
            name: "ignorePushboxServantA",
            args: [
                Number,
            ],
        ),
        260: (
            size: 8,
            name: "ignorePushboxServantB",
            args: [
                Number,
            ],
        ),
        261: (
            size: 8,
            name: "ignorePushboxServantC",
            args: [
                Number,
            ],
        ),
        262: (
            size: 8,
            name: "pushCollisionOnPlayersOnly",
            args: [
                Number,
            ],
        ),
        268: (
            size: 8,
            name: "checkScreenCollision",
            args: [
                Number,
            ],
        ),
        269: (
            size: 8,
            name: "forceShadowOff",
            args: [
                Number,
            ],
        ),
        271: (
            size: 20,
            name: "superFreeze",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        276: (
            size: 8,
            name: "setCommonActionMark",
            args: [
                Number,
            ],
        ),
        277: (
            size: 8,
            name: "addCommonActionMark",
            args: [
                Number,
            ],
        ),
        278: (
            size: 8,
            name: "commonActionMarkPercent",
            args: [
                Number,
            ],
        ),
        279: (
            size: 8,
            name: "flagAddCommonActionMark",
            args: [
                Number,
            ],
        ),
        280: (
            size: 8,
            name: "flagDeleteCommonActionMark",
            args: [
                Number,
            ],
        ),
        281: (
            size: 8,
            name: "forceFloorReflectOff",
            args: [
                Number,
            ],
        ),
        283: (
            size: 8,
            name: "autoFloorEffectOn",
            args: [
                Number,
            ],
        ),
        286: (
            size: 8,
            name: "sustainRepulsion",
            args: [
                Number,
            ],
        ),
        287: (
            size: 8,
            name: "worldCollision",
            args: [
                Number,
            ],
        ),
        289: (
            size: 8,
            name: "setMaxActionTime",
            args: [
                Number,
            ],
        ),
        290: (
            size: 8,
            name: "setAttackObjectMax",
            args: [
                Number,
            ],
        ),
        291: (
            size: 8,
            name: "keepAirDash",
            args: [
                Number,
            ],
        ),
        292: (
            size: 8,
            name: "consumeTension",
            args: [
                Number,
            ],
        ),
        293: (
            size: 8,
            name: "addDefense",
            args: [
                Number,
            ],
        ),
        294: (
            size: 8,
            name: "ignoreSuperFreezeFromAlly",
            args: [
                Number,
            ],
        ),
        295: (
            size: 8,
            name: "ignoreSuperFreeze",
            args: [
                Number,
            ],
        ),
        296: (
            size: 8,
            name: "reduceTensionGainForTime",
            args: [
                Number,
            ],
        ),
        297: (
            size: 8,
            name: "reduceBurstGainForTime",
            args: [
                Number,
            ],
        ),
        298: (
            size: 4,
            name: "ignoreDeactivate",
            args: [],
        ),
        337: (
            size: 8,
            name: "setPaletteId",
            args: [
                Number,
            ],
        ),
        338: (
            size: 8,
            name: "setAlphaColor",
            args: [
                Number,
            ],
        ),
        339: (
            size: 8,
            name: "addAlphaColor",
            args: [
                Number,
            ],
        ),
        340: (
            size: 8,
            name: "alphaColorPercent",
            args: [
                Number,
            ],
        ),
        341: (
            size: 8,
            name: "setAlphaColorSpeed",
            args: [
                Number,
            ],
        ),
        342: (
            size: 8,
            name: "ddAlphaColorSpeed",
            args: [
                Number,
            ],
        ),
        343: (
            size: 8,
            name: "alphaColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        344: (
            size: 8,
            name: "setRedColor",
            args: [
                Number,
            ],
        ),
        345: (
            size: 8,
            name: "addRedColor",
            args: [
                Number,
            ],
        ),
        346: (
            size: 8,
            name: "redColorPercent",
            args: [
                Number,
            ],
        ),
        347: (
            size: 8,
            name: "setRedColorSpeed",
            args: [
                Number,
            ],
        ),
        348: (
            size: 8,
            name: "addRedColorSpeed",
            args: [
                Number,
            ],
        ),
        349: (
            size: 8,
            name: "redColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        350: (
            size: 8,
            name: "setGreenColor",
            args: [
                Number,
            ],
        ),
        351: (
            size: 8,
            name: "addGreenColor",
            args: [
                Number,
            ],
        ),
        352: (
            size: 8,
            name: "greenColorPercent",
            args: [
                Number,
            ],
        ),
        353: (
            size: 8,
            name: "setGreenColorSpeed",
            args: [
                Number,
            ],
        ),
        354: (
            size: 8,
            name: "addGreenColorSpeed",
            args: [
                Number,
            ],
        ),
        355: (
            size: 8,
            name: "greenColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        356: (
            size: 8,
            name: "setBlueColor",
            args: [
                Number,
            ],
        ),
        357: (
            size: 8,
            name: "addBlueColor",
            args: [
                Number,
            ],
        ),
        358: (
            size: 8,
            name: "blueColorPercent",
            args: [
                Number,
            ],
        ),
        359: (
            size: 8,
            name: "setBlueColorSpeed",
            args: [
                Number,
            ],
        ),
        360: (
            size: 8,
            name: "addBlueColorSpeed",
            args: [
                Number,
            ],
        ),
        361: (
            size: 8,
            name: "blueColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        362: (
            size: 12,
            name: "setDestColor",
            args: [
                Number,
                Number,
            ],
        ),
        363: (
            size: 8,
            name: "setColor",
            args: [
                Number,
            ],
        ),
        365: (
            size: 12,
            name: "requestShake",
            args: [
                Number,
                Number,
            ],
        ),
        366: (
            size: 8,
            name: "afterImage",
            args: [
                Number,
            ],
        ),
        367: (
            size: 8,
            name: "afterImageType",
            args: [
                Number,
            ],
        ),
        368: (
            size: 4,
            name: "toggleBlendNormal",
            args: [],
        ),
        369: (
            size: 4,
            name: "forceEnableBlendNormal",
            args: [],
        ),
        370: (
            size: 4,
            name: "forceEnableBlendAdd",
            args: [],
        ),
        371: (
            size: 4,
            name: "forceEnableBlendHalfAdd",
            args: [],
        ),
        372: (
            size: 4,
            name: "forceEnableBlendSub",
            args: [],
        ),
        375: (
            size: 8,
            name: "disableDisplay2D",
            args: [
                Number,
            ],
        ),
        394: (
            size: 8,
            name: "distortionTexture",
            args: [
                Number,
            ],
        ),
        395: (
            size: 8,
            name: "setDistortionTextureLevel",
            args: [
                Number,
            ],
        ),
        396: (
            size: 8,
            name: "setDistortionLevelSpeed",
            args: [
                Number,
            ],
        ),
        406: (
            size: 8,
            name: "",
            args: [
                Number,
            ],
        ),
        407: (
            size: 8,
            name: "",
            args: [
                Number,
            ],
        ),
        408: (
            size: 8,
            name: "",
            args: [
                Number,
            ],
        ),
        409: (
            size: 20,
            name: "",
            args: [],
        ),
        410: (
            size: 20,
            name: "",
            args: [],
        ),
        411: (
            size: 20,
            name: "",
            args: [],
        ),
        412: (
            size: 20,
            name: "",
            args: [],
        ),
        413: (
            size: 8,
            name: "",
            args: [
                Number,
            ],
        ),
        414: (
            size: 8,
            name: "",
            args: [
                Number,
            ],
        ),
        415: (
            size: 8,
            name: "",
            args: [
                Number,
            ],
        ),
        445: (
            size: 40,
            // uses creation specific arguments set by createArgHikitsukiVal, createArgAngle, createArgScale, createArgDirection, createArgSocket, createArgLightColor, createArgColor, createArgTransPriority, createArgNoAssert
            // this function resets all creation specific arguments to default after creation
            name: "createObjectWithArg",
            args: [
                String32,
                Enum("POS_TYPE"),
            ],
        ),
        446: (
            size: 40,
            // uses default creation specific arguments before creation
            // this function resets all creation specific arguments to default after creation
            name: "createObject",
            args: [
                String32,
                Enum("POS_TYPE"),
            ],
        ),
        448: (
            size: 40,
            name: "createParticle",
            args: [
                String32,
                Enum("POS_TYPE"),
            ],
        ),
        449: (
            size: 40,
            name: "createParticleWithArg",
            args: [
                String32,
                Enum("POS_TYPE"),
            ],
        ),
        450: (
            size: 36,
            name: "linkParticle",
            args: [
                String32,
            ],
        ),
        451: (
            size: 68,
            name: "linkPawnWithAnim",
            args: [
                String32,
                String32,
            ],
        ),
        452: (
            size: 8,
            name: "linkObjectPushCollision",
            args: [
                Enum("Entity"),
            ],
        ),
        453: (
            size: 8,
            name: "linkObjectAngle",
            args: [
                Enum("Entity"),
            ],
        ),
        454: (
            size: 8,
            name: "linkObjPositionTo",
            args: [
                Enum("Entity"),
            ],
        ),
        455: (
            size: 8,
            name: "linkObjectDirection",
            args: [
                Enum("Entity"),
            ],
        ),
        456: (
            size: 8,
            // tells the calling entity to get its value of ANIMATION_DIDNT_ADVANCE from the target entity.
            // This effectively makes it so the calling entity only animates and moves when the target entity animates and moves
            name: "stopLinkObject",
            args: [
                Enum("Entity"),
            ],
        ),
        457: (
            size: 8,
            name: "setLinkObjectDestroyOnStateChange",
            args: [
                Enum("Entity"),
            ],
        ),
        458: (
            size: 8,
            // when the designated entity gets hit (meaning it hasn't blocked or armored the hit), the caller entity gets destroyed. Set to 0 to unlink the entities
            name: "setLinkObjectDestroyOnDamage",
            args: [
                Enum("Entity"),
            ],
        ),
        459: (
            size: 8,
            name: "linkObjectPositionCenter",
            args: [
                Enum("Entity"),
            ],
        ),
        460: (
            size: 8,
            name: "linkObjectSize",
            args: [
                Enum("Entity"),
            ],
        ),
        461: (
            size: 36,
            name: "",
            args: [
                String32,
            ],
        ),
        462: (
            size: 4,
            name: "linkModelPersOff",
            args: [],
        ),
        463: (
            size: 40,
            name: "linkCommonPolyLine",
            args: [],
        ),
        464: (
            size: 12,
            name: "randomAddSpeedSphere",
            args: [
                Number,
                Number,
            ],
        ),
        465: (
            size: 40,
            name: "linkParticleEx",
            args: [
                String32,
                Enum("POS_TYPE"),
            ],
        ),
        466: (
            size: 8,
            name: "linkObjectZ",
            args: [
                Enum("Entity"),
            ],
        ),
        467: (
            size: 8,
            // ties the hitboxes of the specified entity to the entity executing this instruction
            name: "linkObjectCollision",
            args: [
                Enum("Entity"),
            ],
        ),
        468: (
            size: 40,
            name: "linkPolyLine",
            args: [],
        ),
        513: (
            size: 8,
            name: "setPaletteSubID",
            args: [
                Number,
            ],
        ),
        544: (
            size: 8,
            name: "enemyGrabSprite",
            args: [
                Number,
            ],
        ),
        546: (
            size: 16,
            name: "setGripPosition",
            args: [
                Enum("POS_TYPE"),
                Enum("POS_TYPE"),
                Number,
            ],
        ),
        547: (
            size: 8,
            name: "spriteStopByLockWait",
            args: [
                Number,
            ],
        ),
        548: (
            size: 4,
            name: "lockLinkPositionOff",
            args: [],
        ),
        549: (
            size: 8,
            name: "lockEnemyDisplay",
            args: [
                Number,
            ],
        ),
        550: (
            size: 4,
            name: "backThrowDirection",
            args: [],
        ),
        581: (
            size: 8,
            name: "screenPosition",
            args: [
                Number,
            ],
        ),
        602: (
            size: 4,
            name: "clearSoundOptions",
            args: [],
        ),
        603: (
            size: 8,
            name: "setVolume",
            args: [
                Number,
            ],
        ),
        604: (
            size: 8,
            name: "setPitch",
            args: [
                Number,
            ],
        ),
        605: (
            size: 8,
            name: "setSoundCenter",
            args: [
                Number,
            ],
        ),
        606: (
            size: 8,
            name: "setVoiceChannel",
            args: [
                Number,
            ],
        ),
        612: (
            size: 36,
            name: "playSFX",
            args: [
                String32,
            ],
        ),
        613: (
            size: 20,
            name: "playVoice",
            args: [
                String16,
            ],
        ),
        614: (
            size: 36,
            name: "playNarratorVoice",
            args: [
                String32,
            ],
        ),
        615: (
            size: 36,
            name: "playCharacterSFX",
            args: [
                String32,
            ],
        ),
        616: (
            size: 20,
            name: "playSmartVoice",
            args: [
                String16,
            ],
        ),
        617: (
            size: 20,
            name: "playDeathVoice",
            args: [
                String16,
            ],
        ),
        618: (
            size: 84,
            name: "playRandomVoice",
            args: [
                String16,
                Number,
                String16,
                Number,
                String16,
                Number,
                String16,
                Number,
            ],
        ),
        619: (
            size: 84,
            name: "playSmartRandomVoice",
            args: [
                String16,
                Number,
                String16,
                Number,
                String16,
                Number,
                String16,
                Number,
            ],
        ),
        620: (
            size: 12,
            name: "playDamageLevelVoice",
            args: [
                Number,
                Number,
            ],
        ),
        621: (
            size: 12,
            name: "playAttackVoice",
            args: [
                Number,
                Number,
            ],
        ),
        622: (
            size: 4,
            name: "voiceTestByMouthTable",
            args: [],
        ),
        626: (
            size: 36,
            name: "playCharLoopSfx",
            args: [
                String32,
            ],
        ),
        627: (
            size: 4,
            name: "stopCharLoopSfx",
            args: [],
        ),
        628: (
            size: 24,
            name: "attackVoiceGG",
            args: [
                String16,
                Number,
            ],
        ),
        629: (
            size: 36,
            name: "commonVoiceTable",
            args: [
                String16,
                String16,
            ],
        ),
        630: (
            size: 20,
            name: "tutorialVoice",
            args: [
                String16,
            ],
        ),
        658: (
            size: 16,
            name: "landingEffect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        663: (
            size: 16,
            name: "airTechEffect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        664: (
            size: 16,
            name: "dashStepEFfect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        665: (
            size: 16,
            name: "dashStartEffect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        666: (
            size: 16,
            name: "wallBounceEffect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        668: (
            size: 16,
            name: "dashStopEffect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        669: (
            size: 16,
            name: "walkStopEffect",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        707: (
            size: 4,
            name: "initializeAttackCategoryByCurrent",
            args: [],
        ),
        708: (
            size: 12,
            name: "initializeAttackCategory",
            args: [
                Enum("moveType0_1378"),
                Enum("characterState0_1379"),
            ],
        ),
        709: (
            size: 4,
            name: "attackAllDefault",
            args: [],
        ),
        710: (
            size: 8,
            name: "attackType",
            args: [
                Enum("AttackType"),
            ],
        ),
        711: (
            size: 8,
            name: "attackLevel",
            args: [
                Number,
            ],
        ),
        712: (
            size: 8,
            name: "damage",
            args: [
                Number,
            ],
        ),
        713: (
            size: 4,
            name: "resetDamage",
            args: [],
        ),
        724: (
            size: 8,
            name: "hitEffectStrike",
            args: [
                Number,
            ],
        ),
        725: (
            size: 8,
            name: "hitEffectSlash",
            args: [
                Number,
            ],
        ),
        726: (
            size: 8,
            name: "hitEffectFire",
            args: [
                Number,
            ],
        ),
        727: (
            size: 8,
            name: "hitEffectElectric",
            args: [
                Number,
            ],
        ),
        728: (
            size: 8,
            name: "hitEffectIce",
            args: [
                Number,
            ],
        ),
        729: (
            size: 8,
            name: "hitEffectSpecial",
            args: [
                Enum("Boolean"),
            ],
        ),
        730: (
            size: 8,
            name: "hitEffectTsuki",
            args: [
                Number,
            ],
        ),
        731: (
            size: 8,
            // seems to have an effect only in MOM mode
            name: "hitEffectOnpa",
            args: [
                Number,
            ],
        ),
        732: (
            size: 8,
            name: "hitEffectElectricDark",
            args: [
                Number,
            ],
        ),
        754: (
            size: 8,
            name: "hitAirPushbackX",
            args: [
                Number,
            ],
        ),
        755: (
            size: 4,
            name: "resetHitAirPushbackX",
            args: [],
        ),
        756: (
            size: 8,
            name: "counterhitAirPushbackX",
            args: [
                Number,
            ],
        ),
        757: (
            size: 4,
            name: "resetCounterHitAirPushbackX",
            args: [],
        ),
        766: (
            size: 8,
            name: "hitAirPushbackY",
            args: [
                Number,
            ],
        ),
        767: (
            size: 4,
            name: "resetHitAirPushbackY",
            args: [],
        ),
        768: (
            size: 8,
            name: "counterhitAirPushbackY",
            args: [
                Number,
            ],
        ),
        769: (
            size: 4,
            name: "resetCounterHitAirPushbackY",
            args: [],
        ),
        778: (
            size: 8,
            name: "hitGravity",
            args: [
                Number,
            ],
        ),
        779: (
            size: 4,
            name: "resetHitGravity",
            args: [],
        ),
        780: (
            size: 8,
            name: "counterhitGravity",
            args: [
                Number,
            ],
        ),
        781: (
            size: 4,
            name: "resetCounterHitGravity",
            args: [],
        ),
        790: (
            size: 8,
            name: "wallBounceXVelocityPercent",
            args: [
                Number,
            ],
        ),
        791: (
            size: 4,
            name: "resetWallBounceXVelocityPercent",
            args: [],
        ),
        792: (
            size: 8,
            name: "counterhitWallBounceXVelocityPercent",
            args: [
                Number,
            ],
        ),
        793: (
            size: 4,
            name: "resetCounterHitWallBounceXVelocityPercent",
            args: [],
        ),
        802: (
            size: 8,
            name: "groundBounceYVelocityPercent",
            args: [
                Number,
            ],
        ),
        803: (
            size: 4,
            name: "resetGroundBounceYVelocityPercent",
            args: [],
        ),
        804: (
            size: 8,
            name: "counterHitGroundBounceYVelocityPercent",
            args: [
                Number,
            ],
        ),
        805: (
            size: 4,
            name: "resetCounterHitGroundBounceYVelocityPercent",
            args: [],
        ),
        818: (
            size: 8,
            name: "hitstun",
            args: [
                Number,
            ],
        ),
        819: (
            size: 4,
            name: "resetHitstunTime",
            args: [],
        ),
        820: (
            size: 8,
            name: "counterHitstunTime",
            args: [
                Number,
            ],
        ),
        821: (
            size: 4,
            name: "resetCounterHistunTime",
            args: [],
        ),
        830: (
            size: 8,
            name: "untechableTime",
            args: [
                Number,
            ],
        ),
        831: (
            size: 4,
            name: "resetUntechableTime",
            args: [],
        ),
        832: (
            size: 8,
            name: "counterHitUntechableTime",
            args: [
                Number,
            ],
        ),
        833: (
            size: 4,
            name: "resetCounterHitUntechableTime",
            args: [],
        ),
        842: (
            size: 8,
            name: "wallBounceCount",
            args: [
                Number,
            ],
        ),
        843: (
            size: 4,
            name: "resetWallBounceCount",
            args: [],
        ),
        844: (
            size: 8,
            name: "counterHitWallBounceCount",
            args: [
                Number,
            ],
        ),
        845: (
            size: 4,
            name: "resetCounterHitWallBounceCount",
            args: [],
        ),
        854: (
            size: 8,
            name: "groundBounceCount",
            args: [
                Number,
            ],
        ),
        855: (
            size: 4,
            name: "resetGroundBounceCount",
            args: [],
        ),
        856: (
            size: 8,
            name: "counterHitGroundBounceCount",
            args: [
                Number,
            ],
        ),
        857: (
            size: 4,
            name: "resetCounterHitGroundBounceCount",
            args: [],
        ),
        870: (
            size: 8,
            name: "knockdownDuration",
            args: [
                Number,
            ],
        ),
        871: (
            size: 4,
            name: "resetKnockdownDuration",
            args: [],
        ),
        872: (
            size: 8,
            name: "counterHitKnockdownDuration",
            args: [
                Number,
            ],
        ),
        873: (
            size: 4,
            name: "resetCounterHitKnockdownDuration",
            args: [],
        ),
        882: (
            size: 8,
            name: "groundHitEffect",
            args: [
                Enum("groundHitEffect0_882"),
            ],
        ),
        883: (
            size: 4,
            name: "resetGroundHitEffect",
            args: [],
        ),
        884: (
            size: 8,
            name: "groundCounterHitEffect",
            args: [
                Enum("groundHitEffect0_882"),
            ],
        ),
        885: (
            size: 4,
            name: "resetGroundCounterHitEffect",
            args: [],
        ),
        894: (
            size: 8,
            name: "airHitEffect",
            args: [
                Enum("groundHitEffect0_882"),
            ],
        ),
        895: (
            size: 4,
            name: "resetAirHitEffect",
            args: [],
        ),
        896: (
            size: 8,
            name: "airCounterHitEffect",
            args: [
                Enum("groundHitEffect0_882"),
            ],
        ),
        897: (
            size: 4,
            name: "resetAirCounterHitEffect",
            args: [],
        ),
        898: (
            size: 8,
            name: "wallstickDuration",
            args: [
                Number,
            ],
        ),
        899: (
            size: 4,
            name: "resetWallstickDuration",
            args: [],
        ),
        900: (
            size: 8,
            name: "counterHitWallStickDuration",
            args: [
                Number,
            ],
        ),
        901: (
            size: 4,
            name: "resetCounterHitWallstickDuration",
            args: [],
        ),
        902: (
            size: 8,
            name: "wallBounceInCornerOnly",
            args: [
                Number,
            ],
        ),
        903: (
            size: 4,
            name: "resetWallBounceInCornerOnly",
            args: [],
        ),
        904: (
            size: 8,
            name: "counterhitWallBounceInCornerOnly",
            args: [
                Number,
            ],
        ),
        905: (
            size: 4,
            name: "resetCounterHitWallBounceInCornerOnly",
            args: [],
        ),
        906: (
            size: 8,
            name: "tumbleCount",
            args: [
                Number,
            ],
        ),
        907: (
            size: 4,
            name: "resetTumbleCount",
            args: [],
        ),
        908: (
            size: 8,
            name: "counterTumbleCount",
            args: [
                Number,
            ],
        ),
        909: (
            size: 4,
            name: "resetCounterTumbleCount",
            args: [],
        ),
        933: (
            size: 8,
            name: "tumbleDuration",
            args: [
                Number,
            ],
        ),
        934: (
            size: 4,
            name: "resetTumbleDuration",
            args: [],
        ),
        935: (
            size: 8,
            name: "counterHitTumbleDuration",
            args: [
                Number,
            ],
        ),
        936: (
            size: 4,
            name: "resetCounterHitTumbleDuration",
            args: [],
        ),
        937: (
            size: 8,
            name: "wallBounceWaitTime",
            args: [
                Number,
            ],
        ),
        938: (
            size: 4,
            name: "resetWallBounceWaitTime",
            args: [],
        ),
        939: (
            size: 8,
            name: "counterWallBounceWaitTime",
            args: [
                Number,
            ],
        ),
        940: (
            size: 4,
            name: "resetCounterWallBounceWaitTime",
            args: [],
        ),
        963: (
            size: 8,
            name: "damagePercent",
            args: [
                Number,
            ],
        ),
        995: (
            size: 8,
            name: "hitstop",
            args: [
                Number,
            ],
        ),
        996: (
            size: 16,
            name: "enemyHitstopAddition",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        997: (
            size: 8,
            name: "attackLockWaitTime",
            args: [
                Number,
            ],
        ),
        1018: (
            size: 8,
            // automatically skips hitbox collision check as successful
            name: "attackCollisionForceExpand",
            args: [
                Enum("Boolean"),
            ],
        ),
        1019: (
            size: 8,
            name: "canGrab",
            args: [
                Number,
            ],
        ),
        1020: (
            size: 8,
            name: "whiffOnPrejump",
            args: [
                Number,
            ],
        ),
        1021: (
            size: 8,
            name: "burst",
            args: [
                Enum("Boolean"),
            ],
        ),
        1022: (
            size: 8,
            name: "blueBurst",
            args: [
                Number,
            ],
        ),
        1023: (
            size: 8,
            name: "blockstunAmount",
            args: [
                Number,
            ],
        ),
        1024: (
            size: 8,
            name: "airBlockstunAddition",
            args: [
                Number,
            ],
        ),
        1027: (
            size: 20,
            // sets the boundaries within which the opponent's origin point must be in order for the attack to connect. These are specified relative to the attacker's origin point and facing. To disable the X check, set max X to the same value as min X. To disable the Y check, set min Y to the same value as max Y.
            name: "attackRange",
            args: [
                // max X
                Number,
                // min X
                Number,
                // max Y
                Number,
                // min Y
                Number,
            ],
        ),
        1028: (
            size: 8,
            name: "setProjectileDurability",
            args: [
                Number,
            ],
        ),
        1037: (
            size: 8,
            name: "counterHitType",
            args: [
                Enum("counterHitType0_1037"),
            ],
        ),
        1039: (
            size: 8,
            // disables opponent's burst gauge on hit
            name: "ignoreBurst",
            args: [
                Enum("Boolean"),
            ],
        ),
        1040: (
            size: 8,
            name: "onlyHitGrounded",
            args: [
                Number,
            ],
        ),
        1041: (
            size: 8,
            name: "onlyHitAirborne",
            args: [
                Number,
            ],
        ),
        1042: (
            size: 36,
            name: "attackLockAction",
            args: [
                String32,
            ],
        ),
        1043: (
            size: 8,
            name: "canGrabDuringHitstun",
            args: [
                Number,
            ],
        ),
        1044: (
            size: 8,
            name: "guardEffectEconomy",
            args: [
                Number,
            ],
        ),
        1045: (
            size: 40,
            name: "damageEffect",
            args: [
                Number,
                String32,
            ],
        ),
        1046: (
            size: 40,
            name: "guardEffect",
            args: [
                Number,
                String32,
            ],
        ),
        1047: (
            size: 8,
            name: "damageToFaultlessDefense",
            args: [
                Number,
            ],
        ),
        1049: (
            size: 8,
            // specify maximum allowed distance between the edges of your and your opponent's pushboxes for the attack to connect. This can be combined with attackRange. To disable this check, set this to negative
            name: "throwRange",
            args: [
                Number,
            ],
        ),
        1050: (
            size: 8,
            name: "attackEffectLimit",
            args: [
                Number,
            ],
        ),
        1051: (
            size: 8,
            // determines how the defender's facing is calculated upon getting hit or blocking a hit from this attack.
            // Default value is CALCULATE_FROM_ATTACKER_PLAYER_X and gets reset on every state change
            name: "attackFrontDirection",
            args: [
                Enum("AttackFrontDirection"),
            ],
        ),
        1052: (
            size: 8,
            name: "attackEffectScale",
            args: [
                Number,
            ],
        ),
        1055: (
            size: 8,
            name: "guardCrush",
            args: [
                Number,
            ],
        ),
        1056: (
            size: 8,
            name: "whiffCrouch",
            args: [
                Number,
            ],
        ),
        1057: (
            size: 8,
            name: "attackIgnoreOutPower",
            args: [
                Enum("Boolean"),
            ],
        ),
        1058: (
            size: 8,
            name: "attackIgnoreCaution",
            args: [
                Number,
            ],
        ),
        1059: (
            size: 8,
            name: "killType",
            args: [
                Enum("KILL_TYPE"),
            ],
        ),
        1060: (
            size: 8,
            name: "knockdownOnLandHitOnly",
            args: [
                Number,
            ],
        ),
        1061: (
            size: 8,
            name: "onlyHitPlayer",
            args: [
                Enum("Boolean"),
            ],
        ),
        1062: (
            size: 8,
            name: "attackPushboxOff",
            args: [
                Number,
            ],
        ),
        1063: (
            size: 8,
            name: "attackShutUpDanmatsuma",
            args: [
                Number,
            ],
        ),
        1064: (
            size: 36,
            name: "nextHitActionName",
            args: [
                String32,
            ],
        ),
        1065: (
            size: 8,
            name: "attackNoHitNotKillCombo",
            args: [
                Enum("Boolean"),
            ],
        ),
        1066: (
            size: 8,
            name: "attackFinishBackground",
            args: [
                Number,
            ],
        ),
        1067: (
            size: 16,
            name: "attackHitPositionType",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1068: (
            size: 8,
            name: "attackBoundKeepGravity",
            args: [
                Number,
            ],
        ),
        1069: (
            size: 32,
            name: "attackExHitParam",
            args: [
                // add
                Number,
                // max
                Number,
                // min
                Number,
                // flags
                Number,
                Enum("Entity"),
                AccessedValue,
            ],
        ),
        1070: (
            size: 12,
            name: "poison",
            args: [
                // duration
                Number,
                // percentage
                Number,
            ],
        ),
        1071: (
            size: 8,
            name: "throwRejectType",
            args: [
                Number,
            ],
        ),
        1072: (
            size: 8,
            name: "ignoreProration",
            args: [
                Number,
            ],
        ),
        1074: (
            size: 8,
            name: "attackKeepOutPower",
            args: [
                Number,
            ],
        ),
        1075: (
            size: 8,
            name: "attackShutUp",
            args: [
                Enum("Boolean"),
            ],
        ),
        1076: (
            size: 8,
            name: "whiffIfCombo",
            args: [
                Enum("Boolean"),
            ],
        ),
        1077: (
            size: 8,
            name: "whiffIfBlock",
            args: [
                Number,
            ],
        ),
        1078: (
            size: 8,
            name: "attackEnemySpriteFix",
            args: [
                Number,
            ],
        ),
        1079: (
            size: 8,
            name: "attackNoRecover",
            args: [
                Number,
            ],
        ),
        1080: (
            size: 8,
            name: "attackThroughArmor",
            args: [
                Number,
            ],
        ),
        1081: (
            size: 8,
            name: "nextHitInstantKillOnly",
            args: [
                Enum("Boolean"),
            ],
        ),
        1082: (
            size: 8,
            name: "whiffOtg",
            args: [
                Enum("Boolean"),
            ],
        ),
        1083: (
            size: 8,
            name: "fatalCounter",
            args: [
                Number,
            ],
        ),
        1086: (
            size: 8,
            name: "minimumDamagePercent",
            args: [
                Number,
            ],
        ),
        1088: (
            size: 8,
            name: "wallBounceFix",
            args: [
                Number,
            ],
        ),
        1089: (
            size: 8,
            name: "airNokezori",
            args: [
                Number,
            ],
        ),
        1090: (
            size: 8,
            name: "allHitsCounter",
            args: [
                Enum("Boolean"),
            ],
        ),
        1092: (
            size: 8,
            // percentage. Only gets applied if this hit is the first in a combo
            name: "setInitialProration",
            args: [
                Number,
            ],
        ),
        1093: (
            size: 8,
            // percentage. Gets applied if is less than the current proration. Current proration is the lowest of all the initial and forced prorations of all hits so far.
            name: "setForcedProration",
            args: [
                Number,
            ],
        ),
        1094: (
            size: 8,
            // changes the facing of the defender to the opposite (of what was calculated using attackFrontDirection) when they get hit or block the attack. Default is FALSE
            name: "attackDirectionReverse",
            args: [
                Enum("Boolean"),
            ],
        ),
        1096: (
            size: 8,
            name: "stunValue",
            args: [
                Number,
            ],
        ),
        1097: (
            size: 8,
            name: "attackHorizontal",
            args: [
                Number,
            ],
        ),
        1098: (
            size: 8,
            name: "guardType",
            args: [
                Enum("guardType0_1098"),
            ],
        ),
        1099: (
            size: 8,
            name: "isAirUnblockable",
            args: [
                Enum("Boolean"),
            ],
        ),
        1100: (
            size: 8,
            name: "noHitThrowResist",
            args: [
                Number,
            ],
        ),
        1101: (
            size: 36,
            name: "throwSprite",
            args: [
                String32,
            ],
        ),
        1102: (
            size: 8,
            name: "hitPushbackX",
            args: [
                // percentage
                Number,
            ],
        ),
        1103: (
            size: 8,
            name: "pushbackXForHit",
            args: [
                Number,
            ],
        ),
        1104: (
            size: 8,
            name: "crouchHitstunAddition",
            args: [
                Number,
            ],
        ),
        1105: (
            size: 8,
            name: "airHitstunFromLandAddition",
            args: [
                Number,
            ],
        ),
        1106: (
            size: 8,
            name: "autoParam",
            args: [
                Enum("Boolean"),
            ],
        ),
        1107: (
            size: 8,
            name: "easyClash",
            args: [
                Number,
            ],
        ),
        1108: (
            size: 8,
            name: "atkAngle",
            args: [
                Number,
            ],
        ),
        1109: (
            size: 8,
            // stagger is only applied if groundCounterHitEffect: (STAGGER) and it is ground counterhit, or if groundHitEffect: (STAGGER) and it is ground non-counterhit, or groundHitEffect: (STAGGER) and it is counterhit and groundCounterHitEffect is unspecified.
            name: "staggerDuration",
            args: [
                Number,
            ],
        ),
        1110: (
            size: 8,
            // causes your attack to deal half the amount of hitstop to the opponent, rounded down
            name: "shortHitstop",
            args: [
                Number,
            ],
        ),
        1111: (
            size: 8,
            name: "disableHitstop",
            args: [
                Number,
            ],
        ),
        1112: (
            size: 8,
            name: "disableHitstopForSelf",
            args: [
                Enum("Boolean"),
            ],
        ),
        1113: (
            size: 8,
            name: "dustWallBounce",
            args: [
                Number,
            ],
        ),
        1114: (
            size: 8,
            name: "dustWallBounce1",
            args: [
                Number,
            ],
        ),
        1115: (
            size: 8,
            name: "deadAngle",
            args: [
                Number,
            ],
        ),
        1116: (
            size: 8,
            // ignores strike invul, throw invul, superArmorType: (ARMOR), invulnForAegisField. Does not ignore invulnForce
            name: "ignoreInvuln",
            args: [
                Number,
            ],
        ),
        1117: (
            size: 8,
            name: "tensionGainOnConnect",
            args: [
                Number,
            ],
        ),
        1118: (
            size: 36,
            name: "hitSoundEffect",
            args: [
                String32,
            ],
        ),
        1119: (
            size: 36,
            name: "guardSoundEffect",
            args: [
                String32,
            ],
        ),
        1120: (
            size: 8,
            name: "throwLockExecute",
            args: [
                Number,
            ],
        ),
        1121: (
            size: 8,
            name: "attackLevelForGuard",
            args: [
                Number,
            ],
        ),
        1122: (
            size: 8,
            name: "riscPlus",
            args: [
                Number,
            ],
        ),
        1123: (
            size: 8,
            name: "riscMinus",
            args: [
                Number,
            ],
        ),
        1124: (
            size: 8,
            name: "riscMinusStarter",
            args: [
                Number,
            ],
        ),
        1125: (
            size: 8,
            name: "riscMinusOnce",
            args: [
                Number,
            ],
        ),
        1126: (
            size: 8,
            name: "noScalingAll",
            args: [
                Number,
            ],
        ),
        1127: (
            size: 8,
            name: "noGravityScaling",
            args: [
                Enum("Boolean"),
            ],
        ),
        1128: (
            size: 8,
            name: "noHitstunScaling",
            args: [
                Enum("Boolean"),
            ],
        ),
        1129: (
            size: 8,
            name: "noPushbackScaling",
            args: [
                Enum("Boolean"),
            ],
        ),
        1130: (
            size: 8,
            name: "ignoreOtg",
            args: [
                Enum("Boolean"),
            ],
        ),
        1131: (
            size: 8,
            // if this flag is set, if this is a dust move, it won't launch, and if this move is performed during the initial portion of a dust combo, it won't be possible to cancel it like you usually can during dust combos
            name: "noDustScaling",
            args: [
                Enum("Boolean"),
            ],
        ),
        1132: (
            size: 8,
            name: "noDamageScaling",
            args: [
                Enum("Boolean"),
            ],
        ),
        1133: (
            size: 8,
            name: "hitOtg",
            args: [
                Number,
            ],
        ),
        1134: (
            size: 8,
            // as the combo progresses, hits on airborne opponent apply to them less and less vertical speed. Calling this with 1 turns off that scaling
            name: "noPushbackYScaling",
            args: [
                Number,
            ],
        ),
        1137: (
            size: 8,
            // chip damage is equal to attackKezuri / 128 * 100%. Standard value is 16 for specials, which equates to 12.5% damage as chip damage.
            name: "attackKezuri",
            args: [
                Number,
            ],
        ),
        1138: (
            size: 8,
            // means this attack can be armored by players who have superArmorForReflect set to TRUE.
            // also for someone or something that has the superArmorJibaku falg it means that they can armor hits only from either projectiles that have attackReflect flag, or projectiles that were initially created by their opponent, or projectiles that are not currently reflected (swapped their team to the opposite)
            name: "attackReflect",
            args: [
                Enum("Boolean"),
            ],
        ),
        1139: (
            size: 8,
            name: "attackLockKeep",
            args: [
                Number,
            ],
        ),
        1140: (
            size: 8,
            name: "attackBallMof",
            args: [
                Number,
            ],
        ),
        1141: (
            size: 8,
            name: "attackBallMofFirst",
            args: [
                Number,
            ],
        ),
        1142: (
            size: 8,
            name: "displayHitSparks",
            args: [
                Number,
            ],
        ),
        1143: (
            size: 8,
            name: "prorationTandan",
            args: [
                Enum("Boolean"),
            ],
        ),
        1144: (
            size: 8,
            name: "unburstableTime",
            args: [
                Number,
            ],
        ),
        1145: (
            size: 8,
            // when your attacks connects with the opponent, it will give this much time, in frames, of invulnForce
            name: "invulnTime",
            args: [
                Number,
            ],
        ),
        1146: (
            size: 8,
            // similar to invulnTime, this attack gives the opponent the specified duration of invulnForce when you hit them
            name: "dustInvulnTime",
            args: [
                Number,
            ],
        ),
        1147: (
            size: 8,
            name: "noEnemyHitstop",
            args: [
                Number,
            ],
        ),
        1148: (
            size: 36,
            name: "hitCommonSfxAppend",
            args: [
                String32,
            ],
        ),
        1149: (
            size: 8,
            name: "damageSprite",
            args: [
                Number,
            ],
        ),
        1150: (
            size: 8,
            name: "noFinishStop",
            args: [
                Number,
            ],
        ),
        1151: (
            size: 8,
            name: "noFinishCamera",
            args: [
                Enum("Boolean"),
            ],
        ),
        1152: (
            size: 8,
            name: "clashOnly",
            args: [
                Number,
            ],
        ),
        1153: (
            size: 8,
            name: "projectileHitstopClash",
            args: [
                Number,
            ],
        ),
        1154: (
            size: 8,
            name: "attackMultiHit",
            args: [
                Number,
            ],
        ),
        1155: (
            size: 8,
            name: "noStaggerRecovery",
            args: [
                Number,
            ],
        ),
        1156: (
            size: 8,
            name: "lifeStealPercent",
            args: [
                Number,
            ],
        ),
        1157: (
            size: 8,
            name: "dontAddComboCount",
            args: [
                Number,
            ],
        ),
        1158: (
            size: 8,
            name: "strikeOrThrow",
            args: [
                Enum("STRIKE_OR_THROW"),
            ],
        ),
        1159: (
            size: 8,
            name: "exDamageType",
            args: [
                Enum("ExDamageType"),
            ],
        ),
        1160: (
            size: 8,
            // if this attack connects, immediately call invulnForce: 1 and romanCancelAvailability: (DISALLOWED) on self inside the hit logic
            name: "enemyDamageInvulnForceAndNoRomanCancel",
            args: [
                Number,
            ],
        ),
        1161: (
            size: 8,
            name: "hellfireIgnoreDemo",
            args: [
                Number,
            ],
        ),
        1162: (
            size: 8,
            name: "momItem",
            args: [
                Number,
            ],
        ),
        1163: (
            size: 8,
            name: "blitzBreak",
            args: [
                Enum("Boolean"),
            ],
        ),
        1164: (
            size: 8,
            // allows the attack to deal 20% damage bonus when the attacker is in the Hellfire state
            name: "hellfire",
            args: [
                Enum("Boolean"),
            ],
        ),
        1165: (
            size: 36,
            name: "trialName",
            args: [
                String32,
            ],
        ),
        1166: (
            size: 8,
            name: "doubleSlashEffectBugFix",
            args: [
                Number,
            ],
        ),
        1167: (
            size: 8,
            name: "enableGuardBreak",
            args: [
                Number,
            ],
        ),
        1168: (
            size: 8,
            name: "wallStickKudariOk",
            args: [
                Number,
            ],
        ),
        1169: (
            size: 8,
            name: "hitAirPushbackXGensui",
            args: [
                Number,
            ],
        ),
        1170: (
            size: 8,
            name: "nagenuke",
            args: [
                Enum("Boolean"),
            ],
        ),
        1171: (
            size: 8,
            name: "dustAttack",
            args: [
                Number,
            ],
        ),
        1172: (
            size: 8,
            name: "superDustAttack",
            args: [
                Number,
            ],
        ),
        1173: (
            size: 8,
            // setting this to 1 means this attack is a normal ground throw. This gets called automatically from the game engine. Chijou means ground, tuujou means normal, nage means throw, tsukami means grab
            name: "chijoutuujounageTsukami",
            args: [
                Number,
            ],
        ),
        1174: (
            size: 8,
            // setting this to 1 means this attack is a normal airthrow. This gets called automatically from the game engine
            name: "kuuchuutuujounageTsukami",
            args: [
                Number,
            ],
        ),
        1175: (
            size: 8,
            // this flag is set by the game inside the defaultThrowInit function. It means executing normal ground throw, after the grab was successful
            name: "chijoutuujounageTsukamiExecute",
            args: [
                Number,
            ],
        ),
        1176: (
            size: 8,
            // this flag is set by the game inside the defaultThrowInit function. It means executing normal air throw, after the grab was successful
            name: "kuuchuutuujounageTsukamiExecute",
            args: [
                Number,
            ],
        ),
        1177: (
            size: 8,
            name: "burstUltimate",
            args: [
                Number,
            ],
        ),
        1178: (
            size: 8,
            name: "neoBlitz",
            args: [
                Number,
            ],
        ),
        1179: (
            size: 8,
            name: "yogore",
            args: [
                Number,
            ],
        ),
        1180: (
            size: 8,
            name: "atkBlitzHajiki",
            args: [
                Number,
            ],
        ),
        1181: (
            size: 8,
            // when hitting airborne opponents, multiplies pushback by this amount / 100 if the provided percentage is not 0
            name: "hitPushbackXAir",
            args: [
                // percentage. Specify 0 to ignore
                Number,
            ],
        ),
        1212: (
            size: 8,
            name: "walkFSpeed",
            args: [
                Number,
            ],
        ),
        1213: (
            size: 8,
            name: "walkBSpeed",
            args: [
                Number,
            ],
        ),
        1214: (
            size: 8,
            name: "initDashFSpeed",
            args: [
                Number,
            ],
        ),
        1215: (
            size: 8,
            name: "bDashXSpeed",
            args: [
                Number,
            ],
        ),
        1216: (
            size: 8,
            name: "bDashYSpeed",
            args: [
                Number,
            ],
        ),
        1217: (
            size: 8,
            name: "bDashGravity",
            args: [
                Number,
            ],
        ),
        1218: (
            size: 8,
            name: "forwardJumpXSpeed",
            args: [
                Number,
            ],
        ),
        1219: (
            size: 8,
            name: "backwardJumpXSpeed",
            args: [
                Number,
            ],
        ),
        1220: (
            size: 8,
            name: "jumpYSpeed",
            args: [
                Number,
            ],
        ),
        1221: (
            size: 8,
            name: "gravity",
            args: [
                Number,
            ],
        ),
        1222: (
            size: 8,
            name: "forwardHighJumpXSpeed",
            args: [
                Number,
            ],
        ),
        1223: (
            size: 8,
            name: "backwardHighJumpXSpeed",
            args: [
                Number,
            ],
        ),
        1224: (
            size: 8,
            name: "highJumpYSpeed",
            args: [
                Number,
            ],
        ),
        1225: (
            size: 8,
            name: "highJumpGravity",
            args: [
                Number,
            ],
        ),
        1226: (
            size: 8,
            name: "dashAcceleration",
            args: [
                Number,
            ],
        ),
        1227: (
            size: 8,
            name: "dashFriction",
            args: [
                Number,
            ],
        ),
        1228: (
            size: 8,
            name: "initHomingJumpMaxYSpeed",
            args: [
                Number,
            ],
        ),
        1229: (
            size: 8,
            name: "initHomingJumpMaxXSpeed",
            args: [
                Number,
            ],
        ),
        1230: (
            size: 8,
            name: "initHomingJumpXReduce",
            args: [
                Number,
            ],
        ),
        1231: (
            size: 8,
            name: "initHomingJumpYOffset",
            args: [
                Number,
            ],
        ),
        1232: (
            size: 8,
            name: "airDashMinimumHeight",
            args: [
                Number,
            ],
        ),
        1233: (
            size: 8,
            name: "airFDashTime",
            args: [
                Number,
            ],
        ),
        1234: (
            size: 8,
            name: "airBDashTime",
            args: [
                Number,
            ],
        ),
        1235: (
            size: 8,
            name: "stunResistance",
            args: [
                Number,
            ],
        ),
        1236: (
            size: 8,
            name: "defense",
            args: [
                Number,
            ],
        ),
        1237: (
            size: 8,
            name: "guts",
            args: [
                Number,
            ],
        ),
        1238: (
            size: 8,
            name: "critical",
            args: [
                Number,
            ],
        ),
        1239: (
            size: 8,
            name: "weight",
            args: [
                Number,
            ],
        ),
        1240: (
            size: 8,
            name: "airDashCount",
            args: [
                Number,
            ],
        ),
        1241: (
            size: 8,
            name: "doubleJumpCount",
            args: [
                Number,
            ],
        ),
        1242: (
            size: 8,
            name: "airFDashNoAttackTime",
            args: [
                Number,
            ],
        ),
        1243: (
            size: 8,
            name: "airBDashNoAttackTime",
            args: [
                Number,
            ],
        ),
        1244: (
            size: 8,
            name: "forwardWalkTension",
            args: [
                Number,
            ],
        ),
        1245: (
            size: 8,
            name: "forwardJumpTension",
            args: [
                Number,
            ],
        ),
        1246: (
            size: 8,
            name: "forwardDashTension",
            args: [
                Number,
            ],
        ),
        1247: (
            size: 8,
            name: "airFDashTension",
            args: [
                Number,
            ],
        ),
        1248: (
            size: 8,
            name: "guardBalanceDefence",
            args: [
                Number,
            ],
        ),
        1249: (
            size: 8,
            name: "guardBalanceTension",
            args: [
                Number,
            ],
        ),
        1250: (
            size: 8,
            name: "instantBlockTension",
            args: [
                Number,
            ],
        ),
        1251: (
            size: 8,
            name: "airdashFSpeed",
            args: [
                Number,
            ],
        ),
        1252: (
            size: 8,
            name: "airdashBSpeed",
            args: [
                Number,
            ],
        ),
        1253: (
            size: 8,
            name: "pushboxWidthStand",
            args: [
                Number,
            ],
        ),
        1254: (
            size: 8,
            name: "pushboxHeightStand",
            args: [
                Number,
            ],
        ),
        1255: (
            size: 8,
            name: "pushboxWidthCrouch",
            args: [
                Number,
            ],
        ),
        1256: (
            size: 8,
            name: "pushboxHeightCrouch",
            args: [
                Number,
            ],
        ),
        1257: (
            size: 8,
            name: "pushboxWidthAir",
            args: [
                Number,
            ],
        ),
        1258: (
            size: 8,
            name: "pushboxHeightAir",
            args: [
                Number,
            ],
        ),
        1259: (
            size: 8,
            name: "pushboxHeightLowAir",
            args: [
                Number,
            ],
        ),
        1260: (
            size: 8,
            name: "closeSlashRange",
            args: [
                Number,
            ],
        ),
        1261: (
            size: 28,
            name: "initJumpMotionFrame",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        1262: (
            size: 8,
            name: "shoesType",
            args: [
                Number,
            ],
        ),
        1263: (
            size: 8,
            name: "health",
            args: [
                Number,
            ],
        ),
        1264: (
            size: 20,
            // sets the charaName of your character, to be checked by functions like ifOpponentCharacter
            name: "charaName",
            args: [
                String16,
            ],
        ),
        1265: (
            size: 8,
            name: "negativeAnti",
            args: [
                Number,
            ],
        ),
        1266: (
            size: 8,
            name: "extendPushboxX",
            args: [
                Number,
            ],
        ),
        1267: (
            size: 8,
            name: "forceNormalDemoAction",
            args: [
                Number,
            ],
        ),
        1268: (
            size: 8,
            name: "privateFlag",
            args: [
                Number,
            ],
        ),
        1269: (
            size: 8,
            name: "homingJumpYOffsetRED",
            args: [
                Number,
            ],
        ),
        1273: (
            size: 8,
            name: "cpuWeakenRate",
            args: [
                Number,
            ],
        ),
        1274: (
            size: 8,
            name: "cpuTokuiKyori",
            args: [
                Number,
            ],
        ),
        1275: (
            size: 8,
            name: "cpuTokuiKyoriKodawari",
            args: [
                Number,
            ],
        ),
        1286: (
            size: 40,
            name: "setDamageCell",
            args: [
                Number,
                String32,
            ],
        ),
        1287: (
            size: 4,
            name: "resetCommonActionMark",
            args: [],
        ),
        1306: (
            size: 8,
            name: "enableStand",
            args: [
                Number,
            ],
        ),
        1307: (
            size: 8,
            name: "enableCrouch",
            args: [
                Number,
            ],
        ),
        1308: (
            size: 8,
            name: "enableWalkForward",
            args: [
                Number,
            ],
        ),
        1309: (
            size: 8,
            name: "enableForwardDash",
            args: [
                Number,
            ],
        ),
        1310: (
            size: 8,
            name: "enableForwardCrouchWalk",
            args: [
                Number,
            ],
        ),
        1311: (
            size: 8,
            name: "enableWalkBack",
            args: [
                Number,
            ],
        ),
        1312: (
            size: 8,
            name: "enableBackDash",
            args: [
                Number,
            ],
        ),
        1313: (
            size: 8,
            name: "enableBackCrouchWalk",
            args: [
                Number,
            ],
        ),
        1314: (
            size: 8,
            name: "enableJump",
            args: [
                Number,
            ],
        ),
        1315: (
            size: 8,
            name: "enableFaultlessDefenseCancel",
            args: [
                Number,
            ],
        ),
        1316: (
            size: 8,
            name: "enableDoubleJump",
            args: [
                Number,
            ],
        ),
        1317: (
            size: 8,
            name: "enableAirForwardDash",
            args: [
                Number,
            ],
        ),
        1318: (
            size: 8,
            name: "enableAirBackDash",
            args: [
                Number,
            ],
        ),
        1319: (
            size: 8,
            name: "enableThrowTech",
            args: [
                Number,
            ],
        ),
        1320: (
            size: 8,
            name: "enableNormals",
            args: [
                Number,
            ],
        ),
        1321: (
            size: 8,
            name: "enableSpecials",
            args: [
                Number,
            ],
        ),
        1322: (
            size: 8,
            name: "enableStandTurn",
            args: [
                Number,
            ],
        ),
        1323: (
            size: 8,
            name: "enableCrouchTurn",
            args: [
                Number,
            ],
        ),
        1324: (
            size: 8,
            name: "enableDeath",
            args: [
                Number,
            ],
        ),
        1325: (
            size: 8,
            name: "enableBlock",
            args: [
                Number,
            ],
        ),
        1328: (
            size: 8,
            name: "enableAirTurn",
            args: [
                Number,
            ],
        ),
        1330: (
            size: 8,
            name: "enableRomanCancel",
            args: [
                Number,
            ],
        ),
        1332: (
            size: 8,
            name: "enableFaultlessDefense",
            args: [
                Number,
            ],
        ),
        1333: (
            size: 8,
            name: "enableAutoThrowTech",
            args: [
                Number,
            ],
        ),
        1334: (
            size: 8,
            name: "enableDemo",
            args: [
                Number,
            ],
        ),
        1335: (
            size: 8,
            name: "enableProximityBlock",
            args: [
                Number,
            ],
        ),
        1336: (
            size: 8,
            name: "enableAutoGuard",
            args: [
                Number,
            ],
        ),
        1337: (
            size: 8,
            name: "enableBurst",
            args: [
                Number,
            ],
        ),
        1340: (
            size: 8,
            name: "enableAirTech",
            args: [
                Number,
            ],
        ),
        1341: (
            size: 8,
            name: "enableNamaFAult",
            args: [
                Number,
            ],
        ),
        1344: (
            size: 8,
            name: "enableAll",
            args: [
                Number,
            ],
        ),
        1348: (
            size: 8,
            name: "setTutorialCPULevel",
            args: [
                Number,
            ],
        ),
        1349: (
            size: 8,
            name: "checkEnemyInput",
            args: [
                Enum("checkInput0_48"),
            ],
        ),
        1378: (
            size: 8,
            name: "moveType",
            args: [
                Enum("moveType0_1378"),
            ],
        ),
        1379: (
            size: 8,
            name: "characterState",
            args: [
                Enum("characterState0_1379"),
            ],
        ),
        1380: (
            size: 36,
            name: "registerFunc",
            args: [
                String32,
            ],
        ),
        1381: (
            size: 8,
            name: "movePriority",
            args: [
                Number,
            ],
        ),
        1382: (
            size: 36,
            name: "addMove",
            codeBlock: BeginNonrecursive,
            args: [
                String32,
            ],
        ),
        1383: (
            size: 4,
            name: "endMoveRegister",
            codeBlock: End,
            args: [],
        ),
        1384: (
            size: 8,
            name: "addMoveCondition",
            args: [
                Enum("MoveCondition"),
            ],
        ),
        1385: (
            size: 8,
            name: "disableCancelsIntoMove",
            args: [
                Number,
            ],
        ),
        1386: (
            size: 8,
            name: "isFollowupMove",
            args: [
                Number,
            ],
        ),
        1387: (
            size: 8,
            name: "moveSubCategory",
            args: [
                Enum("moveSubCategory0_1387"),
            ],
        ),
        1388: (
            size: 8,
            name: "moveRewriteMode",
            args: [
                Number,
            ],
        ),
        1389: (
            size: 8,
            name: "hitstopCancel",
            args: [
                Number,
            ],
        ),
        1390: (
            size: 8,
            name: "removeMoveCondition",
            args: [
                Enum("MoveCondition"),
            ],
        ),
        1391: (
            size: 8,
            name: "noJumpCancelCancel",
            args: [
                Number,
            ],
        ),
        1392: (
            size: 8,
            name: "forceDisableFlag",
            args: [
                Number,
            ],
        ),
        1393: (
            size: 8,
            name: "moveInput",
            args: [
                Enum("checkInput0_48"),
            ],
        ),
        1394: (
            size: 36,
            name: "moveAlias",
            args: [
                String32,
            ],
        ),
        1395: (
            size: 8,
            name: "moveRequestActionFlag",
            args: [
                Number,
            ],
        ),
        1397: (
            size: 36,
            name: "moveCallSubroutine",
            args: [
                String32,
            ],
        ),
        1398: (
            size: 8,
            // if set to 1 (default is 0), cancelling into this move won't be allowed if you're currently in this move
            name: "moveNotSame",
            args: [
                Enum("Boolean"),
            ],
        ),
        1399: (
            size: 8,
            name: "moveInputDirectionRight",
            args: [
                Number,
            ],
        ),
        1400: (
            size: 8,
            name: "maxChainIntoSelf",
            args: [
                Number,
            ],
        ),
        1401: (
            size: 8,
            name: "moveEnemyHPRate",
            args: [
                Number,
            ],
        ),
        1402: (
            size: 36,
            name: "moveConditionCheckSubroutine",
            args: [
                String32,
            ],
        ),
        1403: (
            size: 8,
            name: "inputDirectionBaseObject",
            args: [
                Number,
            ],
        ),
        1404: (
            size: 8,
            name: "moveKeepAirDash",
            args: [
                Number,
            ],
        ),
        1405: (
            size: 36,
            name: "moveShareChain",
            args: [
                String32,
            ],
        ),
        1406: (
            size: 8,
            name: "moveHitOrBlockstunCondition",
            args: [
                Enum("HIT_BLOCK_CONDITION"),
            ],
        ),
        1407: (
            size: 4,
            name: "deleteInputs",
            args: [],
        ),
        1412: (
            size: 8,
            name: "minimumHeightRequirement",
            args: [
                Number,
            ],
        ),
        1413: (
            size: 8,
            name: "stylishMove",
            args: [
                Number,
            ],
        ),
        1414: (
            size: 36,
            name: "stylishDataCopy",
            args: [],
        ),
        1415: (
            size: 68,
            name: "setStylishCombo",
            codeBlock: BeginNonrecursive,
            args: [
                String32,
                String32,
            ],
        ),
        1416: (
            size: 8,
            name: "moveEnemyXNear",
            args: [
                Number,
            ],
        ),
        1417: (
            size: 8,
            name: "stylishComboSlot",
            args: [
                Number,
            ],
        ),
        1418: (
            size: 4,
            name: "stylishComboSlotClearAll",
            args: [],
        ),
        1419: (
            size: 8,
            name: "oneButtonStylish",
            args: [
                Number,
            ],
        ),
        1420: (
            size: 36,
            name: "stylishInitOneButton",
            args: [
                String32,
            ],
        ),
        1421: (
            size: 4,
            name: "stylishInitComboSlot",
            args: [],
        ),
        1422: (
            size: 12,
            name: "moveEnemyYRange",
            args: [
                Number,
                Number,
            ],
        ),
        1423: (
            size: 8,
            name: "stylishBeginCancel",
            args: [
                Number,
            ],
        ),
        1476: (
            size: 8,
            name: "usableByCPU",
            args: [
                Number,
            ],
        ),
        1479: (
            size: 8,
            name: "usableByPlayer",
            args: [
                Number,
            ],
        ),
        1480: (
            size: 36,
            name: "moveRecipe",
            args: [
                String32,
            ],
        ),
        1481: (
            size: 12,
            name: "moveRecipeStopType",
            args: [
                Number,
                Number,
            ],
        ),
        1482: (
            size: 12,
            name: "moveRecipeEKey",
            args: [
                Number,
                Number,
            ],
        ),
        1483: (
            size: 36,
            name: "moveRecipeEMove",
            args: [
                String32,
            ],
        ),
        1484: (
            size: 12,
            name: "moveRecipeEWait",
            args: [
                Number,
                Number,
            ],
        ),
        1485: (
            size: 8,
            name: "moveTrialOnly",
            args: [
                Number,
            ],
        ),
        1486: (
            size: 8,
            name: "moveLeverMoveJumpSeal",
            args: [
                Number,
            ],
        ),
        1487: (
            size: 8,
            name: "moveTrialOnlyEx",
            args: [
                Number,
            ],
        ),
        1488: (
            size: 16,
            name: "moveRecipeStopTypeEx",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1498: (
            size: 20,
            name: "cpuEstimateAttackBox",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        1510: (
            size: 8,
            name: "moveEstChusenMorePercent",
            args: [
                Number,
            ],
        ),
        1511: (
            size: 8,
            name: "cpuEstimatePoint",
            args: [
                Number,
            ],
        ),
        1512: (
            size: 8,
            name: "cpuEstimateLevelLimit",
            args: [
                Number,
            ],
        ),
        1513: (
            size: 8,
            name: "cpuEstimateInterval",
            args: [
                Number,
            ],
        ),
        1514: (
            size: 8,
            name: "cpuEstimateStrengthLimit",
            args: [
                Number,
            ],
        ),
        1531: (
            size: 4,
            name: "cpuEstimateTagGuard",
            args: [],
        ),
        1532: (
            size: 4,
            name: "cpuEstimateTagCombo",
            args: [],
        ),
        1533: (
            size: 4,
            name: "cpuEstimateTagPunish",
            args: [],
        ),
        1534: (
            size: 4,
            name: "cpuEstimateTagXNearPunish",
            args: [],
        ),
        1535: (
            size: 4,
            name: "cpuEstimateTagXFarPunish",
            args: [],
        ),
        1536: (
            size: 4,
            name: "cpuEstimateTagXMidPunish",
            args: [],
        ),
        1537: (
            size: 4,
            name: "cpuEstimateTagKiten",
            args: [],
        ),
        1538: (
            size: 4,
            name: "cpuIsOverhead",
            args: [],
        ),
        1539: (
            size: 4,
            name: "cpuIsLow",
            args: [],
        ),
        1540: (
            size: 4,
            name: "cpuIsThrow",
            args: [],
        ),
        1541: (
            size: 4,
            name: "cpuIsTaiku",
            args: [],
        ),
        1542: (
            size: 4,
            name: "cpuUsesResource",
            args: [],
        ),
        1543: (
            size: 4,
            name: "cpuBigDamage",
            args: [],
        ),
        1544: (
            size: 4,
            name: "cpuEstimateTagKugurare",
            args: [],
        ),
        1545: (
            size: 4,
            name: "cpuEstimateTagKuguri",
            args: [],
        ),
        1546: (
            size: 4,
            name: "cpuEstimateTagTobare",
            args: [],
        ),
        1547: (
            size: 4,
            name: "cpuEstimateTagTobi",
            args: [],
        ),
        1548: (
            size: 4,
            name: "cpuEstimateTagInvuln",
            args: [],
        ),
        1549: (
            size: 4,
            name: "cpuEstimateTagProjectileInvuln",
            args: [],
        ),
        1550: (
            size: 4,
            name: "cpuEstimateTagProjectile",
            args: [],
        ),
        1551: (
            size: 4,
            name: "cpuEstimateTagSukidarake",
            args: [],
        ),
        1552: (
            size: 4,
            name: "cpuEstimateTagKunage",
            args: [],
        ),
        1553: (
            size: 4,
            name: "cpuEstimateTagGamenhashi",
            args: [],
        ),
        1554: (
            size: 4,
            name: "cpuEstimateTagFromDash",
            args: [],
        ),
        1555: (
            size: 4,
            name: "cpuEstimateTagNoCombo",
            args: [],
        ),
        1556: (
            size: 4,
            name: "cpuEstimateTagNoAirCombo",
            args: [],
        ),
        1557: (
            size: 4,
            name: "cpuEstimateMomBoss",
            args: [],
        ),
        1558: (
            size: 4,
            name: "cpuDoNotEstimate",
            args: [],
        ),
        1559: (
            size: 4,
            name: "cpuBonusRecipe",
            args: [],
        ),
        1560: (
            size: 4,
            name: "cpuBerserkRecipe",
            args: [],
        ),
        1561: (
            size: 4,
            name: "cpuTagOnHighEstimateOnly",
            args: [],
        ),
        1562: (
            size: 4,
            name: "cpuEstimateTagNamepu",
            args: [],
        ),
        1581: (
            size: 36,
            name: "skillHighEstimation",
            args: [
                String32,
            ],
        ),
        1582: (
            size: 36,
            name: "skillLowEstimation",
            args: [
                String32,
            ],
        ),
        1601: (
            size: 8,
            name: "addMoveForceDisableFlagQuick",
            args: [
                Number,
            ],
        ),
        1602: (
            size: 8,
            name: "addMoveForceDisableFlag",
            args: [
                Number,
            ],
        ),
        1603: (
            size: 8,
            name: "deleteMoveForceDisableFlag",
            args: [
                Number,
            ],
        ),
        1610: (
            size: 36,
            name: "addWhiffCancelOption",
            args: [
                String32,
            ],
        ),
        1611: (
            size: 36,
            name: "addGatlingOption",
            args: [
                String32,
            ],
        ),
        1616: (
            size: 8,
            name: "enableWhiffCancelsOnNextFrame",
            args: [
                Number,
            ],
        ),
        1617: (
            size: 8,
            name: "frcWindow",
            args: [
                Number,
            ],
        ),
        1618: (
            size: 8,
            name: "enableWhiffCancels",
            args: [
                Number,
            ],
        ),
        1619: (
            size: 8,
            name: "enableGatlings",
            args: [
                Number,
            ],
        ),
        1620: (
            size: 8,
            name: "enableJumpCancel",
            args: [
                Number,
            ],
        ),
        1621: (
            size: 8,
            name: "enableSpecialCancel",
            args: [
                Number,
            ],
        ),
        1622: (
            size: 36,
            // makes it so the specified move can only be gatlinged into after hitting the opponent player
            name: "addPDChain",
            args: [
                String32,
            ],
        ),
        1623: (
            size: 8,
            name: "jumpCancelPD",
            args: [
                Number,
            ],
        ),
        1624: (
            size: 8,
            name: "specialCancelPD",
            args: [
                Number,
            ],
        ),
        1625: (
            size: 36,
            name: "removeWhiffCancelOption",
            args: [
                String32,
            ],
        ),
        1626: (
            size: 36,
            name: "removeGatlingOption",
            args: [
                String32,
            ],
        ),
        1627: (
            size: 36,
            name: "removePDChain",
            args: [
                String32,
            ],
        ),
        1628: (
            size: 8,
            name: "enableDashCancel",
            args: [
                Number,
            ],
        ),
        1629: (
            size: 8,
            name: "dashCancelPD",
            args: [
                Number,
            ],
        ),
        1630: (
            size: 40,
            name: "whiffCancelOptionBufferTime",
            args: [
                String32,
                Number,
            ],
        ),
        1631: (
            size: 4,
            name: "resetEasyInputP",
            args: [],
        ),
        1632: (
            size: 4,
            name: "resetEasyInputK",
            args: [],
        ),
        1633: (
            size: 4,
            name: "resetEasyInputS",
            args: [],
        ),
        1634: (
            size: 4,
            name: "resetEasyInputHS",
            args: [],
        ),
        1635: (
            size: 4,
            name: "resetEasyInputD",
            args: [],
        ),
        1636: (
            size: 12,
            name: "playerActionInitializeByCategory",
            args: [
                Number,
                Number,
            ],
        ),
        1638: (
            size: 4,
            // gets automatically called at the start of CmnActRoundWin/Lose (winning/losing a round) and CmnActResultWin/Lose (winning/losing a match) states. Using this function you can call it directly. This function makes you invulnForce: 1, resets speed, dash and airdash momentum and registers STATE_REACHED_END event handler that makes you return to _NEUTRAL (standing/crouching/jumping) state
            name: "onRoundEnd",
            args: [],
        ),
        1641: (
            size: 12,
            name: "defaultThrowInit",
            args: [
                Enum("moveType0_1378"),
                Enum("characterState0_1379"),
            ],
        ),
        1669: (
            size: 4,
            name: "clearCommonActionControl",
            args: [],
        ),
        1671: (
            size: 132,
            name: "mouth",
            args: [
                String32,
                String32,
                String32,
                String32,
            ],
        ),
        1672: (
            size: 4,
            name: "cutSceneFaceBegin",
            args: [],
        ),
        1675: (
            size: 8,
            name: "demoEndYoinTime",
            args: [
                Number,
            ],
        ),
        1676: (
            size: 4,
            name: "demoEnd",
            args: [],
        ),
        1677: (
            size: 8,
            name: "setCrouch",
            args: [
                Number,
            ],
        ),
        1678: (
            size: 4,
            name: "winAction",
            args: [],
        ),
        1679: (
            size: 148,
            name: "mouthTable",
            args: [
                String16,
                String16,
                String32,
                String32,
                String32,
            ],
        ),
        1699: (
            size: 8,
            name: "setDepth",
            args: [
                Number,
            ],
        ),
        1700: (
            size: 8,
            name: "addDepth",
            args: [
                Number,
            ],
        ),
        1701: (
            size: 4,
            name: "pushDepth",
            args: [],
        ),
        1702: (
            size: 4,
            name: "popDepth",
            args: [],
        ),
        1703: (
            size: 12,
            name: "randomAddDepth",
            args: [
                Number,
                Number,
            ],
        ),
        1704: (
            size: 8,
            name: "setDepthSpeed",
            args: [
                Number,
            ],
        ),
        1705: (
            size: 8,
            name: "addDepthSpeed",
            args: [
                Number,
            ],
        ),
        1706: (
            size: 4,
            name: "pushDepthSpeed",
            args: [],
        ),
        1707: (
            size: 4,
            name: "popDepthSpeed",
            args: [],
        ),
        1708: (
            size: 8,
            name: "depthSpeedPercent",
            args: [
                Number,
            ],
        ),
        1709: (
            size: 12,
            name: "randomAddDepthSpeed",
            args: [
                Number,
                Number,
            ],
        ),
        1710: (
            size: 8,
            name: "setDepthAcceleration",
            args: [
                Number,
            ],
        ),
        1711: (
            size: 8,
            name: "addDepthAcceleration",
            args: [
                Number,
            ],
        ),
        1712: (
            size: 4,
            name: "pushDepthAcceleration",
            args: [],
        ),
        1713: (
            size: 4,
            name: "popDepthAcceleration",
            args: [],
        ),
        1714: (
            size: 8,
            name: "depthAccelerationPercent",
            args: [
                Number,
            ],
        ),
        1715: (
            size: 12,
            name: "randomAddDepthAcceleration",
            args: [
                Number,
                Number,
            ],
        ),
        1734: (
            size: 8,
            name: "cameraTargetSelf",
            args: [
                Number,
            ],
        ),
        1735: (
            size: 8,
            name: "fastCamera",
            args: [
                Number,
            ],
        ),
        1736: (
            size: 8,
            name: "noCameraCeiling",
            args: [
                Number,
            ],
        ),
        1737: (
            size: 8,
            name: "noCameraWall",
            args: [
                Number,
            ],
        ),
        1738: (
            size: 8,
            name: "infiniteCameraControl",
            args: [
                Number,
            ],
        ),
        1739: (
            size: 12,
            name: "cameraForInstantKill",
            args: [
                Number,
                Number,
            ],
        ),
        1740: (
            size: 8,
            name: "cameraWinnerControlStop",
            args: [
                Number,
            ],
        ),
        1741: (
            size: 8,
            name: "cameraTargetEnemy",
            args: [
                Number,
            ],
        ),
        1757: (
            size: 16,
            name: "addHitPointByRateForMOMTabemono",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1758: (
            size: 12,
            name: "modifyHPByRate",
            args: [
                Number,
                Number,
            ],
        ),
        1759: (
            size: 8,
            name: "modifyHP",
            args: [
                Number,
            ],
        ),
        1760: (
            size: 8,
            name: "modifyHPNoDeath",
            args: [
                Number,
            ],
        ),
        1761: (
            size: 8,
            name: "linkModelTime",
            args: [
                Number,
            ],
        ),
        1763: (
            size: 8,
            name: "setColorByPaletteIndex",
            args: [
                Number,
            ],
        ),
        1764: (
            size: 8,
            name: "ignoreTurnAction",
            args: [
                Number,
            ],
        ),
        1765: (
            size: 12,
            name: "moveToCenterOffset",
            args: [
                Number,
                Number,
            ],
        ),
        1766: (
            size: 12,
            name: "sendSignal",
            args: [
                // the entity to send the signal to. The entity must not be deactivated (see deactivateObj)
                Enum("Entity"),
                // only the following signals may be sent:
                // CUSTOM_SIGNAL_0
                // CUSTOM_SIGNAL_1
                // CUSTOM_SIGNAL_2
                // CUSTOM_SIGNAL_3
                // CUSTOM_SIGNAL_4
                // CUSTOM_SIGNAL_5
                // CUSTOM_SIGNAL_6
                // CUSTOM_SIGNAL_7
                // CUSTOM_SIGNAL_8
                // CUSTOM_SIGNAL_9
                // Attempting to send any other signal will achieve nothing.
                Enum("upon0_21"),
            ],
        ),
        1767: (
            size: 8,
            name: "colorParent",
            args: [
                Enum("Entity"),
            ],
        ),
        1768: (
            size: 28,
            name: "linearColor",
            args: [],
        ),
        1769: (
            size: 8,
            name: "ignoreFinishStop",
            args: [
                Number,
            ],
        ),
        1770: (
            size: 8,
            name: "pushScreenOffsetBack",
            args: [
                Number,
            ],
        ),
        1771: (
            size: 40,
            name: "sendSignalToAction",
            args: [
                // specifies the name of the state to check all your entities for. You can only send signals to your own entities, not your opponent's. The signal will be sent to all your non-deactivated (see deactivateObj) entities that are in the state named this.
                String32,
                // only the following signals may be sent:
                // CUSTOM_SIGNAL_0
                // CUSTOM_SIGNAL_1
                // CUSTOM_SIGNAL_2
                // CUSTOM_SIGNAL_3
                // CUSTOM_SIGNAL_4
                // CUSTOM_SIGNAL_5
                // CUSTOM_SIGNAL_6
                // CUSTOM_SIGNAL_7
                // CUSTOM_SIGNAL_8
                // CUSTOM_SIGNAL_9
                // Attempting to send any other signal will achieve nothing.
                Enum("upon0_21"),
            ],
        ),
        1772: (
            size: 40,
            name: "sendSignalToOldestAction",
            args: [
                // specifies the name of the state to check all your entities for. You can only send signals to your own entities, not your opponent's. The signal will be sent to your oldest non-deactivated (see deactivateObj) entity that is in the state named this.
                String32,
                // only the following signals may be sent:
                // CUSTOM_SIGNAL_0
                // CUSTOM_SIGNAL_1
                // CUSTOM_SIGNAL_2
                // CUSTOM_SIGNAL_3
                // CUSTOM_SIGNAL_4
                // CUSTOM_SIGNAL_5
                // CUSTOM_SIGNAL_6
                // CUSTOM_SIGNAL_7
                // CUSTOM_SIGNAL_8
                // CUSTOM_SIGNAL_9
                // Attempting to send any other signal will achieve nothing.
                Enum("upon0_21"),
            ],
        ),
        1788: (
            size: 4,
            name: "restoreDoubleJump",
            args: [],
        ),
        1789: (
            size: 8,
            name: "addDoubleJumpCount",
            args: [
                Number,
            ],
        ),
        1790: (
            size: 4,
            name: "restoreAirDash",
            args: [],
        ),
        1791: (
            size: 8,
            name: "addAirDashCount",
            args: [
                Number,
            ],
        ),
        1792: (
            size: 12,
            name: "landingStiffTime",
            args: [
                Number,
                Number,
            ],
        ),
        1793: (
            size: 44,
            name: "debugLogForScript",
            args: [
                String32,
                Number,
                Number,
            ],
        ),
        1794: (
            size: 8,
            // enables an extra check of an attacker's hitbox versus your SUPER_ARMOR_BY_SG_COLLISION hitbox type, if it missed your main hurtbox
            name: "superArmorBySGCollision",
            args: [
                Enum("Boolean"),
            ],
        ),
        1795: (
            size: 8,
            name: "superArmorEnabled",
            args: [
                Enum("Boolean"),
            ],
        ),
        1796: (
            size: 8,
            name: "superArmorTime",
            args: [
                Number,
            ],
        ),
        1807: (
            size: 8,
            name: "superArmorThrow",
            args: [
                Enum("Boolean"),
            ],
        ),
        1808: (
            size: 8,
            name: "superArmorType",
            args: [
                Enum("SUPER_ARMOR_TYPE"),
            ],
        ),
        1812: (
            size: 8,
            name: "superArmorHP",
            args: [
                Number,
            ],
        ),
        1814: (
            size: 8,
            // can armor attacks that have burst set to TRUE
            name: "superArmorBurst",
            args: [
                Enum("Boolean"),
            ],
        ),
        1815: (
            size: 8,
            // an attack is considered a mid if guardType is set to ANY
            name: "superArmorMid",
            args: [
                Enum("Boolean"),
            ],
        ),
        1816: (
            size: 8,
            // an attack is considered a low if guardType is set to HIGH
            name: "superArmorOverhead",
            args: [
                Enum("Boolean"),
            ],
        ),
        1817: (
            size: 8,
            // an attack is considered a low if guardType is set to LOW
            name: "superArmorLow",
            args: [
                Enum("Boolean"),
            ],
        ),
        1818: (
            size: 8,
            // can armor unblockables. An attack is considered unblockable if it has guardType set to NONE
            name: "superArmorGuardImpossible",
            args: [
                Enum("Boolean"),
            ],
        ),
        1819: (
            size: 12,
            name: "superArmorHitstop",
            args: [
                Number,
                Number,
            ],
        ),
        1820: (
            size: 8,
            // if you have enabled superArmorBySGCollision and an attacker's hitbox missed your main hurtbox and connected instead with SUPER_ARMOR_BY_SG_COLLISION hurtbox, if additionally this attribute is set, the hit gets ignored
            name: "superArmorSGCollisionShippaiIgnore",
            args: [
                Enum("Boolean"),
            ],
        ),
        1821: (
            size: 8,
            // allows to armor attacks that have the nagenuke flag set
            name: "superArmorNagenuke",
            args: [
                Enum("Boolean"),
            ],
        ),
        1822: (
            size: 8,
            // having this flag allows you to block attacks that have isAirUnblockable set to TRUE. An attack is considered air unblockable if its guardType is not NONE and it has isAirUnblockable set to TRUE. You need to have this flag even if you're blocking such attacks on the ground
            name: "superArmorAirUnblockable",
            args: [
                Enum("Boolean"),
            ],
        ),
        1823: (
            size: 8,
            name: "superArmorDamagePercent",
            args: [
                Number,
            ],
        ),
        1824: (
            size: 8,
            // having this flag allows you to armor projectile attacks
            name: "superArmorObjectAttacck",
            args: [
                Enum("Boolean"),
            ],
        ),
        1825: (
            size: 8,
            // having this flag allows you to armor non-projectile (direct, player) attacks
            name: "superArmorHontaiAttacck",
            args: [
                Enum("Boolean"),
            ],
        ),
        1826: (
            size: 8,
            name: "superArmorFire",
            args: [
                Number,
            ],
        ),
        1827: (
            size: 8,
            // can only armor attacks that have attackReflect set to TRUE. Also, this is very important, but superArmorType must be DODGE. If you armor ("dodge") a projectile successfully it automatically gets reflected. You will receive a REFLECT_ENEMY_PROJECTILE event and the projectile will receive a GOT_REFLECTED event
            name: "superArmorForReflect",
            args: [
                Enum("Boolean"),
            ],
        ),
        1828: (
            size: 8,
            // can armor projectile attacks from objects that have setProjectileDurability set to 0
            name: "superArmorProjectileLevel0",
            args: [
                Enum("Boolean"),
            ],
        ),
        1829: (
            size: 8,
            // can armor overdrives
            name: "superArmorOverdrive",
            args: [
                Enum("Boolean"),
            ],
        ),
        1830: (
            size: 8,
            name: "superArmorRecoverDamageRate",
            args: [
                Number,
            ],
        ),
        1831: (
            size: 8,
            // can armor Blitz Break attacks. Note that overdrives are by default Blitz Breaks
            name: "superArmorBlitzBreak",
            args: [
                Enum("Boolean"),
            ],
        ),
        1832: (
            size: 8,
            name: "superArmorAttackLevel",
            args: [
                Number,
            ],
        ),
        1833: (
            size: 8,
            // can only armor hits only from either projectiles that have attackReflect flag, or projectiles that were initially created by your opponent, or projectiles that are not currently reflected (swapped their team to the opposite)
            name: "superArmorJibaku",
            args: [
                Number,
            ],
        ),
        1834: (
            size: 8,
            // if you don't have this attribute and armor a hit, you take damage scaled by superArmorDamagePercent and with guts applied to it. If you do have this attribute and armor a hit, you take chip damage like you do on block
            name: "superArmorHeadAttribute",
            args: [
                Enum("Boolean"),
            ],
        ),
        1851: (
            size: 8,
            name: "resetExGauge",
            args: [
                Number,
            ],
        ),
        1855: (
            size: 12,
            name: "exGaugeValue",
            args: [
                Number,
                Number,
            ],
        ),
        1856: (
            size: 12,
            name: "exGaugeMaxValue",
            args: [
                Number,
                Number,
            ],
        ),
        1857: (
            size: 12,
            name: "exGaugeSplitNum",
            args: [
                Number,
                Number,
            ],
        ),
        1858: (
            size: 12,
            name: "exGaugeMaxColor",
            args: [
                Number,
                Number,
            ],
        ),
        1860: (
            size: 12,
            name: "exGaugeZeroToNoDisp",
            args: [
                Number,
                Number,
            ],
        ),
        1861: (
            size: 12,
            name: "exGaugeDigit",
            args: [
                Number,
                Number,
            ],
        ),
        1862: (
            size: 12,
            name: "exGaugeIcon",
            args: [
                Number,
                Number,
            ],
        ),
        1863: (
            size: 12,
            name: "exGaugeColor",
            args: [
                Number,
                Number,
            ],
        ),
        1864: (
            size: 12,
            name: "exGaugeDisplay",
            args: [
                Number,
                Number,
            ],
        ),
        1865: (
            size: 12,
            name: "exGaugeMaxToNoDisplay",
            args: [
                Number,
                Number,
            ],
        ),
        1866: (
            size: 12,
            name: "exGaugeFlashEveryTime",
            args: [
                Number,
                Number,
            ],
        ),
        1867: (
            size: 16,
            name: "exGaugeFlag",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1869: (
            size: 8,
            name: "floorCollision",
            args: [
                Number,
            ],
        ),
        1870: (
            size: 4,
            name: "resetOutPower",
            args: [],
        ),
        1871: (
            size: 8,
            name: "objectRenderStage",
            args: [
                Number,
            ],
        ),
        1872: (
            size: 4,
            name: "skeletonPaletteEffectOnNoStopIdling",
            args: [],
        ),
        1873: (
            size: 8,
            // If clash cancel is enabled, from a clash you will be able to cancel into pretty much anything, like FD and forward dash.
            // Without this, only gatlings, special cancels and jump cancels get enabled.
            // The following move types by default have clashCancel set to TRUE:
            // NORMAL, DEAD_ANGLE_ATTACK, INSTANT_KILL_PREPARATION, BLITZ_SHIELD, SPECIAL, MIST_CANCEL, OVERDRIVE, INSTANT_KILL
            name: "clashCancel",
            args: [
                Enum("Boolean"),
            ],
        ),
        1874: (
            size: 8,
            name: "demoEndOnVoiceEnd",
            args: [
                Number,
            ],
        ),
        1876: (
            size: 8,
            name: "maxHealth",
            args: [
                Number,
            ],
        ),
        1877: (
            size: 8,
            name: "setHP",
            args: [
                Number,
            ],
        ),
        1879: (
            size: 4,
            name: "playerDirection",
            args: [],
        ),
        1880: (
            size: 8,
            name: "setBGType",
            args: [
                Number,
            ],
        ),
        1881: (
            size: 8,
            name: "actionKeepBG",
            args: [
                Number,
            ],
        ),
        1882: (
            size: 8,
            name: "landingHeight",
            args: [
                Number,
            ],
        ),
        1883: (
            size: 4,
            name: "attackOff",
            args: [],
        ),
        1884: (
            size: 12,
            // 1) Initializes move properties and;
            // 2) Sets counterhit state;
            // 3) Sets setObjectPriority: 2.
            // What "Initializes move properties" does is:
            // 1) Resets attack data. This means:
            //     attackType: (NONE)
            //     attackLevel: 0
            //     damage: 0
            //     resets all flags to (FALSE), except prorationTandan: (TRUE) and unknown flag (attack data 0x18, 0x100): (TRUE)
            //     enemyHitstopAddition: 2147483647, 2147483647, 2147483647
            //     hitstop: 2147483647
            //     attackLockWaitTime: 15
            //     blockstunAmount: 2147483647
            //     airBlockstunAddition: 2147483647
            //     attackRange: -1, -1, -1, -1
            //     throwRange: -1
            //     setProjectileDurability: 0
            //     counterHitType: (DEFAULT)
            //     attackLockAction: s32''
            //     damageEffect: 0, s32''
            //     guardEffect: 0, s32''
            //     damageToFaultlessDefense: 2147483647
            //     attackEffectLimit: 0
            //     attackFrontDirection: (CALCULATE_FROM_ATTACKER_PLAYER_X)
            //     attackEffectScale: 1000
            //     killType: (NORMAL)
            //     nextHitActionName: s32''
            //     attackExHitParam: 0, -1000000, 1000000, 0, 0, Val(0)
            //     poison: 0, 0
            //     throwRejectType: 0
            //     minimumDamagePercent: 0
            //     stunValue: 2147483647
            //     guardType: (ANY)
            //     attackLockSprite: s32''
            //     throwSprite: s32''
            //     autoParam: (TRUE)
            //     hitPushbackX: 100
            //     pushbackXForHit: 100
            //     crouchHitstunAddition: 0
            //     airHitstunFromLandAddition: 0
            //     atkAngle: 0
            //     staggerDuration: 30
            //     tensionGainOnConnect: 2147483647
            //     hitSoundEffect: s32''
            //     hitCommonSfxAppend: s32''
            //     guardSoundEffect: s32''
            //     attackLevelForGuard: 2147483647
            //     riscPlus: 2147483647
            //     riscMinus: 2147483647
            //     setInitialProration: 2147483647
            //     setForcedProration: 2147483647
            //     riscMinusStarter: 0
            //     riscMinusOnce: 2147483647
            //     attackKezuri: 16
            //     unburstableTime: 0
            //     invulnTime: 0
            //     dustInvulnTime: 0
            //     damageSprite: -1
            //     lifeStealPercent: 0
            //     exDamageType: (NONE)
            //     trialName: s32''
            //     hitPushbackXAir: 0
            //     undefined2125: 0
            // 2) For projectiles sets setProjectileDurability: 1 and attackFrontDirection: (CALCULATE_FROM_ATTACKER_PLAYER_X), disableHitstopForSelf: (TRUE).
            // 3.a) If move type is NORMAL, sets attackType: (NORMAL), for players if move state is standing or crouching, sets isAirUnblockable: (TRUE), and if state is jumping, sets guardType: (HIGH).
            // 3.b) If move type is SPECIAL or MIST_CANCEL, attackType: (EX), sets attackKezuri: 16, hitEffectSpecial: (TRUE).
            // 3.c) If move type is OVERDRIVE, sets attackType: (OVERDRIVE), hitEffectSpecial: (TRUE), minimumDamagePercent: 20, ignoreBurst: (TRUE), for projectiles sets setProjectileDurability: 2, for everyone tensionGainOnConnect: 0, attackKezuri: 16, blitzBreak: (TRUE), hellfire: (TRUE).
            // 3.d) If move type is INSTANT_KILL, sets attackType: (IK), hitEffectSpecial: (TRUE), minimumDamagePercent: 20, ignoreBurst: (TRUE), nextHitInstantKillOnly: (TRUE), noGravityScaling: (TRUE), noHitstunScaling: (TRUE), ignoreOtg: (TRUE), noPushbackScaling: (TRUE), noDustScaling: (TRUE), noDamageScaling: (TRUE), onlyHitPlayer: (TRUE), attackNoHitNotKillCombo: (TRUE), killType: (NOT_KILL), attackIgnoreOutPower: (TRUE), attackShutup: (TRUE), allHitsCounter: (FALSE), for projectiles sets setProjectileDurability: 2, for everyone tensionGainOnConnect: 0, whiffOtg: (TRUE), whiffIfCombo: (TRUE), noFinishCamera: (TRUE), enemyHitstopAddition: 0, 0, 0
            // 3.e) If move type is DEAD_ANGLE_ATTACK or BLITZ_SHIELD, sets attackType: (NORMAL).
            // 4) For projectiles sets riscPlus: 2
            name: "instantInitializeForProjectile",
            args: [
                Enum("moveType0_1378"),
                // update action ID. If true, assigns a unique ID to the projectile's attack
                Enum("Boolean"),
            ],
        ),
        1885: (
            size: 16,
            name: "sendSignalEx",
            args: [
                // the entity to send the signal to
                Enum("Entity"),
                // this parameter can be accessed in the signal handler using SEND_SIGNAL_EX_PARAM2 named variable
                Number,
                // this parameter can be accessed in the signal handler using SEND_SIGNAL_EX_PARAM3 named variable
                Number,
            ],
        ),
        1886: (
            size: 68,
            name: "callPrivateFunction",
            args: [
                String32,
                AccessedValue,
                AccessedValue,
                AccessedValue,
                AccessedValue,
            ],
        ),
        1887: (
            size: 8,
            name: "dashKeepInputTime",
            args: [
                Number,
            ],
        ),
        1888: (
            size: 8,
            name: "setPositionXByScreenPercentage",
            args: [
                Number,
            ],
        ),
        1889: (
            size: 8,
            name: "setPositionYByScreenPercentage",
            args: [
                Number,
            ],
        ),
        1890: (
            size: 8,
            name: "demoEndOnMouthEnd",
            args: [
                Number,
            ],
        ),
        1891: (
            size: 8,
            name: "actionKeepAngle",
            args: [
                Number,
            ],
        ),
        1893: (
            size: 4,
            name: "checkDamagedProjectileLevel",
            args: [],
        ),
        1922: (
            size: 8,
            // calling this with argument 1 on a projectile allows the player who landed a hit with this projectile to jump cancel and gatling. This is obsolete and superseded by linkObjectCollision
            name: "forceHitSignal",
            args: [
                Number,
            ],
        ),
        1923: (
            size: 36,
            name: "linkParticleWithArg2",
            args: [
                String32,
            ],
        ),
        1924: (
            size: 8,
            name: "setAngleByDirection",
            args: [
                Number,
            ],
        ),
        1925: (
            size: 8,
            name: "forceShadowOn",
            args: [
                Number,
            ],
        ),
        1926: (
            size: 8,
            name: "preventMovement",
            args: [
                Number,
            ],
        ),
        1927: (
            size: 8,
            name: "preventGuard",
            args: [
                Number,
            ],
        ),
        1928: (
            size: 4,
            name: "controlDirectionReverse",
            args: [],
        ),
        1929: (
            size: 4,
            name: "controlDirectionVersusTarget",
            args: [],
        ),
        1930: (
            size: 4,
            name: "controlDirectionLeft",
            args: [],
        ),
        1931: (
            size: 4,
            name: "controlDirectionRight",
            args: [],
        ),
        1932: (
            size: 4,
            name: "negativeForBackDash",
            args: [],
        ),
        1933: (
            size: 8,
            name: "slowField",
            args: [
                Number,
            ],
        ),
        1934: (
            size: 8,
            name: "stopHitSignal",
            args: [
                Number,
            ],
        ),
        1935: (
            size: 8,
            name: "pushbackReturnObject",
            args: [
                Number,
            ],
        ),
        1936: (
            size: 16,
            name: "setMoveCheckBit",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1937: (
            size: 8,
            name: "colorIsAddColor",
            args: [
                Number,
            ],
        ),
        1938: (
            size: 20,
            // modifies ACCUMULATOR
            name: "checkStageName",
            args: [
                String16,
            ],
        ),
        1939: (
            size: 8,
            name: "pauseTimer",
            args: [
                Number,
            ],
        ),
        1940: (
            size: 8,
            name: "hideUI",
            args: [
                Number,
            ],
        ),
        1941: (
            size: 8,
            name: "turnLimitByInitialize",
            args: [
                Number,
            ],
        ),
        1942: (
            size: 8,
            name: "ignorePushback",
            args: [
                Number,
            ],
        ),
        1943: (
            size: 8,
            name: "pushboxHeightLow",
            args: [
                Number,
            ],
        ),
        1946: (
            size: 8,
            name: "setLightAlpha",
            args: [
                Number,
            ],
        ),
        1947: (
            size: 8,
            name: "addLightAlpha",
            args: [
                Number,
            ],
        ),
        1948: (
            size: 8,
            name: "lightAlphaPercent",
            args: [
                Number,
            ],
        ),
        1949: (
            size: 8,
            name: "setLightAlphaSpeed",
            args: [
                Number,
            ],
        ),
        1950: (
            size: 8,
            name: "addLightAlphaSpeed",
            args: [
                Number,
            ],
        ),
        1951: (
            size: 8,
            name: "addLightAlphaSpeedPercent",
            args: [
                Number,
            ],
        ),
        1952: (
            size: 8,
            name: "setLightRedColor",
            args: [
                Number,
            ],
        ),
        1953: (
            size: 8,
            name: "addLightRedColor",
            args: [
                Number,
            ],
        ),
        1954: (
            size: 8,
            name: "addLightRedColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        1955: (
            size: 8,
            name: "setLightRedColorSpeed",
            args: [
                Number,
            ],
        ),
        1956: (
            size: 8,
            name: "addLightRedColorSpeed",
            args: [
                Number,
            ],
        ),
        1957: (
            size: 8,
            name: "addLightRedColorSpeedPercent2",
            args: [
                Number,
            ],
        ),
        1958: (
            size: 8,
            name: "setLightGreenColor",
            args: [
                Number,
            ],
        ),
        1959: (
            size: 8,
            name: "addLightGreenColor",
            args: [
                Number,
            ],
        ),
        1960: (
            size: 8,
            name: "addLightGreenColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        1961: (
            size: 8,
            name: "setLightGreenColorSpeed",
            args: [
                Number,
            ],
        ),
        1962: (
            size: 8,
            name: "addLightGreenColorSpeed",
            args: [
                Number,
            ],
        ),
        1963: (
            size: 8,
            name: "addLightGreenColorSpeedPercent2",
            args: [
                Number,
            ],
        ),
        1964: (
            size: 8,
            name: "setLightBlueColor",
            args: [
                Number,
            ],
        ),
        1965: (
            size: 8,
            name: "addLightBlueColor",
            args: [
                Number,
            ],
        ),
        1966: (
            size: 8,
            name: "addLightBlueColorSpeedPercent",
            args: [
                Number,
            ],
        ),
        1967: (
            size: 8,
            name: "setLightBlueColorSpeed",
            args: [
                Number,
            ],
        ),
        1968: (
            size: 8,
            name: "addLightBlueColorSpeed",
            args: [
                Number,
            ],
        ),
        1969: (
            size: 8,
            name: "addLightBlueColorSpeedPercent2",
            args: [
                Number,
            ],
        ),
        1970: (
            size: 12,
            name: "setDestLightColor",
            args: [
                Number,
                Number,
            ],
        ),
        1971: (
            size: 8,
            name: "setLightColor",
            args: [
                Number,
            ],
        ),
        1972: (
            size: 16,
            name: "setDestLightColorEx",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1973: (
            size: 4,
            name: "resetLightColorLoopCount",
            args: [],
        ),
        1974: (
            size: 8,
            name: "lightColorIgnoreStop",
            args: [
                Number,
            ],
        ),
        1975: (
            size: 8,
            name: "setLightColorByPaletteIndex",
            args: [
                Number,
            ],
        ),
        1983: (
            size: 16,
            name: "setDestColorEx",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        1984: (
            size: 4,
            name: "resetMultColorLoop",
            args: [],
        ),
        1985: (
            size: 8,
            name: "multColorIgnoreStop",
            args: [
                Number,
            ],
        ),
        1993: (
            size: 4,
            name: "homingClear",
            args: [],
        ),
        1994: (
            size: 8,
            name: "keepEnemyStunCountMin",
            args: [
                Number,
            ],
        ),
        1995: (
            size: 8,
            name: "multiObjectAttackStop",
            args: [
                Number,
            ],
        ),
        1996: (
            size: 16,
            name: "YukkiriSpeed",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        // has three usages, depending on the first argument:
        // homing: (PERCENTAGE_FROM_DISTANCE_AND_DRAG), Entity, Position, OffsetX, OffsetY, Percentage of distance to use as acceleration, Drag percentage
        // homing: (ACCELERATION_AND_DRAG),             Entity, Position, OffsetX, OffsetY, Absolute acceleration, Drag percentage
        // homing: (MAXIMUM_SPEED_AND_ACCELERATION),    Entity, Position, OffsetX, OffsetY, Maximum speed, Absolute acceleration
        1997: (
            size: 48,
            name: "homing",
            args: [
                Enum("HomingType"),
                // the entity + position specify the destination to which to home into
                Enum("Entity"),
                // this position is specified relative to the specified entity
                Enum("POS_TYPE"),
                // the X offset applied to the homing destination towards the facing direction of the graphical sprite of the entity referenced by the second argument
                AccessedValue,
                // the Y offset applied to the homing destination
                AccessedValue,
                // in homing type PERCENTAGE_FROM_DISTANCE_AND_DRAG, specifies percentage of distance to use as acceleration. In type ACCELERATION_AND_DRAG, it is absolute acceleration. In type MAXIMUM_SPEED_AND_ACCELERATION, it is abosolute maixmum speed (actual speed will gradually be altered until it matches maximum speed)
                AccessedValue,
                // in type MAXIMUM_SPEED_AND_ACCELERATION, controls how fast the speed changes to the desired one and specifies absolute acceleration. In types PERCENTAGE_FROM_DISTANCE_AND_DRAG and ACCELERATION_AND_DRAG, it is like drag percentage, which means it multiplies the current speed by itself, as a percentage, every frame, before acceleration (the previous argument) is applied.
                AccessedValue,
            ],
        ),
        // the name of the state that was prior to the current state. For example, cancelling a 5P into 5K will show that "last state name" is NmlAtk5A, during 5K's animation
        1998: (
            size: 36,
            name: "checkLastStateName",
            args: [
                String32,
            ],
        ),
        1999: (
            size: 40,
            name: "checkLastAttackHitStateName",
            args: [
                Enum("Entity"),
                String32,
            ],
        ),
        2000: (
            size: 4,
            name: "instantKillResource",
            args: [],
        ),
        2001: (
            size: 40,
            // during BEFORE_EXIT event "current state name" still points to the old state name. Then OnFinalize fires. Then the "current state name" is set to the new state. During the IMMEDIATE event the "current state name" is already set to the new state
            // during PLAYER_CHANGED_STATE event it points to the old state.
            name: "checkCurrentStateName",
            args: [
                Enum("Entity"),
                String32,
            ],
        ),
        2003: (
            size: 8,
            name: "resetAura",
            args: [
                Number,
            ],
        ),
        2004: (
            size: 12,
            name: "moveToPosType",
            args: [
                Enum("Entity"),
                Enum("POS_TYPE"),
            ],
        ),
        2005: (
            size: 16,
            name: "moveToPosTypeToPosType",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2006: (
            size: 8,
            name: "addNamerakaMoveX",
            args: [
                Number,
            ],
        ),
        2007: (
            size: 8,
            name: "setNamerakaMoveX",
            args: [
                Number,
            ],
        ),
        2008: (
            size: 44,
            // sends SEND_SIGNAL_NAME signal to the entity specified in arg1. Arg2 and 3 get stored in a place during that event, and you can check Arg2 using checkSignalName.
            // After this function ends, it resets the target entity's storage places for Arg 2 and 3 back to their original values.
            name: "sendSignalName",
            args: [
                // the target entity on which to fire the SEND_SIGNAL_NAME event
                Enum("Entity"),
                // gets stored somewhere inside the target entity. You can use checkSignalName to check this name
                String32,
                // gets stored somewhere inside the target entity. There is no way to access or check this argument. It is useless
                Number,
            ],
        ),
        2009: (
            size: 36,
            // checks what was arg 2 of the last sendSignalName call that fired your last SEND_SIGNAL_NAME event handler. However, you can only check the value inside the SEND_SIGNAL_NAME handler, as it gets immediately reset after that handler finishes
            name: "checkSignalName",
            args: [
                String32,
            ],
        ),
        2010: (
            size: 8,
            name: "instantKillBgmRequest",
            args: [
                Number,
            ],
        ),
        2012: (
            size: 36,
            name: "linkPawn",
            args: [
                String32,
            ],
        ),
        2013: (
            size: 40,
            name: "playAnimation",
            args: [
                String32,
                Number,
            ],
        ),
        2014: (
            size: 8,
            name: "setAnimationLoop",
            args: [
                Number,
            ],
        ),
        2015: (
            size: 4,
            name: "stepAnimation",
            args: [],
        ),
        2016: (
            size: 8,
            name: "stepAnimation2",
            args: [
                Number,
            ],
        ),
        2017: (
            size: 8,
            name: "setAnimationFrame",
            args: [
                Number,
            ],
        ),
        2018: (
            size: 8,
            name: "reverseDisplay",
            args: [
                Number,
            ],
        ),
        2019: (
            size: 8,
            name: "setMeshDirMode",
            args: [
                Number,
            ],
        ),
        2020: (
            size: 48,
            name: "playCameraAnimation",
            args: [
                String32,
                Number,
                Number,
                Number,
            ],
        ),
        2021: (
            size: 8,
            name: "stepAnimationMode",
            args: [
                Number,
            ],
        ),
        2022: (
            size: 8,
            name: "linkParticleStopSpawn",
            args: [
                Number,
            ],
        ),
        2023: (
            size: 8,
            name: "displayModel",
            args: [
                Number,
            ],
        ),
        2024: (
            size: 8,
            name: "resetLocalTime",
            args: [
                Number,
            ],
        ),
        2025: (
            size: 36,
            name: "beginMeshSet",
            codeBlock: Begin,
            args: [
                String32,
            ],
        ),
        2026: (
            size: 36,
            name: "addToMeshSet",
            args: [
                String32,
            ],
        ),
        2027: (
            size: 4,
            name: "endMeshSet",
            codeBlock: End,
            args: [],
        ),
        2028: (
            size: 36,
            name: "swapMeshSet",
            args: [
                String32,
            ],
        ),
        2029: (
            size: 4,
            name: "clearMeshSet",
            args: [],
        ),
        2030: (
            size: 4,
            name: "setSavedMeshSetName",
            args: [],
        ),
        2031: (
            size: 4,
            name: "switchMeshSet",
            args: [],
        ),
        2032: (
            size: 36,
            name: "setDefaultMeshSet",
            args: [
                String32,
            ],
        ),
        2033: (
            size: 4,
            name: "resetDefaultMeshSet",
            args: [],
        ),
        2034: (
            size: 4,
            name: "changeDefaultMeshSet",
            args: [],
        ),
        2035: (
            size: 36,
            name: "changeMaterialSet",
            args: [
                String32,
            ],
        ),
        2036: (
            size: 4,
            name: "resetMaterialSet",
            args: [],
        ),
        2037: (
            size: 12,
            name: "startLip",
            args: [
                Number,
                Number,
            ],
        ),
        2038: (
            size: 20,
            name: "startLipEx",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2039: (
            size: 4,
            name: "stopLip",
            args: [],
        ),
        2040: (
            size: 8,
            name: "startEyeBlink",
            args: [
                Number,
            ],
        ),
        2041: (
            size: 16,
            name: "startEyeBlinkEx",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2042: (
            size: 4,
            name: "stopEyeBlink",
            args: [],
        ),
        2043: (
            size: 36,
            name: "presetCameraMotion",
            args: [
                String32,
            ],
        ),
        2044: (
            size: 48,
            name: "cameraMotion",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2045: (
            size: 52,
            name: "cameraShake",
            args: [
                String32,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2046: (
            size: 4,
            name: "stopCameraShake",
            args: [],
        ),
        2047: (
            size: 60,
            name: "cameraMotionEx",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2048: (
            size: 72,
            name: "targetCamera",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2049: (
            size: 68,
            name: "targetCameraWorldPos",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2050: (
            size: 4,
            name: "linkCommonPawn",
            args: [],
        ),
        2051: (
            size: 8,
            name: "diffusionFilterToLevel",
            args: [
                Number,
            ],
        ),
        2052: (
            size: 8,
            name: "openMouth",
            args: [
                Number,
            ],
        ),
        2053: (
            size: 4,
            name: "closeMouth",
            args: [],
        ),
        2054: (
            size: 12,
            name: "overrideLightDirection",
            args: [
                Number,
                Number,
            ],
        ),
        2055: (
            size: 4,
            name: "resetLightDirection",
            args: [],
        ),
        2056: (
            size: 8,
            name: "stopMoveCamera",
            args: [
                Number,
            ],
        ),
        2057: (
            size: 56,
            name: "playCameraAnimeWorldPos",
            args: [
                String32,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2058: (
            size: 4,
            name: "requestInstantKillBgm",
            args: [],
        ),
        2059: (
            size: 8,
            name: "autoResetAnimeMode",
            args: [
                Number,
            ],
        ),
        2060: (
            size: 8,
            name: "depthDarken",
            args: [
                Number,
            ],
        ),
        2061: (
            size: 8,
            name: "linkMatchResultCamera",
            args: [
                Number,
            ],
        ),
        2062: (
            size: 28,
            name: "setMatchResultPos",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2063: (
            size: 12,
            name: "fadeOutStart",
            args: [
                Number,
                Number,
            ],
        ),
        2064: (
            size: 8,
            name: "fadeInStart",
            args: [
                Number,
            ],
        ),
        2065: (
            size: 4,
            name: "resetCamera",
            args: [],
        ),
        2066: (
            size: 12,
            name: "setPosXBetweenObject",
            args: [
                Number,
                Number,
            ],
        ),
        2067: (
            size: 12,
            name: "setPosYBetweenObject",
            args: [
                Number,
                Number,
            ],
        ),
        2068: (
            size: 20,
            name: "pushScreenOffset",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2069: (
            size: 4,
            name: "resetPushScreenOffset",
            args: [],
        ),
        2070: (
            size: 4,
            name: "stopAnimeLoop",
            args: [],
        ),
        2071: (
            size: 8,
            name: "enableMatchWinSecondAction",
            args: [
                Number,
            ],
        ),
        2072: (
            size: 4,
            name: "endMatchWinSecondAction",
            args: [],
        ),
        2073: (
            size: 8,
            name: "setMatchWinFadeOutTime",
            args: [
                Number,
            ],
        ),
        2074: (
            size: 8,
            name: "stopCameraAnime",
            args: [
                Number,
            ],
        ),
        2075: (
            size: 8,
            name: "lockScreenPosition",
            args: [
                Number,
            ],
        ),
        2076: (
            size: 36,
            name: "changeMouth",
            args: [
                String32,
            ],
        ),
        2077: (
            size: 36,
            name: "bgmRequest",
            args: [
                String32,
            ],
        ),
        2078: (
            size: 40,
            name: "changeMainBgm",
            args: [
                String32,
                Number,
            ],
        ),
        2079: (
            size: 16,
            name: "sceneAddColor",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2080: (
            size: 16,
            name: "sceneMulColor",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2081: (
            size: 16,
            name: "sceneLightColor",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2082: (
            size: 16,
            name: "sceneAmbientColor",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2083: (
            size: 8,
            name: "diffusionFilterToSaturation",
            args: [
                Number,
            ],
        ),
        2084: (
            size: 8,
            name: "haiku",
            args: [
                Number,
            ],
        ),
        2085: (
            size: 4,
            name: "haikuEnd",
            args: [],
        ),
        2086: (
            size: 36,
            name: "changeSoundMode",
            args: [
                String32,
            ],
        ),
        2087: (
            size: 8,
            name: "diffusionFilterToForce",
            args: [
                Number,
            ],
        ),
        2088: (
            size: 4,
            name: "finishCameraInit",
            args: [],
        ),
        2089: (
            size: 36,
            name: "finishCameraRequest",
            args: [
                String32,
            ],
        ),
        2090: (
            size: 8,
            name: "enableUpdateSceneTexture",
            args: [
                Number,
            ],
        ),
        2091: (
            size: 4,
            name: "resetSceneColor",
            args: [],
        ),
        2092: (
            size: 12,
            name: "glareDisp",
            args: [
                Number,
                Number,
            ],
        ),
        2093: (
            size: 20,
            name: "glareColor",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2094: (
            size: 8,
            name: "resetGlareColor",
            args: [
                Number,
            ],
        ),
        2095: (
            size: 12,
            name: "glareAlpha",
            args: [
                Number,
                Number,
            ],
        ),
        2096: (
            size: 20,
            name: "glareAlphaTo",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2097: (
            size: 16,
            name: "glareSize",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2098: (
            size: 16,
            name: "glarePos",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2099: (
            size: 36,
            name: "blurStart",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2100: (
            size: 8,
            name: "blurEnd",
            args: [
                Number,
            ],
        ),
        2101: (
            size: 20,
            name: "contrastEffect",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2102: (
            size: 8,
            name: "updateOrthoBlend",
            args: [
                Number,
            ],
        ),
        2103: (
            size: 8,
            name: "addWindPower",
            args: [
                Number,
            ],
        ),
        2106: (
            size: 40,
            name: "eventMessage",
            args: [
                String32,
                Number,
            ],
        ),
        2107: (
            size: 40,
            name: "eventSetAction",
            args: [
                String32,
                Number,
            ],
        ),
        2108: (
            size: 4,
            name: "eventEndSignal",
            args: [],
        ),
        2109: (
            size: 76,
            name: "createExChara",
            args: [
                String32,
                String32,
                Number,
                Number,
            ],
        ),
        2110: (
            size: 36,
            name: "eventMovie",
            args: [
                String32,
            ],
        ),
        2111: (
            size: 8,
            name: "eventFadeOut",
            args: [
                Number,
            ],
        ),
        2112: (
            size: 8,
            name: "eventFadeIn",
            args: [
                Number,
            ],
        ),
        2113: (
            size: 56,
            name: "eventDispString",
            args: [],
        ),
        2114: (
            size: 16,
            name: "eventFillScreen",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2115: (
            size: 12,
            name: "eventBGMVolume",
            args: [
                Number,
                Number,
            ],
        ),
        2116: (
            size: 8,
            name: "eventOrthoBlend",
            args: [
                Number,
            ],
        ),
        2117: (
            size: 44,
            name: "eventMessageDelay",
            args: [],
        ),
        2118: (
            size: 4,
            name: "eventLastMonitor",
            args: [],
        ),
        2119: (
            size: 16,
            name: "eventDramaMatParam",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2120: (
            size: 40,
            name: "eventBgmRequest",
            args: [
                String32,
                Number,
            ],
        ),
        2121: (
            size: 8,
            name: "eventControlObject",
            args: [
                Number,
            ],
        ),
        2122: (
            size: 4,
            // pauses sprite frame advancement and prevents exitState, endState instructions from being executed
            name: "eventLoadFileWait",
            args: [],
        ),
        2123: (
            size: 36,
            name: "eventLoadFile",
            args: [
                String32,
            ],
        ),
        2124: (
            size: 4,
            name: "eventStopLip",
            args: [],
        ),
        2125: (
            size: 8
            name: "",
            args: [
                // it is some kind of distance that triggers some calculation on hit. This is either pointless or I have not found what that calculation is for
                Number,
            ],
        ),
        2126: (
            size: 36,
            name: "materialSetOnPlayAnimation",
            args: [
                String32,
            ],
        ),
        2127: (
            size: 8,
            name: "modifyBurstGauge",
            args: [
                Number,
            ],
        ),
        2128: (
            size: 4,
            name: "johnnyTreasureEff",
            args: [],
        ),
        2129: (
            size: 20,
            name: "destroyGauge",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2130: (
            size: 8,
            name: "modifyBurstGaugeScaled",
            args: [
                Number,
            ],
        ),
        2131: (
            size: 8,
            name: "resultWinPosition",
            args: [
                Number,
            ],
        ),
        2132: (
            size: 8,
            name: "burstOverdriveUIEff",
            args: [
                Number,
            ],
        ),
        2133: (
            size: 4,
            name: "burstShake",
            args: [],
        ),
        2134: (
            size: 8,
            name: "getCamera",
            args: [
                Number,
            ],
        ),
        2135: (
            size: 16,
            name: "setSaturation",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2136: (
            size: 8,
            name: "landingAutoEffect",
            args: [
                Number,
            ],
        ),
        2137: (
            size: 8,
            name: "landingAutoAction",
            args: [
                Number,
            ],
        ),
        2138: (
            size: 8,
            name: "landingAutoSpeedReset",
            args: [
                Number,
            ],
        ),
        2139: (
            size: 8,
            name: "enableFarSlash",
            args: [
                Number,
            ],
        ),
        2140: (
            size: 8,
            name: "autoInputDirectionSearch",
            args: [
                Number,
            ],
        ),
        2141: (
            size: 4,
            name: "endCounterHitState",
            args: [],
        ),
        2142: (
            size: 4,
            name: "clearInertia",
            args: [],
        ),
        2143: (
            size: 12,
            name: "floorEffect",
            args: [
                Number,
                Enum("POS_TYPE"),
            ],
        ),
        2144: (
            size: 12,
            name: "crashSfx",
            args: [
                Number,
                Number,
            ],
        ),
        2145: (
            size: 12,
            name: "shoesSfx",
            args: [
                Number,
                Number,
            ],
        ),
        2146: (
            size: 16,
            name: "shoesSfxEx",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2148: (
            size: 4,
            name: "resetOtherSpeed",
            args: [],
        ),
        2149: (
            size: 8,
            name: "ignoreSpeedTime",
            args: [
                Number,
            ],
        ),
        2150: (
            size: 8,
            // makes the object not move even when it has a speed set. False by default
            name: "ignoreSpeed",
            args: [
                Enum("Boolean"),
            ],
        ),
        2151: (
            size: 8,
            name: "invulnForAegisField",
            args: [
                Number,
            ],
        ),
        2152: (
            size: 8,
            name: "setStrikeInvul",
            args: [
                Number,
            ],
        ),
        2153: (
            size: 8,
            name: "setThrowInvul",
            args: [
                Number,
            ],
        ),
        2154: (
            size: 8,
            name: "throwInvulForTime",
            args: [
                Number,
            ],
        ),
        2155: (
            size: 8,
            name: "strikeInvulForTime",
            args: [
                Number,
            ],
        ),
        2156: (
            size: 8,
            // makes you just not participate in any hit collision checks
            name: "invulnForce",
            args: [
                Number,
            ],
        ),
        2157: (
            size: 12,
            name: "zLine",
            args: [
                Number,
                Number,
            ],
        ),
        2158: (
            size: 8,
            name: "addTension",
            args: [
                Number,
            ],
        ),
        2159: (
            size: 8,
            // the maximum number of hits you can deal in the whole animation. Decreases by 1 each hit
            name: "maxHit",
            args: [
                Number,
            ],
        ),
        2160: (
            size: 8,
            name: "nandemoCancelTime",
            args: [
                Number,
            ],
        ),
        2161: (
            size: 16,
            name: "exPointFReset",
            args: [
                Enum("POS_TYPE"),
                Number,
                Number,
            ],
        ),
        2162: (
            size: 36,
            name: "exPointFRandAdd",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2163: (
            size: 20,
            name: "exPointFAdd",
            args: [
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2164: (
            size: 20,
            name: "exPointFResetObject",
            args: [
                Enum("Entity"),
                Enum("POS_TYPE"),
                Number,
                Number,
            ],
        ),
        2168: (
            size: 28,
            name: "randomAdd",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2169: (
            size: 28,
            name: "randomAddDirection",
            args: [
                Number,
                Number,
                Number,
                Number,
                Number,
                Number,
            ],
        ),
        2170: (
            size: 28,
            name: "setRandom",
            args: [
                AccessedValue,
                AccessedValue,
                AccessedValue,
            ],
        ),
        2171: (
            size: 8,
            name: "autoAirTurn",
            args: [
                Number,
            ],
        ),
        2172: (
            size: 8,
            name: "landingAutoKeepInertia",
            args: [
                Number,
            ],
        ),
        2173: (
            size: 16,
            name: "venomBall",
            args: [
                // angle
                Number,
                Number,
                // flags
                Number,
            ],
        ),
        2174: (
            size: 8,
            name: "venomBallFlag",
            args: [
                Number,
            ],
        ),
        2175: (
            size: 12,
            name: "setSpeedByCPCRaw",
            args: [
                Number,
                Number,
            ],
        ),
        2176: (
            size: 8,
            // calling this function with an argument of 0 doesn't do anything. Destruction is different from deactivation in that deactivation deletes an object, while destruction does not. Destruction can only happen once in the lifetime of an object and causes it to turn off its attack (enter recovery), clear its LANDING and LANDING_REPEATUSE event handlers and fire its DESTROY event. Calling this a second time won't do anything.
            name: "requestDestroy",
            args: [
                Enum("Entity"),
            ],
        ),
        2177: (
            size: 8,
            // makes you get destroyed as soon as an active attack touches your hurtbox
            name: "destroyAssari",
            args: [
                Number,
            ],
        ),
        2178: (
            size: 4,
            name: "initializeDestroy",
            args: [],
        ),
        2179: (
            size: 8,
            // resets to 1 on each new state entry. The maximum number of hits this projectile can take before getting destroyed (see requestDestroy). To prevent the projectile from getting destroyed upon reaching this number of hits, use destroyAiuchi: (TRUE)
            name: "numberOfHits",
            args: [
                Number,
            ],
        ),
        2180: (
            size: 8,
            // number of hits to increment NUMBER_OF_HITS_TAKEN by when hitting a player
            name: "destroyOnEnemyDamage",
            args: [
                Number,
            ],
        ),
        2181: (
            size: 8,
            // specify the number of hits to be added to the current number of hits taken so far by the projectile, when the opponent either blocks or armors the projectile's hit. Gets reset to 0 on each new state entry
            name: "destroyOnEnemyGuard",
            args: [
                Number,
            ],
        ),
        2182: (
            size: 8,
            // number of hits to increment NUMBER_OF_HITS_TAKEN by when hitting a projectile
            name: "destroyOnHit",
            args: [
                Number,
            ],
        ),
        2183: (
            size: 8,
            // number of hits to increment NUMBER_OF_HITS_TAKEN by when clashing with another projectile. If you're a setProjectileDurability: 2 projectile or greater clashing with a setProjectileDurability: 1 projectile, you don't even register clashes, only the other one does
            name: "destroyOnClash",
            args: [
                Number,
            ],
        ),
        2184: (
            size: 8,
            name: "destroyOnPlayerStateChange",
            args: [
                Number,
            ],
        ),
        2185: (
            size: 8,
            name: "destroyOnPlayerHitstun",
            args: [
                Number,
            ],
        ),
        2186: (
            size: 8,
            name: "destroyOnPlayerGuard",
            args: [
                Number,
            ],
        ),
        2187: (
            size: 8,
            // if passed 1, this object will be destroyed on both ally and enemy player instant kills connecting
            name: "destroyOnInstantKill",
            args: [
                Number,
            ],
        ),
        2188: (
            size: 8,
            // this function sets a flag that is not used anywhere
            name: "destroyOnEnemyInstantKill_OBSOLETE",
            args: [
                Number,
            ],
        ),
        2189: (
            size: 8,
            // works in tandem with destroyAssariEx. Call with 1 to register hits or 0 (default) to not register them. Specifying a number greater than 1 will increment the number of hits taken by that many hits each hit instead. The projectile gets destroyed when reaching the maximum number of hits (see numberOfHits)
            name: "destroyOnDamageCollision",
            args: [
                Number,
            ],
        ),
        2190: (
            size: 12,
            // when the timer expires, the object destroys itself. The timer does not advance when in hitstop
            name: "destroyTenmetsuTimer",
            args: [
                AccessedValue,
            ],
        ),
        2191: (
            size: 8,
            // calling this with (TRUE) makes the projectile not disappear when it takes the maximum number of hits. Gets reset to (FALSE) on each new state entry
            name: "destroyAiuchi",
            args: [
                Enum("Boolean"),
            ],
        ),
        2192: (
            size: 8,
            name: "destroyOnDamageOnly",
            args: [
                Number,
            ],
        ),
        2193: (
            size: 8,
            // makes this projectile able to get hit by active attacks touching its hurtbox. This also enables it to receive ASSARI_GOT_HIT event, and you can control whether the number of hits counter gets incremented upon hit by calling destroyOnDamageCollision. Gets reset to 0 on each new state entry. The projectile will get destroyed when reaching the maximum number of hits, set by numberOfHits.
            name: "destroyAssariEx",
            args: [
                Number,
            ],
        ),
        2196: (
            size: 12,
            name: "hide",
            args: [
                Number,
                Number,
            ],
        ),
        2197: (
            size: 8,
            name: "velocityXPercentEachFrame",
            args: [
                Number,
            ],
        ),
        2198: (
            size: 8,
            name: "velocityYPercentEachFrame",
            args: [
                Number,
            ],
        ),
        2199: (
            size: 8,
            name: "fadeOut",
            args: [
                Number,
            ],
        ),
        2200: (
            size: 4,
            name: "clearLandingStiffTime",
            args: [],
        ),
        2201: (
            size: 8,
            name: "timeSlow",
            args: [
                Number,
            ],
        ),
        2202: (
            size: 8,
            name: "romanCancelAvailability",
            args: [
                Enum("romanCancelAvailability0_2202"),
            ],
        ),
        2203: (
            size: 8,
            name: "yrcWindowLength",
            args: [
                Number,
            ],
        ),
        2204: (
            size: 8,
            name: "yrcWindowLengthByAttack",
            args: [
                Number,
            ],
        ),
        2205: (
            size: 4,
            name: "romanCancelInit",
            args: [],
        ),
        2210: (
            size: 8,
            name: "disableWall",
            args: [
                Number,
            ],
        ),
        2211: (
            size: 40,
            name: "jimaku",
            args: [
                String32,
                Number,
            ],
        ),
        2212: (
            size: 8,
            name: "hideAllButSelf",
            args: [
                Number,
            ],
        ),
        2213: (
            size: 72,
            name: "entryAction",
            args: [
                String32,
                String32,
                Number,
            ],
        ),
        2214: (
            size: 8,
            name: "autoYSpeed66PerByHit",
            args: [
                Number,
            ],
        ),
        2215: (
            size: 4,
            name: "tensionAddByLongHair",
            args: [],
        ),
        2216: (
            size: 4,
            name: "hitstopTime",
            args: [],
        ),
        2217: (
            size: 8,
            name: "counterHitUkeru",
            args: [
                Number,
            ],
        ),
        2218: (
            size: 20,
            name: "moveToPosTypeToPosTypeEx",
            args: [
                Enum("Entity"),
                Enum("POS_TYPE"),
                Enum("Entity"),
                Enum("POS_TYPE"),
            ],
        ),
        2219: (
            size: 12,
            name: "suikomiRange",
            args: [
                Number,
                Number,
            ],
        ),
        2220: (
            size: 16,
            name: "suikomi",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2221: (
            size: 8,
            name: "oilRange",
            args: [
                Number,
            ],
        ),
        2225: (
            size: 8,
            name: "suikomare",
            args: [
                Number,
            ],
        ),
        2226: (
            size: 8,
            name: "suikomareYRate",
            args: [
                Number,
            ],
        ),
        2227: (
            size: 8,
            name: "suikomareLandRate",
            args: [
                Number,
            ],
        ),
        2228: (
            size: 8,
            name: "suikomareIsReFloating",
            args: [
                Number,
            ],
        ),
        2232: (
            size: 8,
            name: "collisionDisplayTenmetsu",
            args: [
                Number,
            ],
        ),
        2233: (
            size: 8,
            name: "collisionDisplay",
            args: [
                Number,
            ],
        ),
        2234: (
            size: 36,
            name: "onSpriteChange",
            args: [
                String32,
            ],
        ),
        2235: (
            size: 8,
            name: "tempShoesType",
            args: [
                Number,
            ],
        ),
        2236: (
            size: 16,
            name: "checkFloorAttribute",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2237: (
            size: 4,
            name: "createArgInit",
            args: [],
        ),
        2238: (
            size: 12,
            name: "createArgNoAssert",
            args: [
                Number,
                Number,
            ],
        ),
        2241: (
            size: 12,
            name: "createArgScale",
            args: [
                Number,
                Number,
            ],
        ),
        2242: (
            size: 12,
            name: "createArgScaleMult",
            args: [
                Number,
                Number,
            ],
        ),
        2243: (
            size: 12,
            name: "createArgAngle",
            args: [
                Number,
                Number,
            ],
        ),
        2244: (
            size: 12,
            name: "createArgAnglePlus",
            args: [
                Number,
                Number,
            ],
        ),
        2245: (
            size: 8,
            name: "createArgDirection",
            args: [
                Enum("CreationFacing"),
            ],
        ),
        2246: (
            size: 40,
            name: "createArgSocket",
            args: [
                String32,
                Number,
            ],
        ),
        2247: (
            size: 20,
            // allows you to set two arguments that will be accessible to the entity that you create next using createObject or createObjectWithArg via CREATE_ARG_HIKITSUKI_VAL_1 and CREATE_ARG_HIKITSUKI_VAL_2 named variables
            name: "createArgHikitsukiVal",
            args: [
                AccessedValue,
                AccessedValue,
            ],
        ),
        2248: (
            size: 12,
            name: "createArgLightColor",
            args: [
                Number,
                Number,
            ],
        ),
        2249: (
            size: 12,
            name: "createArgColor",
            args: [
                Number,
                Number,
            ],
        ),
        2250: (
            size: 8,
            name: "createArgTransPriority",
            args: [
                Number,
            ],
        ),
        2260: (
            size: 8,
            name: "noGuardEffect",
            args: [
                Number,
            ],
        ),
        2261: (
            size: 8,
            name: "keepAirDamageActionUpper",
            args: [
                Number,
            ],
        ),
        2262: (
            size: 8,
            name: "addTensionValAtMoveBBS",
            args: [
                Number,
            ],
        ),
        2263: (
            size: 8,
            name: "setHitstop",
            args: [
                Number,
            ],
        ),
        2266: (
            size: 16,
            name: "checkInputExDirection",
            args: [
                Number,
                Number,
                Number,
            ],
        ),
        2267: (
            size: 8,
            name: "scaleForLink",
            args: [
                Number,
            ],
        ),
        2268: (
            size: 8,
            name: "scaleForLinkX",
            args: [
                Number,
            ],
        ),
        2269: (
            size: 8,
            name: "scaleForLinkY",
            args: [
                Number,
            ],
        ),
        2270: (
            size: 8,
            name: "scaleForLinkZ",
            args: [
                Number,
            ],
        ),
        2271: (
            size: 8,
            name: "scaleForLinkIndependent",
            args: [
                Number,
            ],
        ),
        2272: (
            size: 40,
            name: "translucencyPriorityForMesh",
            args: [
                Number,
                String32,
            ],
        ),
        2278: (
            size: 68,
            name: "uiMessage",
            args: [
                String32,
                String32,
            ],
        ),
        2279: (
            size: 8,
            name: "attackTarget",
            args: [
                Enum("allowHitting0_2279"),
            ],
        ),
        2280: (
            size: 8,
            name: "inertiaAccel",
            args: [
                Number,
            ],
        ),
        2281: (
            size: 4,
            name: "wallTouchTime",
            args: [],
        ),
        2282: (
            size: 8,
            // makes this entity ignore slowdown caused by RC
            name: "ignoreSlowdown",
            args: [
                Enum("Boolean"),
            ],
        ),
        2283: (
            size: 8,
            name: "spriteTimeAdd",
            args: [
                Number,
            ],
        ),
        2284: (
            size: 8,
            name: "addThrowInvulnTime",
            args: [
                Number,
            ],
        ),
        2285: (
            size: 8,
            name: "addStrikeInvulnTime",
            args: [
                Number,
            ],
        ),
        2286: (
            size: 8,
            name: "forceCameraMove",
            args: [
                Number,
            ],
        ),
        2287: (
            size: 68,
            name: "meshSetNameExchange",
            args: [
                String32,
                String32,
            ],
        ),
        2288: (
            size: 4,
            name: "meshSetClearNameExchange",
            args: [],
        ),
        2289: (
            size: 8,
            name: "spriteByDamage",
            args: [
                Number,
            ],
        ),
        2290: (
            size: 8,
            name: "doNotBeginCancel",
            args: [
                Number,
            ],
        ),
        2291: (
            size: 8,
            name: "screenAdditionalWidth",
            args: [
                Number,
            ],
        ),
        2292: (
            size: 40,
            name: "meshSetCellTable",
            args: [
                String32,
                Number,
            ],
        ),
        2293: (
            size: 12,
            name: "groundShake",
            args: [
                Number,
                Number,
            ],
        ),
        2294: (
            size: 4,
            name: "groundShakeEvent",
            args: [],
        ),
        2295: (
            size: 36,
            name: "spriteForNotFound",
            args: [
                String32,
            ],
        ),
        2296: (
            size: 20,
            // checks if opponent's LAST_RECEIVED_COLLISION_ID is equal to <argument 1>, and that they're currently in hitstun, and if yes, then locks hitstun for the current frame returns a 1 into <argument 2>, otherwise returns 0 into <argument 2>
            name: "nokezoriEnchou",
            args: [
                // the value to check against opponent's LAST_RECEIVED_COLLISION_ID
                AccessedValue,
                // the value to return 1 or 0 into, depending on whether hitstun was locked (1 if yes)
                AccessedValue,
            ],
        ),
        2297: (
            size: 12,
            name: "addTensionBalance",
            args: [
                Number,
                Number,
            ],
        ),
        2298: (
            size: 12,
            name: "addTensionUnscaled",
            args: [
                Number,
                Number,
            ],
        ),
        2299: (
            size: 8,
            name: "damageToAir",
            args: [
                Number,
            ],
        ),
        2300: (
            size: 12,
            name: "ribbonVolatileCountIncrementForScript",
            args: [
                Number,
                Number,
            ],
        ),
        2301: (
            size: 8,
            name: "romanCancelFurimuki",
            args: [
                Number,
            ],
        ),
        2302: (
            size: 24,
            // stores result in ACCUMULATOR
            name: "calcDistanceEx",
            args: [
                Enum("CalcDistanceExMode"),
                Enum("Entity"),
                Enum("POS_TYPE"),
                Enum("Entity"),
                Enum("POS_TYPE"),
            ],
        ),
        2309: (
            size: 24,
            name: "cameraShakeEX",
            args: [],
        ),
        2310: (
            size: 4,
            name: "momItemLevelSolve",
            args: [],
        ),
        2311: (
            size: 8,
            name: "momItemStatusExe",
            args: [
                Number,
            ],
        ),
        2312: (
            size: 8,
            name: "hideByCutscene",
            args: [
                Number,
            ],
        ),
        2313: (
            size: 8,
            name: "jimakuTop",
            args: [
                Number,
            ],
        ),
        2314: (
            size: 12,
            name: "addMOMMedal",
            args: [
                Number,
                Number,
            ],
        ),
        2315: (
            size: 24,
            name: "forcePoison",
            args: [
                Enum("Entity"),
                AccessedValue,
                AccessedValue,
            ],
        ),
        2316: (
            size: 8,
            name: "damageToRedFlash",
            args: [
                Number,
            ],
        ),
        2317: (
            size: 8,
            name: "damageToWhiteFlash",
            args: [
                Number,
            ],
        ),
        2318: (
            size: 8,
            name: "dontUseSelfAttackCollision",
            args: [
                Number,
            ],
        ),
        2319: (
            size: 8,
            name: "floatTargetForCpu",
            args: [
                Number,
            ],
        ),
        2320: (
            size: 36,
            name: "trialTentou",
            args: [
                String32,
            ],
        ),
        2321: (
            size: 8,
            name: "naguriNagurareru",
            args: [
                Number,
            ],
        ),
        2322: (
            size: 8,
            name: "naguriNaguru",
            args: [
                Enum("upon0_21"),
            ],
        ),
        2323: (
            size: 36,
            name: "trialMissName",
            args: [
                String32,
            ],
        ),
        2324: (
            size: 8,
            name: "disableThrow",
            args: [
                Number,
            ],
        ),
        2325: (
            size: 8,
            name: "trialKeyStart",
            args: [
                Number,
            ],
        ),
        2326: (
            size: 8,
            name: "negativeNoAddByGamenhashi",
            args: [
                Number,
            ],
        ),
        2327: (
            size: 8,
            // if provided TRUE, then, when this move connects with an opponent, the attacker will have callPrivateFunction: s32'ClearPastSenkoInputTime' called on them. All moves that have moveType: (NORMAL) have bufferInputReset: 1 by default. This helps prevent a single 5P press from doing a 5P (hit) gatling into another 5P for 5Ps that have 3f startup.
            name: "bufferInputReset",
            args: [
                Enum("Boolean"),
            ],
        ),
        2328: (
            size: 36,
            name: "checkIfMoveExists",
            args: [
                String32,
            ],
        ),
        2329: (
            size: 8,
            name: "disableCrouch",
            args: [
                Number,
            ],
        ),
        2330: (
            size: 36,
            name: "checkCurrentStateEntryName",
            args: [
                String32,
            ],
        ),
        2331: (
            size: 8,
            // specifies the startup of the attack, which is used to trigger Dramatic Finale. This timer will decrement by 1 each frame and when both players have attacks out, if many different other conditions are satisfied, and both players' current dokiDokiStopHassei values are below DOKI_DOKI_STOP_HASSEI_PRE_TIME, Dramatic Finale may be triggered
            name: "dokiDokiStopHassei",
            args: [
                Number,
            ],
        ),
        2332: (
            size: 8,
            name: "dokiDokiStopDamage",
            args: [
                Number,
            ],
        ),
        2333: (
            size: 36,
            name: "checkStateEntryNameCopyFrom",
            args: [
                String32,
            ],
        ),
        2334: (
            size: 8,
            name: "disableGuard",
            args: [
                Number,
            ],
        ),
        2335: (
            size: 8,
            name: "ghost",
            args: [
                Number,
            ],
        ),
        2336: (
            size: 8,
            name: "servantA",
            args: [
                Number,
            ],
        ),
        2337: (
            size: 8,
            name: "servantB",
            args: [
                Number,
            ],
        ),
        2338: (
            size: 8,
            name: "servantC",
            args: [
                Number,
            ],
        ),
        2339: (
            size: 12,
            name: "checkEnemyRangeIn",
            args: [
                Number,
                Number,
            ],
        ),
        2340: (
            size: 4,
            name: "yogoreru",
            args: [],
        ),
        2341: (
            size: 40,
            name: "cellNoStop",
            args: [],
        ),
        2342: (
            size: 8,
            name: "zanGuardHunou",
            args: [
                Number,
            ],
        ),
        2343: (
            size: 4,
            name: "activateBackGuard",
            args: [],
        ),
        2344: (
            size: 4,
            name: "disableAirThrow",
            args: [],
        ),
        2345: (
            size: 40,
            name: "checkLastDamageActionNameAndAirStun",
            args: [
                Number,
                String32,
            ],
        ),
        2350: (
            size: 8,
            name: "trialSealLeverAll",
            args: [
                Number,
            ],
        ),
        2351: (
            size: 8,
            name: "trialSealLeverFDash",
            args: [
                Number,
            ],
        ),
        2352: (
            size: 8,
            name: "trialSealLeverGuard",
            args: [
                Number,
            ],
        ),
        2353: (
            size: 8,
            name: "trialSealLeverCrouch",
            args: [
                Number,
            ],
        ),
        2354: (
            size: 8,
            name: "trialSealLeverJump",
            args: [
                Number,
            ],
        ),
        2359: (
            size: 8,
            name: "trialSealLeverAttack",
            args: [
                Number,
            ],
        ),
        2367: (
            size: 4,
            name: "trialMiss",
            args: [],
        ),
        2368: (
            size: 8,
            name: "trialEnemyCpuStop",
            args: [
                Number,
            ],
        ),
        2369: (
            size: 8,
            name: "trialForceStandGuard",
            args: [
                Number,
            ],
        ),
        2370: (
            size: 8,
            name: "trialForceCrouchGuard",
            args: [
                Number,
            ],
        ),
        2371: (
            size: 40,
            name: "trialCheckAttackName",
            args: [
                Number,
                String32,
            ],
        ),
        2372: (
            size: 8,
            name: "nearSlashObject",
            args: [
                Number,
            ],
        ),
        2373: (
            size: 8,
            name: "hitBackObject",
            args: [
                Number,
            ],
        ),
        2374: (
            size: 8,
            name: "redRomanCancelObject",
            args: [
                Number,
            ],
        ),
        2375: (
            size: 8,
            name: "redRomanCancelTime",
            args: [
                Number,
            ],
        ),
        2376: (
            size: 8,
            name: "guardEffectObject",
            args: [
                Number,
            ],
        ),
        2377: (
            size: 8,
            name: "objectSortPriority",
            args: [
                Number,
            ],
        ),
        2378: (
            size: 4,
            name: "resetPushbackSpeed",
            args: [],
        ),
        2379: (
            size: 4,
            name: "applyHitstopForObject",
            args: [],
        ),
        2380: (
            size: 44,
            name: "trialAdvice",
            args: [
                Number,
                String32,
                Number,
            ],
        ),
        2381: (
            size: 8,
            name: "tensionBalanceFix",
            args: [
                Number,
            ],
        ),
        2382: (
            size: 8,
            name: "voiceDoNotDeadVoice",
            args: [
                Number,
            ],
        ),
        2383: (
            size: 8,
            name: "tutorialCameraMode",
            args: [
                Number,
            ],
        ),
        2384: (
            size: 8,
            name: "hitBackDontReset",
            args: [
                Number,
            ],
        ),
        2385: (
            size: 44,
            name: "trialPopUp",
            args: [],
        ),
        2386: (
            size: 8,
            name: "trialForceJump",
            args: [
                Number,
            ],
        ),
        2437: (
            size: 8,
            name: "jumpCancelBufferInputTime",
            args: [
                Number,
            ],
        ),
        2438: (
            size: 12,
            name: "addInGameCashReserveByBBS",
            args: [
                Number,
                Number,
            ],
        ),
        2439: (
            size: 4,
            name: "miss",
            args: [],
        ),
        2440: (
            size: 4,
            name: "good",
            args: [],
        ),
    }),
)
